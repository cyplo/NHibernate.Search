<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Remotion.Data.DomainObjects</name>
    </assembly>
    <members>
        <member name="T:Remotion.Data.DomainObjects.AutoRollbackBehavior">
            <summary>
            Provides an enumeration to configure <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope">ClientTransctionScope's</see> automatic rollback behavior.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.AutoRollbackBehavior.None">
            <summary>
            Indicates that <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope"/> should not perform any automatic operation.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.AutoRollbackBehavior.Rollback">
            <summary>
            Indicates that <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope"/> should automatically call <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Rollback"/> at its end when
            its transaction holds uncommitted changed.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.AutoRollbackBehavior.Discard">
            <summary>
            Indicates that <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope"/> should automatically call <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Discard"/> at
            its end.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ClientTransactionEventArgs">
            <summary>
            Provides data for <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> events.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransactionEventArgs.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})">
            <summary>
            Initializes a new instance of the <b>ClientTransactionEventArgs</b> class.
            </summary>
            <param name="domainObjects">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s affected by the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> operation. Must not be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="domainObjects"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransactionEventArgs.DomainObjects">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s affected by the <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Commit"/> operation.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ClientTransactionExtensionBase">
            <summary>
            Provides a default implementation of <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/>, acting as a base class for extensions that need only override
            a few of the <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/> notification methods.
            </summary>
            <remarks>
            This class implements all notification methods of <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/> as virtual "no-op" methods. Concrete derivations
            can override one or more of these methods in order to react on the notification methods. It is not required to call the base implementation.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.IClientTransactionExtension">
            <summary>
            Interface for extending the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> by observing events within the re-store framework.
            </summary>
            <remarks>
            <para>
            The <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/> property is not guaranteed to be set to the affected <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> when 
            a notification method is executed. Implementations that require access to the calling transaction must use the
            parameters passed to each notification method.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.TransactionInitialize(Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Invoked while a transaction is being initialized. This method is called while the constructor of the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> is 
            running.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.TransactionDiscard(Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Invoked while a transaction is being discarded.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.SubTransactionCreating(Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Invoked when a subtransaction of <paramref name="parentClientTransaction"/> is about to be created.
            </summary>
            <param name="parentClientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <remarks>
            <note type="inotes">The implementation of this method should throw an exception if the operation must be cancelled.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.SubTransactionInitialize(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Invoked while a subtransaction of <paramref name="parentClientTransaction"/> is being initialized.
            </summary>
            <param name="parentClientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="subTransaction">The subtransaction created by <paramref name="parentClientTransaction"/>.</param>
            <remarks>
            This method is invoked after <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.SubTransactionCreating(Remotion.Data.DomainObjects.ClientTransaction)"/> and before <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.SubTransactionCreated(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.ClientTransaction)"/> for the 
            <paramref name="parentClientTransaction"/> creating the subtransaction. It is also raised before <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.TransactionInitialize(Remotion.Data.DomainObjects.ClientTransaction)"/> is 
            invoked for the <paramref name="subTransaction"/>. Use this event to install <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/> instances for the
            <paramref name="subTransaction"/> if those extensions need to receive the <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.TransactionInitialize(Remotion.Data.DomainObjects.ClientTransaction)"/> event.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.SubTransactionCreated(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Invoked when a subtransaction of <paramref name="parentClientTransaction"/> has been created.
            </summary>
            <param name="parentClientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="subTransaction">The subtransaction created by <paramref name="parentClientTransaction"/>.</param>
            <remarks>
            <note type="inotes">The implementation of this method must not throw an exception.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.NewObjectCreating(Remotion.Data.DomainObjects.ClientTransaction,System.Type)">
            <summary>
            Invoked when a new <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is created, but not registered yet. 
            The operation may be cancelled at this point.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="type">The <see cref="T:System.Type"/> of the new <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.</param>
            <remarks>
            <note type="inotes">The implementation of this method should throw an exception if the operation must be cancelled.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectsLoading(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.ObjectID})">
            <summary>
            Invoked when one or multiple <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances are about to be loaded, after their 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer">DataContainers</see> have been created but before the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer">DataContainers</see> are 
            associated with the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="objectIDs">A collection of <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> values identifying the objects to be loaded.</param>
            <remarks>
            <note type="inotes">The implementation of this method should throw an exception if the operation must be cancelled.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectsLoaded(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})">
            <summary>
            Invoked when one or multiple <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s were loaded. 
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="loadedDomainObjects">A collection of all <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s that were loaded.</param>
            <remarks>
              <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnLoaded(Remotion.Data.DomainObjects.LoadMode)"/> is called before this method is invoked, whereas <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.Loaded"/> is fired after it.
            <note type="inotes">The implementation of this method must not throw an exception.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectsUnloading(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})">
            <summary>
            Invoked when the data of one or multiple <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances are about to be unloaded.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="unloadedDomainObjects">A collection of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> references whose data is to be unloaded from 
            <paramref name="clientTransaction"/>.</param>
            <remarks>
            <note type="inotes">The implementation of this method should throw an exception if the operation must be cancelled.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectsUnloaded(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})">
            <summary>
            Invoked when the data of one or multiple <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances was unloaded. 
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="unloadedDomainObjects">A collection of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> references whose data was unloaded from
            <paramref name="clientTransaction"/>.</param>
            <remarks>
            <note type="inotes">The implementation of this method must not throw an exception.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectDeleting(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Invoked before a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is deleted. 
            The operation may be cancelled at this point.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to be deleted.</param>
            <remarks>
              <para>
                If the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> has related <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s then <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationChanging(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DomainObject)"/> is invoked for 
                every one of them right after this method.
              </para>
              <para>
                If the opposite objects were not loaded yet, <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectsLoaded(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"/> is invoked before this method.
              </para>
              <para>
                The events <see cref="E:Remotion.Data.DomainObjects.DomainObject.Deleting"/> and <see cref="E:Remotion.Data.DomainObjects.DomainObject.RelationChanging"/> are fired after this method was invoked.
              </para>
            <note type="inotes">The implementation of this method should throw an exception if the operation must be cancelled.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectDeleted(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Invoked after a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> was deleted. 
            It indicates the success of the operation. 
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="domainObject">
              The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> that was deleted. This object might already be invalid in the <paramref name="clientTransaction"/>.<br/>
              For more information why and when an object becomes invalid see <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/>.
            </param>
            <remarks>
              <para>
                If the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> has related <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s then <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationChanging(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DomainObject)"/> is invoked for 
                every one of them right before this method.
              </para>
              <para>
                The events <see cref="E:Remotion.Data.DomainObjects.DomainObject.RelationChanged"/> and <see cref="E:Remotion.Data.DomainObjects.DomainObject.Deleted"/> are fired after this method is invoked.
              </para>
            <note type="inotes">The implementation of this method must not throw an exception. To cancel the operation use <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectDeleting(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject)"/> instead.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.PropertyValueReading(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.PropertyValue,Remotion.Data.DomainObjects.DataManagement.ValueAccess)">
            <summary>
            Invoked before a value of <paramref name="dataContainer"/> is read. 
            The operation may be cancelled at this point.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="dataContainer">
              The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> holding the value that is being read.
              Use the <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject"/> property to get the corresponding <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
            </param>
            <param name="propertyValue">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> object holding the value that is being read.</param>
            <param name="valueAccess">A value indicating whether the current or the original value is being accessed.</param>
            <remarks>
              Use this method to cancel the operation, whereas <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.PropertyValueRead(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.PropertyValue,System.Object,Remotion.Data.DomainObjects.DataManagement.ValueAccess)"/> should be used to perform actions on its successful execution.
            <note type="inotes">The implementation of this method should throw an exception if the operation must be cancelled.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.PropertyValueRead(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.PropertyValue,System.Object,Remotion.Data.DomainObjects.DataManagement.ValueAccess)">
            <summary>
            Invoked when a value of <paramref name="dataContainer"/> was read. 
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="dataContainer">
              The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> holding the value that was read.
              Use the <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject"/> property to get the corresponding <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
            </param>
            <param name="propertyValue">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> object holding the value that was read.</param>
            <param name="value">The value that was read.</param>
            <param name="valueAccess">A value indicating whether the current or the original value was accessed.</param>
            <remarks>
              Use this method to perform actions on a successful execution, whereas <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.PropertyValueReading(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.PropertyValue,Remotion.Data.DomainObjects.DataManagement.ValueAccess)"/> should be used to cancel the operation.
            <note type="inotes">The implementation of this method must not throw an exception. To cancel the operation use <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.PropertyValueReading(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.PropertyValue,Remotion.Data.DomainObjects.DataManagement.ValueAccess)"/> instead.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.PropertyValueChanging(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.PropertyValue,System.Object,System.Object)">
            <summary>
            Invoked before a value of <paramref name="dataContainer"/> is changed.
            The operation may be cancelled at this point.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="dataContainer">
              The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> holding the <paramref name="propertyValue"/> that is being changed.
              Use the <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject"/> property to get the corresponding <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
            </param>
            <param name="propertyValue">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> object holding the value that is being changed.</param>
            <param name="oldValue">The value of the property it currently has.</param>
            <param name="newValue">The new value to be assigned to the property.</param>
            <remarks>
              <para>
                Use this method to cancel the operation, whereas <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.PropertyValueChanged(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.PropertyValue,System.Object,System.Object)"/> should be used to perform actions on its successful execution.
              </para>
              <para>
                The <see cref="E:Remotion.Data.DomainObjects.DomainObject.PropertyChanging"/> event is fired after this method was invoked.
              </para>
            <note type="inotes">The implementation of this method should throw an exception if the operation must be cancelled.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.PropertyValueChanged(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.PropertyValue,System.Object,System.Object)">
            <summary>
            Invoked after a value of <paramref name="dataContainer"/> was changed.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="dataContainer">
              The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> holding the <paramref name="propertyValue"/> that was changed.
              Use the <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject"/> property to get the corresponding <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
            </param>
            <param name="propertyValue">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> object holding the value that was changed.</param>
            <param name="oldValue">The old value of the property it had before.</param>
            <param name="newValue">The value that was assigned to the property.</param>
            <remarks>
              <para>
                Use this method to perform actions on a successful execution, whereas <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.PropertyValueReading(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.PropertyValue,Remotion.Data.DomainObjects.DataManagement.ValueAccess)"/> should be used to cancel the operation.
              </para>
              <para>
                The <see cref="E:Remotion.Data.DomainObjects.DomainObject.PropertyChanged"/> event is fired before this method is invoked.
              </para>
            <note type="inotes">The implementation of this method must not throw an exception. To cancel the operation use <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.PropertyValueChanging(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.PropertyValue,System.Object,System.Object)"/> instead.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationReading(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DataManagement.ValueAccess)">
            <summary>
            Invoked before a relation property is being read. 
            The operation may be cancelled at this point.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> whose relation property is being read.</param>
            <param name="relationEndPointDefinition">The relation endpoint definition of the relation property being read.</param>
            <param name="valueAccess">A value indicating whether the current or the original value is being accessed.</param>
            <remarks>
              Use this method to cancel the operation, whereas <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationRead(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DataManagement.ValueAccess)"/> should be used to perform actions on its successful execution.
            <note type="inotes">The implementation of this method should throw an exception if the operation must be cancelled.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationRead(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DataManagement.ValueAccess)">
            <summary>
            Invoked when a relation property with cardinality <see cref="F:Remotion.Data.DomainObjects.Mapping.CardinalityType.One"/> was read. 
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> whose relation property was read.</param>
            <param name="relationEndPointDefinition">The relation endpoint defintion of the relation property.</param>
            <param name="relatedObject">The related <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> of the relation property.</param>
            <param name="valueAccess">A value indicating whether the current or the original value was accessed.</param>
            <remarks>
              <para>
                Use this method to perform actions on a successful execution, whereas <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationReading(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DataManagement.ValueAccess)"/> should be used to cancel the operation.
              </para>
              <para>
                If the opposite object was not loaded yet, <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectsLoaded(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"/> is invoked before this method.
              </para>
            <note type="inotes">The implementation of this method must not throw an exception. To cancel the operation use <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationReading(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DataManagement.ValueAccess)"/> instead.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationRead(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.ReadOnlyDomainObjectCollectionAdapter{Remotion.Data.DomainObjects.DomainObject},Remotion.Data.DomainObjects.DataManagement.ValueAccess)">
            <summary>
            Invoked when a relation property with cardinality <see cref="F:Remotion.Data.DomainObjects.Mapping.CardinalityType.Many"/> was read. 
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> whose relation property was read.</param>
            <param name="relationEndPointDefinition">The relation endpoint defintion of the relation property.</param>
            <param name="relatedObjects">
              An implementation of <see cref="T:Remotion.Data.DomainObjects.ReadOnlyDomainObjectCollectionAdapter`1"/> wrapping the related object data that is returned to the reader.
              Implementors should check the <see cref="P:Remotion.Data.DomainObjects.ReadOnlyDomainObjectCollectionAdapter`1.IsDataComplete"/> property before accessing the collection 
              data in order to avoid reloading an unloaded collection end-point.
            </param>
            <param name="valueAccess">A value indicating whether the current or the original value was accessed.</param>
            <remarks>
              <para>
                Use this method to perform actions on a successful execution, whereas <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationReading(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DataManagement.ValueAccess)"/> should be used to cancel the operation.
              </para>
              <para>
                If the opposite objects were not loaded yet, <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectsLoaded(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"/> is invoked before this method.
              </para>
            <note type="inotes">The implementation of this method must not throw an exception. To cancel the operation use <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationReading(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DataManagement.ValueAccess)"/> instead.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationChanging(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Invoked before a relation is changed.
            The operation may be cancelled at this point.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> whose relation property is being changed.</param>
            <param name="relationEndPointDefinition">The relation endpoint defintion of the relation property.</param>
            <param name="oldRelatedObject">The related object that is removed from the relation, or <see langword="null"/> if a new item is added without 
            replacing an old one.</param>
            <param name="newRelatedObject">The related object that is added to the relation, or <see langword="null"/> if an old item is removed without 
            being replaced by a new one.</param>
            <remarks>
              <para>Use this method to cancel the operation, whereas <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationChanged(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DomainObject)"/> should be used to perform actions on its successful execution.</para>
              <para>
                This method might be invoked more than once for a given relation change operation. For example, when a whole related object collection is 
                replaced in one go, the method is invoked once for each old object that is not in the new collection and once for each new object not in the 
                old collection.
              </para>
              <para>The following table lists the values of <paramref name="oldRelatedObject"/> and <paramref name="newRelatedObject"/> for operations on 1:n relations:
                <list type="table">
                  <listheader>
                    <term>Operation</term>
                    <description>Values</description>
                  </listheader>
                  <item>
                    <term>Add, Insert</term>
                    <description><paramref name="oldRelatedObject"/> is <see langword="null"/>, <paramref name="newRelatedObject"/> is not <see langword="null"/>.</description>
                  </item>
                  <item>
                    <term>Replace</term>
                    <description>Neither <paramref name="oldRelatedObject"/> nor <paramref name="newRelatedObject"/> are <see langword="null"/>.</description>
                  </item>
                  <item>
                    <term>Remove</term>
                    <description><paramref name="oldRelatedObject"/> is not <see langword="null"/>, <paramref name="newRelatedObject"/> is <see langword="null"/>.</description>
                  </item>
                  <item>
                    <term>Replacement of whole collection</term>
                    <description>For each new object, <paramref name="oldRelatedObject"/> is <see langword="null"/> and <paramref name="newRelatedObject"/> 
                    is not <see langword="null"/>. For each object no longer part of the relation, <paramref name="oldRelatedObject"/> is not 
                    <see langword="null"/> and <paramref name="newRelatedObject"/>  is <see langword="null"/></description>
                  </item>
                </list>
              </para>
              <para>
                The <see cref="E:Remotion.Data.DomainObjects.DomainObject.RelationChanging"/> events are fired after this method was invoked.
              </para>
              <para>
                If the opposite object(s) was/were not loaded yet, <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectsLoaded(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"/> is invoked before this method.
              </para>
            <note type="inotes">The implementation of this method should throw an exception if the operation must be cancelled.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationChanged(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Invoked after a relation was changed.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> whose relation property was changed.</param>
            <param name="relationEndPointDefinition">The relation endpoint defintion of the relation property.</param>
            <param name="oldRelatedObject">The related object that is removed from the relation, or <see langword="null"/> if a new item is added without 
            replacing an old one.</param>
            <param name="newRelatedObject">The related object that is added to the relation, or <see langword="null"/> if an old item is removed without 
            being replaced by a new one.</param>
            <remarks>
              <para>
                Use this method to perform actions on a successful execution, whereas <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationChanging(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DomainObject)"/> should be used to cancel the operation.
              </para>
              <para>
                This method might be invoked more than once for a given relation change operation. For example, when a whole related object collection is 
                replaced in one go, the method is invoked once for each old object that is not in the new collection and once for each new object not in the 
                old collection.
              </para>
              <para>
                The <see cref="E:Remotion.Data.DomainObjects.DomainObject.RelationChanged"/> events are fired after this method is invoked.
              </para>
            <note type="inotes">The implementation of this method must not throw an exception. To cancel the operation use <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationChanging(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DomainObject)"/> instead.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.FilterQueryResult``1(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.Queries.QueryResult{``0})">
            <summary>
            Invoked after a collection query was executed by <see cref="M:Remotion.Data.DomainObjects.Queries.QueryManager.GetCollection(Remotion.Data.DomainObjects.Queries.IQuery)"/>.
            The <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/> may change the result at this point.
            </summary>
            <typeparam name="T">The type of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s in the result collection.</typeparam>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="queryResult">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryResult`1"/> representing the objects returned by the query. This object should be returned
            if the query result should not be changed. Access <see cref="P:Remotion.Data.DomainObjects.Queries.QueryResult`1.Query"/> to inspect the query being executed.</param>
            <returns>
            The value of the parameter <paramref name="queryResult"/> if the result should not be changed, or a different instance of 
            <see cref="T:Remotion.Data.DomainObjects.Queries.QueryResult`1"/> if the result should be changed.
            </returns>
            <remarks>
              <para>
                If some objects that were returned by the query were not loaded yet, <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectsLoaded(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"/> is invoked before this method.
              </para>
            <note type="inotes">The implementation of this method must not throw an exception.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.Committing(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})">
            <summary>
            Invoked before a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> is committed.
            The operation may be cancelled at this point.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="changedDomainObjects">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> holding all changed <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s that are being committed.</param>
            <remarks>
              <para>Use this method to cancel the operation, whereas <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.Committed(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"/> should be used to perform actions on its successful execution.</para>
              <para>
                The <see cref="E:Remotion.Data.DomainObjects.DomainObject.Committing"/> events are fired before this method is invoked, 
                whereas <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.Committing"/> is fired after it.
              </para>
            <note type="inotes">The implementation of this method should throw an exception if the operation must be cancelled.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.CommitValidate(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.PersistableData})">
            <summary>
            Invoked just before a set of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances is to be committed.
            Implementations can check whether the set of objects is valid and, if not, throw an <see cref="T:Remotion.Data.DomainObjects.Validation.DomainObjectValidationException"/>.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="committedData">The data just about to be committed.</param>
            <remarks>
            <note type="inotes">The implementation of this method should throw a <see cref="T:Remotion.Data.DomainObjects.Validation.DomainObjectValidationException"/> if the operation must be 
            cancelled.</note>
            <note type="inotes">The implementation of this method must not modify, create, or delete any <see cref="N:Remotion.Data.DomainObjects"/> in the 
            <paramref name="clientTransaction"/>. To modify objects during commit, use the <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.Committing(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"/> method.</note>
            </remarks>
            <exception cref="T:Remotion.Data.DomainObjects.Validation.DomainObjectValidationException">The set of <paramref name="committedData"/> was not valid. 
            (Subclasses of this exception may be thrown.)</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.Committed(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})">
            <summary>
            Invoked after a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> was executed.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="changedDomainObjects">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> holding all <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s that were committed, apart
            from <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances that were deleted.</param>
            <remarks>
              <para>
                Use this method to perform actions on a successful execution, whereas <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.Committing(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"/> should be used to cancel the operation.
              </para>
              <para>
                The events <see cref="E:Remotion.Data.DomainObjects.DomainObject.Committed"/> and <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.Committed"/> are fired before this method is invoked. 
              </para>
            <note type="inotes">The implementation of this method must not throw an exception. To cancel the operation use <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.Committing(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"/> instead.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RollingBack(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})">
            <summary>
            Invoked before a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> is rolled back.
            The operation may be cancelled at this point.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="changedDomainObjects">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> holding all changed <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s that are being rolled back.</param>
            <remarks>
              <para>Use this method to cancel the operation, whereas <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RolledBack(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"/> should be used to perform actions on its successful execution.</para>
            <note type="inotes">The implementation of this method should throw an exception if the operation must be cancelled.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RolledBack(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})">
            <summary>
            Invoked after a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> was rolled back.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance for which the event is raised.</param>
            <param name="changedDomainObjects">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> holding all changed <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s that are being rolled back.</param>
            <remarks>
              Use this method to perform actions on a successful execution, whereas <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RollingBack(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"/> should be used to cancel the operation.
            <note type="inotes">The implementation of this method must not throw an exception. To cancel the operation use <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RollingBack(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"/> instead.</note>
            </remarks>
        </member>
        <member name="P:Remotion.Data.DomainObjects.IClientTransactionExtension.Key">
            <summary>
            Gets the key that is to be used when registering this <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/> in a 
            <see cref="T:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection"/>.
            </summary>
            <value>The key to be used when registering this <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/>.</value>
            <remarks>
            <note type="inotes">The value returned by this property must be stable (i.e., the same instance must always return the same key) and unique
            within a single <see cref="T:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection"/>. Since usually only one instance of a given extension is registered with a
            single <see cref="T:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection"/>, the full name of the type implementing this interface is often a good, unique key 
            to use.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransactionExtensionBase.TryInstall(Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Installs this extension with the specified <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>, returning a value indicating whether the operation succeeded.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> to register with.</param>
            <returns><see langword="true"/> if the extension was added to the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>; <see langword="false"/> if the extension
            couldn't be added because another <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/> with the same key already exists in the transaction.</returns>
            <remarks>
            When a <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/> needs to be propagated from parent transactions to their subtransactions, override 
            <see cref="M:Remotion.Data.DomainObjects.ClientTransactionExtensionBase.SubTransactionCreated(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.ClientTransaction)"/> and use <see cref="M:Remotion.Data.DomainObjects.ClientTransactionExtensionBase.TryInstall(Remotion.Data.DomainObjects.ClientTransaction)"/> to install the extension with the newly created subtransaction.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ClientTransactionExtensions">
            <summary>
            Defines useful extension methods working on <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instances.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransactionExtensions.Execute``1(Remotion.Data.DomainObjects.ClientTransaction,System.Func{``0})">
            <summary>
            Executes the specified delegate in the context of the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>, returning the result of the delegate. While the
            delegate is being executed, the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> is made the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/> transaction.
            </summary>
            <typeparam name="T">The type of the value returned by the delegate.</typeparam>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> in whose context to execute the delegate.</param>
            <param name="func">The delegate to be executed.</param>
            <returns>The result of <paramref name="func"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransactionExtensions.Execute(Remotion.Data.DomainObjects.ClientTransaction,System.Action)">
            <summary>
            Executes the specified delegate in the context of the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. While the
            delegate is being executed, the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> is made the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/> transaction.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> in whose context to execute the delegate.</param>
            <param name="action">The delegate to be executed.</param>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ClientTransactionFactory">
            <summary>The <see cref="T:Remotion.Data.DomainObjects.ClientTransactionFactory"/> is the default implementation of the <see cref="T:Remotion.Data.ITransactionFactory"/> interface.</summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransactionFactory.CreateRootTransaction">
            <summary>
            Creates a new root transaction instance. This instance is not yet managed by a scope.
            </summary>
            <returns>A new root transaction.</returns>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Cloning.CompleteCloneStrategy">
            <summary>
            Assists <see cref="T:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner"/> by cloning all objects referenced by a cloned source object as well. This ensures deep cloning
            of a whole object graph.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Cloning.ICloneStrategy">
            <summary>
            Provides an interface for classes determining the details about how <see cref="T:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner"/> clones a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
            </summary>
            <remarks>
            <para>
            Implement this interface do determine how <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> graphs are cloned. When <see cref="T:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner"/> clones a single
            <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>, it needs to determine what to do with the objects referenced by that <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>. This decision
            is delegated to an instance of <see cref="T:Remotion.Data.DomainObjects.Cloning.ICloneStrategy"/>, whose <see cref="M:Remotion.Data.DomainObjects.Cloning.ICloneStrategy.HandleReference(Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor,Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor,Remotion.Data.DomainObjects.Cloning.CloneContext)"/> is called. From within <see cref="M:Remotion.Data.DomainObjects.Cloning.ICloneStrategy.HandleReference(Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor,Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor,Remotion.Data.DomainObjects.Cloning.CloneContext)"/>,
            the strategy can call <see cref="M:Remotion.Data.DomainObjects.Cloning.CloneContext.GetCloneFor``1(``0)"/> to obtain clones for the referenced objects.
            </para>
            </remarks>
            <example>
            The following is an example of how to implement a cloning strategy that sees 1:n relations as aggregations; therefore, when one of the 
            "n" objects is cloned, the strategy inserts the clone into the original "1" object's collection rather than cloning the "1" object as well.
            <code>
            public class SmartCloneStrategy : ICloneStrategy
            {
              public void HandleReference (
                  PropertyAccessor sourceReference,
                  ClientTransaction sourceTransaction,
                  PropertyAccessor cloneReference,
                  ClientTransaction cloneTransaction,
                  CloneContext context)
              {
                if (sourceReference.Kind == PropertyKind.RelatedObject)
                {
                  if (sourceReference.RelationEndPointDefinition.RelationDefinition.RelationKind == RelationKindType.OneToMany)
                  {
                  ///    do not clone referenced object, but insert object into original collection
                    DomainObject originalRelated = (DomainObject) sourceReference.GetValueWithoutTypeCheckTx (sourceTransaction);
                    cloneReference.SetValueWithoutTypeCheckTx (cloneTransaction, originalRelated);
                  }
                  else
                  {
                    DomainObject originalRelated = (DomainObject) sourceReference.GetValueWithoutTypeCheckTx (sourceTransaction);
                    DomainObject cloneRelated = originalRelated != null ? context.GetCloneFor (originalRelated) : null;
                    cloneReference.SetValueWithoutTypeCheckTx (cloneTransaction, cloneRelated);
                  }
                }
                else
                {
                  Assertion.IsTrue (sourceReference.Kind == PropertyKind.RelatedObjectCollection);
                  DomainObjectCollection originalRelatedCollection = (DomainObjectCollection) sourceReference.GetValueWithoutTypeCheckTx (sourceTransaction);
                  DomainObjectCollection cloneRelatedCollection = (DomainObjectCollection) cloneReference.GetValueWithoutTypeCheckTx (cloneTransaction);
                  foreach (DomainObject originalRelated in originalRelatedCollection)
                  {
                    DomainObject cloneRelated = context.GetCloneFor (originalRelated);
                    cloneRelatedCollection.Add (cloneRelated);
                  }
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Cloning.ICloneStrategy.HandleReference(Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor,Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor,Remotion.Data.DomainObjects.Cloning.CloneContext)">
            <summary>
            Called when <see cref="T:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner"/> encounters a reference that might need to be cloned.
            </summary>
            <param name="sourceReference">The reference on the source object.</param>
            <param name="cloneReference">The reference on the cloned object.</param>
            <param name="context">A <see cref="T:Remotion.Data.DomainObjects.Cloning.CloneContext"/> that should be used to obtain clones of objects held by <paramref name="sourceReference"/>.</param>
            <remarks>
            <para>
            Implementers can check the <paramref name="sourceReference"/> and set the <paramref name="cloneReference"/> to clones,
            original, or empty as needed. In order to get the right clone for a referenced object, the <paramref name="context"/> can be used.
            </para>
            <para>
            Note that <see cref="M:Remotion.Data.DomainObjects.Cloning.ICloneStrategy.HandleReference(Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor,Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor,Remotion.Data.DomainObjects.Cloning.CloneContext)"/> is only called for references yet untouched. Therefore, for bidirectional references, it will 
            only be called for one side of the relation even if both  sides are cloned.
            </para>
            <para>
            When the  <paramref name="context"/> is used to obtain the clones, no object will be cloned twice.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Cloning.CompleteCloneStrategy.HandleReference(Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor,Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor,Remotion.Data.DomainObjects.Cloning.CloneContext)">
            <summary>
            Sets the <paramref name="cloneReference"/> to hold clones of the objects referenced by <paramref name="sourceReference"/>.
            </summary>
            <param name="sourceReference">The reference on the source object.</param>
            <param name="cloneReference">The reference on the cloned object.</param>
            <param name="context">The <see cref="T:Remotion.Data.DomainObjects.Cloning.CloneContext"/> that is used to obtain clones of objects held by <paramref name="sourceReference"/>.</param>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner">
            <summary>
            Assists in cloning <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner.CreateValueClone``1(``0)">
            <summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instance of the same type and with the same property values as the given <paramref name="source"/>.
            Relations are not cloned, foreign key properties default to null.
            </summary>
            <returns>A clone of the given <paramref name="source"/> object.</returns>
            <typeparam name="T">The static <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> type to be cloned. The actual (dynamic) type of the cloned object
            is the type defined by <paramref name="source"/>'s <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/>.</typeparam>
            <param name="source">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to be cloned.</param>
            <remarks>
            The clone is created in the <see cref="P:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner.CloneTransaction"/>. No constructor is called on the clone object; property or relation get and set events are 
            raised as needed by the cloner.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner.CreateCloneHull``1(``0)">
            <summary>
            Creates a clone hull, which is a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> of the same type as a given source object, but with no properties or
            relations being set.
            </summary>
            <returns>A clone of the given <paramref name="source"/> object.</returns>
            <typeparam name="T">The static <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> type to be cloned. The actual (dynamic) type of the cloned object
            is the type defined by <paramref name="source"/>'s <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/>.</typeparam>
            <param name="source">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to be cloned.</param>
            <remarks>
            The clone is created in the <see cref="P:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner.CloneTransaction"/>. No constructor is called on the clone object.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner.CreateClone``1(``0,Remotion.Data.DomainObjects.Cloning.ICloneStrategy)">
            <summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instance of the same type and with the same property values as the given <paramref name="source"/>.
            Referenced objects are cloned according to the given strategy.
            </summary>
            <returns>A clone of the given <paramref name="source"/> object.</returns>
            <typeparam name="T">The static <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> type to be cloned. The actual (dynamic) type of the cloned object
            is the type defined by <paramref name="source"/>'s <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/>.</typeparam>
            <param name="source">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to be cloned.</param>
            <param name="strategy">The <see cref="T:Remotion.Data.DomainObjects.Cloning.ICloneStrategy"/> to be used when cloning the object's references.</param>
            <remarks>
            The clone is created in the c<see cref="P:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner.CloneTransaction"/>. No constructor is called on the clone object; property or relation get and set events are 
            raised as needed by the cloner.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner.CreateClone``1(``0,Remotion.Data.DomainObjects.Cloning.ICloneStrategy,Remotion.Data.DomainObjects.Cloning.CloneContext)">
            <summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instance of the same type and with the same property values as the given <paramref name="source"/>.
            Referenced objects are cloned according to the given strategy, the given context is used instead of creating a new one.
            </summary>
            <returns>A clone of the given <paramref name="source"/> object.</returns>
            <typeparam name="T">The static <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> type to be cloned. The actual (dynamic) type of the cloned object
            is the type defined by <paramref name="source"/>'s <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/>.</typeparam>
            <param name="source">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to be cloned.</param>
            <param name="strategy">The <see cref="T:Remotion.Data.DomainObjects.Cloning.ICloneStrategy"/> to be used when cloning the object's references.</param>
            <param name="context">The <see cref="T:Remotion.Data.DomainObjects.Cloning.CloneContext"/> to be used by the cloner.</param>
            <remarks>
            The clone is created in the <see cref="P:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner.CloneTransaction"/>. No constructor is called on the clone object; property or relation get and set events are 
            raised as needed by the cloner.
            </remarks>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner.CloneTransaction">
            <summary>
            Gets or sets the transaction to be used for the clone. If this is set to <see langword="null"/>, the current transaction is used.
            </summary>
            <value>The clone transaction.</value>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.IMappingValidatorFactory">
            <summary>
            Provides an interface for classes creating validators for the elements contained in a mapping.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.AllMappingPropertiesFinder">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.AllMappingPropertiesFinder"/> is used to find all <see cref="T:Remotion.Reflection.IPropertyInformation"/> objects that have a mapping attribute applied.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.PropertyFinderBase">
            <summary>The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.PropertyFinderBase"/> is used to find all <see cref="T:System.Reflection.PropertyInfo"/> objects relevant for the mapping.</summary>
            <remarks>Derived classes must have a cosntructor with a matching the <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.PropertyFinderBase"/>'s constructor signature. </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.ClassIDProvider">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.ClassIDProvider"/> provides the class-id for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IClassIDProvider">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IClassIDProvider"/> defines the API for all implementaions that get the class-id for a specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.DomainModelConstraintProvider">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.DomainModelConstraintProvider"/> is the default implementation of <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IDomainModelConstraintProvider"/>.
            It uses the mapping attributes to resolve the constraints.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IDomainModelConstraintProvider">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IDomainModelConstraintProvider"/> defines the API for all implementaions that provide additonal constraints 
            that cannot be expressed by the property's <see cref="P:Remotion.Reflection.IPropertyInformation.PropertyType"/> alone.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IgnoreForMappingConfigurationAttribute">
            <summary>
            Apply this attribute to a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> class to have the <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.MappingReflector"/> ignore the class when building the
            mapping configuration.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.NameBasedPropertyFinder">
            <summary>
            Finds a property based on its name. This is used by <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationReflectorBase`1"/> to find the opposite property for a relation end-point.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.ObservableCollectionDataDecorator">
            <summary>
            Decorates <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> by raising events whenever the inner collection is modified.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.ObservableCollectionDataDecoratorBase">
            <summary>
            Implements <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> as an abstract class by delegating to another instance of 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/>, calling the abstract <see cref="M:Remotion.Data.DomainObjects.DataManagement.CollectionData.ObservableCollectionDataDecoratorBase.OnDataChanging(Remotion.Data.DomainObjects.DataManagement.CollectionData.ObservableCollectionDataDecoratorBase.OperationKind,Remotion.Data.DomainObjects.DomainObject,System.Int32)"/> and <see cref="M:Remotion.Data.DomainObjects.DataManagement.CollectionData.ObservableCollectionDataDecoratorBase.OnDataChanged(Remotion.Data.DomainObjects.DataManagement.CollectionData.ObservableCollectionDataDecoratorBase.OperationKind,Remotion.Data.DomainObjects.DomainObject,System.Int32)"/>
            methods each for each change to the collection.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.DomainObjectCollectionDataDecoratorBase">
            <summary>
            Provides a common base class for classes decorating a <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> instance. If not overridden, all
            the methods directly delegate to an inner <see cref="P:Remotion.Data.DomainObjects.DataManagement.CollectionData.DomainObjectCollectionDataDecoratorBase.WrappedData"/> object.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData">
            <summary>
            Provides an interface for an encapsulation of the data stored inside a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>. A number of decorators
            implements this interface in order to wrap the data store with additional functionality.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.CopyOnWriteDomainObjectCollectionData">
            <summary>
            Represents a copy of another collection. The data is only copied if either this or the other collection changes.
            </summary>
            <remarks>
            <para>
            This class by default delegates to the copied collection, until it is either instructed to make a copy (<see cref="M:Remotion.Data.DomainObjects.DataManagement.CollectionData.CopyOnWriteDomainObjectCollectionData.CopyOnWrite"/>), its contents
            changes, or the copied collection's contents changes. In order to be able to detect changes to the copied collection, that collection must
            be an <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.ObservableCollectionDataDecorator"/>. Only changes made through the <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.ObservableCollectionDataDecorator"/> will lead
            to a copy operation; changes made to the underlying data store of the copied collection (eg. by keeping the data store passed into the copied 
            collection when created) may lead 
            to copy operations being missed and must therfore be performed very carefully.
            </para>
            <para>
            Retrieval of this collection's underlying data store will always lead to a copy operation in order to avoid invalid behavior.
            </para>
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.VirtualEndPointStateUpdatedRaisingCommandDecorator">
            <summary>
            Decorates a <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand"/>, calling the <see cref="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPointStateUpdateListener.VirtualEndPointStateUpdated(Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID,System.Nullable{System.Boolean})"/> notification method 
            immediately after the decorated <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand"/>'s <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.Perform"/> method is called. This is
            used by <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.StateUpdateRaisingCollectionEndPointDecorator"/> to ensure <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPointStateUpdateListener"/> implementations
            are informed when a command changes the state of a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ICollectionEndPoint"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand">
            <summary>
            Provides a common interface for classes performing actions on the re-store data structures on the data management level.
            </summary>
            <remarks>
            <para>
            Each command has five steps:
            <list type="bullet">
              <item>
                <description>
                  <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.NotifyClientTransactionOfBegin"/> raises all begin event notifications on the associated <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
                </description>
              </item>
              <item>
                <description>
                  <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.Begin"/> raises all begin event notifications on the objects involved in the operation.
                </description>
              </item>  
              <item>
                <description>
                  <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.Perform"/> actually performs the operation (without raising any events).
                </description>
              </item>
              <item>
                <description>
                  <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.End"/> raises all end event notifications on the objects involved in the operation.
                </description>
              </item>
              <item>
                <description>
                  <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.NotifyClientTransactionOfEnd"/> raises all end event notifications on the associated <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
                </description>
              </item>
            </list>
            Not all commands have to implement all the steps, unrequired steps can be left empty.
            </para>
            <para>
            Some commands can be broadened to include other objects also affected by the operation via <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.ExpandToAllRelatedObjects"/>. For example,
            a relation end point modification command can be extended to include changes to all affected opposite objects via 
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.ExpandToAllRelatedObjects"/>.
            </para>
            <para>
            Some commands throw an exception when they are executed. Check whether the command can be executed via <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.GetAllExceptions"/>,
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.DataManagementCommandExtensions.CanExecute(Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand)"/>, and <see cref="M:Remotion.Data.DomainObjects.DataManagement.DataManagementCommandExtensions.EnsureCanExecute(Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand)"/>.
            </para>
            <para>
            Execute commands immediately after retrieving them. Do not change the state of the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> while holding on to a command,
            as this will cause the command to become inconsistent with the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. Executing a command that has become inconsistent
            can lead to undefined behavior and may destroy transaction consistency.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.GetAllExceptions">
            <summary>
            Gets a sequence of exceptions indicating why this command cannot be executed. If the command can be executed, the sequence is empty.
            </summary>
            <returns>A sequence of exceptions indicating why this command cannot be executed. If the command can be executed, the sequence is empty.</returns>
            <remarks>
            Implementations should implement this method as efficiently as possible, especially in the case of an empty exception sequence.
            If a lengthier calculation is needed, the calculation should be performed in the command's constructor. (Commands are supposed to be executed 
            immediately after construction, so the sequence returned by <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.GetAllExceptions"/> is not supposed to change anyway.)
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.NotifyClientTransactionOfBegin">
            <summary>
            Notifies the client transaction that the operation is about to begin. The operation can be canceled at this point of time if an event 
            handler throws an exception.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.Begin">
            <summary>
            Raises all begin event notifications on the objects involved in the operation. The operation can be canceled at this point of time if an event 
            handler throws an exception.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.Perform">
            <summary>
            Actually performs the operation without raising any events.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.End">
            <summary>
            Raises all end event notifications on the objects involved in the operation. Event handlers should not throw any exceptions at this point of 
            time, the operation has already been performed.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.NotifyClientTransactionOfEnd">
            <summary>
            Raises all end event notifications on the associated <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. Event handlers should not throw any exceptions at this 
            point of time, the operation has already been performed.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.ExpandToAllRelatedObjects">
            <summary>
            Returns an <see cref="T:Remotion.Data.DomainObjects.DataManagement.Commands.ExpandedCommand"/> that involves changes to all objects affected by this 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand"/>. If no other objects are involved by the change, that <see cref="T:Remotion.Data.DomainObjects.DataManagement.Commands.ExpandedCommand"/> method contains just 
            this <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.TransactionHierarchyCommandExecutor">
            <summary>
            Provides functionality for executing <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand"/> instances on a whole <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> hierarchy.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.RealObjectEndPointRegistrationCommandDecorator">
            <summary>
            Decorates an <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand"/> and adds functionality for registering/unregistering with the opposite of a 
            <see cref="P:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.RealObjectEndPointRegistrationCommandDecorator.RealObjectEndPoint"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.UnloadCommand">
            <summary>
            Unloads a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instance.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.ExceptionCommand">
            <summary>
            Implements <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand"/> by returning an exception in <see cref="M:Remotion.Data.DomainObjects.DataManagement.Commands.ExceptionCommand.GetAllExceptions"/>, and throwing that exception when 
            it is to be executed.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.UnloadVirtualEndPointsCommand">
            <summary>
            Marks a virtual end-point incomplete and unregisters it if it can be collected.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.UnregisterDataContainerCommand">
            <summary>
            Unregisters a <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> from a <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainerMap"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.UnregisterEndPointsCommand">
            <summary>
            Unregisters a set of end-points from a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointManager"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.DataContainerEventListener">
            <summary>
            Listens to the events raised by a <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>, forwarding them to the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionEventSink"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.IDataContainerEventListener">
            <summary>
            Defines an interface to be implemented by classes listening to the events raised by a <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.DataManagementService">
            <summary>
            Provides functionality for accessing the data management facilities of a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.DataManagementService.GetDataManager(Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Returns the <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManager"/> of the given <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. Use wisely.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> to be returned.</param>
            <returns>
            The <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManager"/> is the entry point to the <paramref name="clientTransaction"/>'s data management facilities (e.g., 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> instances, <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPoint"/> objects, etc.). When operating at the data management level, it is 
            possible to render the internal data structures of the <paramref name="clientTransaction"/> inconsistent. Therefore, use with care and make
            sure you know what you are doing.
            </returns>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.DelegatingDataManager">
            <summary>
            Implements <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManager"/> by passing on all calls to an <see cref="P:Remotion.Data.DomainObjects.DataManagement.DelegatingDataManager.InnerDataManager"/>. This class is used to resolve a
            dependency cycle between <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataManager"/> and <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ObjectLoader"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.IDataManager">
            <summary>
            Provides an interface for classes managing the data inside a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPointProvider">
            <summary>
            Provides access to <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPoint"/> instances for a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.ILazyLoader">
            <summary>
            Provides an interface for classes implementing lazy loading of data. These methods must only be called for data that has not been loaded yet.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointFactoryExtensions">
            <summary>
            Implements extension methods for the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPointFactory"/> interface.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.StateUpdateRaisingRelationEndPointFactoryDecorator">
            <summary>
            Decorates <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPointFactory"/> instances by wrapping the created <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPoint"/> instances into decorators
            that cause <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPointStateUpdateListener"/> events to be raised.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPointFactory">
            <summary>
            Provides an API for classes creating <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPoint"/> instances.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.AssociatedCollectionDataStrategyFactory">
            <summary>
            Implements <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.IAssociatedCollectionDataStrategyFactory"/> by creating instances of <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.EndPointDelegatingCollectionData"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.IAssociatedCollectionDataStrategyFactory">
            <summary>
            Defines an API for classes creating <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> instances for the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> objects 
            associated with a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.CollectionEndPointCollectionManager">
            <summary>
            Implements <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ICollectionEndPointCollectionManager"/>, storing the original and current <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> reference
            for a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ICollectionEndPointCollectionManager">
            <summary>
            Defines an interface for classes providing and keeping track of the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> instances used by 
            a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.CollectionEndPointCollectionProvider">
            <summary>
            Keeps track of <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> references to be used by <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/> instances.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ICollectionEndPointCollectionProvider">
            <summary>
            Provides an interface for classes keeping track of <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> references to be used by <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/> 
            instances. That way, a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> can be reused even when the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/> is removed.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ICollectionEndPointDataManagerFactory">
            <summary>
            	Defines the API for factories creating instances implementing <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ICollectionEndPointDataManager"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.StateUpdateRaisingCollectionEndPointDecorator">
            <summary>
            Decorates another <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ICollectionEndPoint"/>, raising <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPointStateUpdateListener"/> events whenever the 
            return value of the <see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.StateUpdateRaisingCollectionEndPointDecorator.HasChanged"/> property has possibly changed.
            </summary>
            <remarks>
            Because the <see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.StateUpdateRaisingCollectionEndPointDecorator.HasChanged"/> property of <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ICollectionEndPoint"/> implementations can be expensive to determine, the 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.StateUpdateRaisingCollectionEndPointDecorator"/> doesn't actually check the property.
            Therefore, events may also be raised even the the <see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.StateUpdateRaisingCollectionEndPointDecorator.HasChanged"/> property still returns the same value as before. If the end-point's
            new state is available via the <see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ICollectionEndPoint.HasChangedFast"/> property, the new state is passed to the 
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPointStateUpdateListener.VirtualEndPointStateUpdated(Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID,System.Nullable{System.Boolean})"/> method as a parameter.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ICollectionEndPoint">
            <summary>
            Represents an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPoint"/> holding a collection of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances, i.e. the "many" side of a relation.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPoint`1">
            <summary>
            Represents the relation property that does not hold the foreign key in a bidirectional relation. Adds the <see cref="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPoint`1.GetData"/> and
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPoint`1.GetOriginalData"/> members to <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPoint"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPoint">
            <summary>
            Represents the relation property that does not hold the foreign key in a bidirectional relation.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPoint">
            <summary>
            Provides a common interface for objects representing one side of a relation between <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPoint.SynchronizeOppositeEndPoint(Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRealObjectEndPoint)">
            <summary>
            Synchronizes the opposite end point with this end-point. Must only be called if the oppositeEndPoint is out-of-sync with this end-point.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.StateUpdateRaisingCollectionEndPointDecorator.ConstantChangeStateAsserter">
            <summary>
            Using an instance of this class around a code block asserts that the change state before and after after the block is the same.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.VirtualObjectEndPoints.IVirtualObjectEndPointDataManagerFactory">
            <summary>
            	Defines the API for factories creating instances implementing <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.VirtualObjectEndPoints.IVirtualObjectEndPointDataManager"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.VirtualObjectEndPoints.StateUpdateRaisingVirtualObjectEndPointDecorator">
            <summary>
            Decorates another <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualObjectEndPoint"/>, raising <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPointStateUpdateListener"/> events whenever the 
            return value of the <see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.VirtualObjectEndPoints.StateUpdateRaisingVirtualObjectEndPointDecorator.HasChanged"/> property has possibly changed.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualObjectEndPoint">
            <summary>
            Represents a virtual <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPoint"/> holding a single opposite <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>, i.e. the non-foreign key side in a 
            1:1 relation.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IObjectEndPoint">
            <summary>
            Represents an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPoint"/> holding the <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instance, i.e. the "one" side of a 
            relation.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.VirtualObjectEndPoints.StateUpdateRaisingVirtualObjectEndPointDecorator.ConstantChangeStateAsserter">
            <summary>
            Using an instance of this class around a code block asserts that the change state before and after after the block is the same.
            </summary>
            <remarks>
            The event might also be raised when the property hasn't actually changed. Check the boolean value passed to 
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPointStateUpdateListener.VirtualEndPointStateUpdated(Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID,System.Nullable{System.Boolean})"/> to find out the new value of the <see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.VirtualObjectEndPoints.StateUpdateRaisingVirtualObjectEndPointDecorator.HasChanged"/>
            property.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionComponentFactoryBase">
            <summary>
            Holds common code required to implement the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionComponentFactory"/> interface.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionComponentFactory">
            <summary>
            Defines an interface for factories building <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instances.
            </summary>
            <remarks>
            The methods defined by this interface are executed while a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> is constructed; they provide the components
            making up the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. When accessing the constructed <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> passed to the methods as an 
            argument, keep in mind that the transaction is not yet complete and may not be used. Once a method has returned a component, it is safe for
            subsequent methods to access that component of the constructed <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. It is safe for all methods to access the 
            <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.ID"/> property.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionListenerManager">
            <summary>
            Manages the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener"/> instances attached to a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance and
            allows clients to raise events for the <see cref="P:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionListenerManager.ClientTransaction"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListenerManager">
            <summary>
            Defines an interface for classes managing the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener"/> instances attached to a 
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance and allowing clients to raise events for the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionEventSink">
            <summary>
            Defines an interface allowing clients to raise events for the associated <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ITopClientTransactionListener">
            <summary>
            Defines an interface for classes representing the root of the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener"/> chain attached to a 
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener">
            <summary>
            Defines an interface for objects listening for events occuring in the scope of a ClientTransaction.
            </summary>
            <remarks>
            <para>
            This is similar to <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/>, but where <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/> is for the public,
            <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener"/> is for internal usage (and therefore provides more events).
            </para>
            <para>
            The <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/> property is not guaranteed to be set to the affected <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> when 
            a notification method is executed. Implementations that require access to the calling transaction must have the transaction passed to them via
            the constructors.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.NewObjectCreating(Remotion.Data.DomainObjects.ClientTransaction,System.Type,Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Indicates a new <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instance is being created. This event is called while the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> base 
            constructor is executing before the subclass constructors have run and before the object has got its <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> or 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>. If this method throws an exception, the object construction will be canceled and no side effects will remain.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.RelationRead(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DataManagement.ValueAccess)">
            <summary>
            Indicates that a scalar-value relation has been read.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> providing the scope to the operation.</param>
            <param name="domainObject">The domain object owning the relation that has been read.</param>
            <param name="relationEndPointDefinition">The relation endpoint definition of the relation that has been read.</param>
            <param name="relatedObject">The related object that is returned to the reader.</param>
            <param name="valueAccess">An indicator whether the current or original values have been read.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.RelationRead(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.ReadOnlyDomainObjectCollectionAdapter{Remotion.Data.DomainObjects.DomainObject},Remotion.Data.DomainObjects.DataManagement.ValueAccess)">
            <summary>
            Indicates that a collection-value relation has been read.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> providing the scope to the operation.</param>
            <param name="domainObject">The domain object owning the relation that has been read.</param>
            <param name="relationEndPointDefinition">The relation endpoint definition of the relation that has been read.</param>
            <param name="relatedObjects">
              A read-only wrapper of the related object data that is returned to the reader. Implementors should check the 
              <see cref="P:Remotion.Data.DomainObjects.ReadOnlyDomainObjectCollectionAdapter`1.IsDataComplete"/> property before accessing the collection data in order to avoid reloading 
              an unloaded collection end-point.
            </param>
            <param name="valueAccess">An indicator whether the current or original values have been read.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.RelationChanging(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Indicates that a relation is about to change. 
            This method might be invoked more than once for a given relation change operation. For example, when a whole related object collection is 
            replaced in one go, the method is invoked once for each old object that is not in the new collection and once for each new object not in the 
            old collection.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> providing the scope to the operation.</param>
            <param name="domainObject">The domain object holding the relation being changed.</param>
            <param name="relationEndPointDefinition">The relation endpoint definition of the relation that changes.</param>
            <param name="oldRelatedObject">The related object that is removed from the relation, or <see langword="null"/> if a new item is added without 
              replacing an old one.</param>
            <param name="newRelatedObject">The related object that is added to the relation, or <see langword="null"/> if an old item is removed without 
              being replaced by a new one.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.RelationChanged(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Indicates that a relation has been changed. 
            This method might be invoked more than once for a given relation change operation. For example, when a whole related object collection is 
            replaced in one go, the method is invoked once for each old object that is not in the new collection and once for each new object not in the 
            old collection.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> providing the scope to the operation.</param>
            <param name="domainObject">The domain object holding the relation being changed.</param>
            <param name="relationEndPointDefinition">The relation endpoint defintition of the relation that changes.</param>
            <param name="oldRelatedObject">The related object that is removed from the relation, or <see langword="null"/> if a new item is added without 
              replacing an old one.</param>
            <param name="newRelatedObject">The related object that is added to the relation, or <see langword="null"/> if an old item is removed without 
              being replaced by a new one.</param>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.AlreadyExistingLoadedObjectData">
            <summary>
            Represents a loaded object whose data already exists in the target <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectData">
            <summary>
            Represents an object loaded via an implementation of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IPersistenceStrategy"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.FetchEnabledObjectLoader">
            <summary>
            Extends an <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IObjectLoader"/> with the ability to execute an eager fetch query.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ObjectLoader">
            <summary>
            Implements the mechanisms for loading a set of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> objects into a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> by acting as a
            facade for <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IPersistenceStrategy"/> and <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectDataRegistrationAgent"/>.
            </summary>
            <remarks>
            <para>
            This class (indirectly, via <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.LoadedObjectDataRegistrationAgent"/>) signals all load-related events, but it does not 
            signal the <see cref="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.FilterQueryResult``1(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.Queries.QueryResult{``0})"/> event.
            </para>
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IObjectLoader">
            <summary>
            Provides a common interface for classes allowing to load a set of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> objects into a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IFetchEnabledObjectLoader">
            <summary>
            Extends <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IObjectLoader"/> with functionality for loading the objects returned by an eager fetch query.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IFetchEnabledPersistenceStrategy">
            <summary>
            Provides a common interface for classes that can load <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> instances from a data source and persist them, including
            support for executing fetch queries.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IPersistenceStrategy">
            <summary>
            Provides a common interface for classes that can load <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> instances from a data source and persist them.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IPersistenceStrategy.CreateNewObjectID(Remotion.Data.DomainObjects.Mapping.ClassDefinition)">
            <summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> for the given class definition. The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> must be created in a such a way that it can 
            later be used to identify objects when persisting or loading <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> instances.
            </summary>
            <param name="classDefinition">The class definition to create a new <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> for.</param>
            <returns>A new <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> for the given class definition.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IPersistenceStrategy.LoadObjectData(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Loads the data for the given <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> from the underlying data source.
            </summary>
            <param name="id">The id of the data to load.</param>
            <returns>An <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectData"/> instance for the given <paramref name="id"/>.</returns>
            <remarks>
            <para>
            This method should not set the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> of the loaded data container, register the container in a 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainerMap"/>, or set the  <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> of the container.
            All of these activities are performed by the caller. 
            </para>
            <para>
            The caller should also raise the <see cref="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.ObjectsLoading(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.ObjectID})"/> and 
            <see cref="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.ObjectsLoaded(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"/> events.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IPersistenceStrategy.LoadObjectData(System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.ObjectID},System.Boolean)">
            <summary>
            Loads the data for a number of <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> values from the underlying data source.
            </summary>
            <param name="objectIDs">The ids of the data to load.</param>
            <param name="throwOnNotFound">If <see langword="true"/>, this method should throw a <see cref="T:Remotion.Data.DomainObjects.Persistence.ObjectsNotFoundException"/> if a data container 
              cannot be found for an <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>. If <see langword="false"/>, the method should represent the unknown ID as a 
              <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.NullLoadedObjectData"/> object.
            </param>
            <returns>A sequence of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectData"/> instances in the same order as in <paramref name="objectIDs"/>. Items that
            couldn't be found are represented by a <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.NullLoadedObjectData"/> if <paramref name="throwOnNotFound"/> is set to 
            <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            This method should not set the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> of the loaded data container, register the container in a 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainerMap"/>, or set the  <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> of the container.
            All of these activities are performed by the caller. 
            </para>
            <para>
            The caller should also raise the <see cref="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.ObjectsLoading(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.ObjectID})"/> and 
            <see cref="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.ObjectsLoaded(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"/> events.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IPersistenceStrategy.ResolveObjectRelationData(Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID,Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectDataProvider)">
            <summary>
            Resolves the relation identified by the given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID"/>, loading the related object's data unless already available.
            </summary>
            <param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID"/> of the end point that should be resolved.
            <paramref name="relationEndPointID"/> must refer to an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ObjectEndPoint"/> (i.e., represent a single object, not a collection).
            Must not be <see langword="null"/>.</param>
            <param name="alreadyLoadedObjectDataProvider">An implementation of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectDataProvider"/> that is used to determine
            whether the result object is already known by the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. If so, the existing object data is returned; otherwise,
            the data is loaded and returned.</param>
            <returns>
            An <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectData"/> instance representing the related object. If the object already exists, the existing object
            is returned. Otherwise, a new one is created. If the related object is <see langword="null"/>, a <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.NullLoadedObjectData"/> instance
            is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="relationEndPointID"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="relationEndPointID"/> does not refer to an
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ObjectEndPoint"/></exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.PersistenceException">
            The related object could not be loaded, but is mandatory.<br/> -or- <br/>
            The relation refers to non-existing object.<br/> -or- <br/>
            	<paramref name="relationEndPointID"/> does not refer to an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ObjectEndPoint"/>.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.StorageProviderException">
            The Mapping does not contain a class definition for the given <paramref name="relationEndPointID"/>.<br/> -or- <br/>
            An error occurred while accessing the data source.
            </exception>
            <remarks>
            	<para>
            This method should not set the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> of the loaded data container, register the container in a
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainerMap"/>, or set the  <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> of the container.
            All of these activities are performed by the caller.
            </para>
            	<para>
            The caller should also raise the <see cref="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.ObjectsLoading(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.ObjectID})"/> and
            <see cref="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.ObjectsLoaded(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"/> events.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IPersistenceStrategy.ResolveCollectionRelationData(Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID,Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectDataProvider)">
            <summary>
            Resolves the relation identified by the given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID"/>, loading all the related objects' data unless already available.
            </summary>
            <param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID"/> of the end point that should be evaluated.
              <paramref name="relationEndPointID"/> must refer to a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/>. Must not be <see langword="null"/>.</param>
            <param name="alreadyLoadedObjectDataProvider">An implementation of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectDataProvider"/> that is used to determine
              whether the result object is already known by the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. If so, the existing object data is returned; otherwise,
              the data is loaded and returned.</param>
            <returns>
            A sequence of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectData"/> instances representing the related objects. If an object already exists, the existing object
            is returned. Otherwise, a new one is created.
            </returns>
            <remarks>
            <para>
            This method should not set the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> of the loaded data container, register the container in a 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainerMap"/>, or set the  <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> of the container.
            All of these activities are performed by the caller. 
            </para>
            <para>
            The caller should also raise the <see cref="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.ObjectsLoading(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.ObjectID})"/> and 
            <see cref="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.ObjectsLoaded(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"/> events.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="relationEndPointID"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.PersistenceException">
            	<paramref name="relationEndPointID"/> does not refer to one-to-many relation.<br/> -or- <br/>
            The StorageProvider for the related objects could not be initialized.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IPersistenceStrategy.ExecuteCollectionQuery(Remotion.Data.DomainObjects.Queries.IQuery,Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectDataProvider)">
            <summary>
            Executes the given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/>, loading the result objects' data unless already available.
            </summary>
            <param name="query">The <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> to be executed.</param>
            <param name="alreadyLoadedObjectDataProvider">An implementation of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectDataProvider"/> that is used to determine
              whether the result object is already known by the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. If so, the existing object data is returned; otherwise,
              the data is loaded and returned.</param>
            <returns>
            A sequence of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectData"/> instances representing the result of the query.
            </returns>
            <remarks>
            <para>
            This method should not set the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> of the loaded data container, register the container in a 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainerMap"/>, or set the  <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> of the container.
            All of these activities are performed by the caller. 
            </para>
            <para>
            The caller should also raise the <see cref="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.ObjectsLoading(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.ObjectID})"/> and 
            <see cref="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.ObjectsLoaded(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"/> events.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="query"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="query"/> does not have a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryType"/> of <see cref="F:Remotion.Data.DomainObjects.Queries.Configuration.QueryType.Collection"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderConfigurationException">
            The <see cref="P:Remotion.Data.DomainObjects.Queries.IQuery.StorageProviderDefinition"/> of <paramref name="query"/> could not be found.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.PersistenceException">
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"/> for the given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> could not be instantiated.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.StorageProviderException">
            An error occurred while executing the query.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IPersistenceStrategy.ExecuteScalarQuery(Remotion.Data.DomainObjects.Queries.IQuery)">
            <summary>
            Executes the given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> and returns its result as a scalar value.
            </summary>
            <param name="query">The query to be executed.</param>
            <returns>The scalar query result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="query"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="query"/> does not have a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryType"/> of <see cref="F:Remotion.Data.DomainObjects.Queries.Configuration.QueryType.Scalar"/>.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderConfigurationException">
            The <see cref="P:Remotion.Data.DomainObjects.Queries.IQuery.StorageProviderDefinition"/> of <paramref name="query"/> could not be found.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.PersistenceException">
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"/> for the given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> could not be instantiated.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.StorageProviderException">
            An error occurred while executing the query.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IPersistenceStrategy.PersistData(System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.PersistableData})">
            <summary>
            Persists the given data.
            </summary>
            <param name="data">The <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.PersistableData"/> items describing the data to be persisted.</param>
            <remarks>
            The caller must ensure that the data represented by <paramref name="data"/> is consistent and complete; otherwise an inconsistent state
            might arise in the underlying data store.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.FreshlyLoadedObjectData">
            <summary>
            Represents an object that was freshly loaded from the data source.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectDataProvider">
            <summary>
            Allows an <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IPersistenceStrategy"/> to get <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectData"/> instances for objects whose data is already known by the target 
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectDataProvider.GetLoadedObject(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Gets an <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectData"/> identified by <paramref name="objectID"/>, returning <see langword="null"/> if the 
            <paramref name="objectID"/> does not identify a known loaded object.
            </summary>
            <param name="objectID">The object ID. Must not be <see langword="null"/>.</param>
            <returns>An <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectData"/> for <paramref name="objectID"/>, or <see langword="null"/> if no such object is known.</returns>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectDataRegistrationAgent">
            <summary>
            Provides an interface for classes registering <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectData"/> instances if required, depending on the concrete type of the 
            <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectData"/> instances.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.LoadedObjectDataWithDataSourceData">
            <summary>
            Holds an <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectData"/> object along with a <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> that holds the data from the underlying data source. 
            originally loaded from thedata source.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectVisitor">
            <summary>
            Provides a method to dispatch on <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectData"/> implementations.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.InvalidLoadedObjectData">
            <summary>
            Represents an object that already exists in the target <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> as an invalid object.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IParentTransactionContext">
            <summary>
            Provides access to the parent transaction for <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.SubPersistenceStrategy"/>, opening a scope in which modifying operations are supported 
            even when the parent transaction is read-only.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IParentTransactionOperations">
            <summary>
            Provides access to the parent transaction operations required by <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.SubPersistenceStrategy"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.LoadedObjectDataProvider">
            <summary>
            Returns <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.AlreadyExistingLoadedObjectData"/> and <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.InvalidLoadedObjectData"/> instances for objects known by a given 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.ILoadedDataContainerProvider"/> or <see cref="T:Remotion.Data.DomainObjects.Infrastructure.InvalidObjects.IInvalidDomainObjectManager"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.LoadedObjectDataRegistrationAgent">
            <summary>
            Takes <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ILoadedObjectData"/> instances, registers all freshly loaded ones - triggering the necessary load events - and then returns
            the corresponding <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.NullLoadedObjectData">
            <summary>
            Represents a <see langword="null"/> reference that was loaded via <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IPersistenceStrategy"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ParentTransactionContext">
            <summary>
            Provides access to the parent transaction for <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.SubPersistenceStrategy"/>, opening a scope in which modifying operations are supported 
            even when the parent transaction is read-only.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.ParentTransactionOperations">
            <summary>
            Provides access to the parent transaction operations required by <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.SubPersistenceStrategy"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.TopClientTransactionListener">
            <summary>
            Holds all the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener"/> instances attached to a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>, forwarding events to them, 
            and raising <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> and <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> events.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.CompoundClientTransactionListener">
            <summary>
            Implements a collection of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener"/> objects.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.MappingConfigurationValidationHelper">
            <summary>
            Provides functionality helping with validation of the different parts of a <see cref="T:Remotion.Data.DomainObjects.Mapping.MappingConfiguration"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Model.IPersistenceModelValidatorFactory">
            <summary>
            Provides an interface for classes creating validators for the elements contained in a persistence model.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.EagerFetching.EagerFetcher">
            <summary>
            Provides functionality for performing eager fetching by executing eager fetch queries and correlating their results with a collection of input
            objects. Eager fetching is not performed recursively, recursive fetching must be implemented by the given 
            <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IFetchEnabledObjectLoader"/>'s <see cref="M:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IFetchEnabledObjectLoader.GetOrLoadFetchQueryResult(Remotion.Data.DomainObjects.Queries.IQuery)"/> method.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.EagerFetching.IEagerFetcher">
            <summary>
            Provides an interface for classes that can execute, correlate, and register eager fetch queries.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Validation.DomainObjectValidationException">
            <summary>
            Subclasses of <see cref="T:Remotion.Data.DomainObjects.Validation.DomainObjectValidationException"/> are thrown when a single <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> or a set of 
            <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances could not be validated.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DomainObjectException">
            <summary>
            BaseClass for all exceptions of the persistence framework.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.IClientTransactionExtensionFactory">
            <summary>
            Defines an interface for creating <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/> objects.
            </summary>
            <remarks>
            Register implementations of this interface with the <see cref="P:Microsoft.Practices.ServiceLocation.ServiceLocator.Current"/> <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>. When a new 
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> is created, the factories are iterated and the created listeners will be added to the 
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IClientTransactionExtensionFactory.CreateClientTransactionExtensions(Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Creates <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/> objects to be added to the given <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> that will receive the extensions. Note that this object is currently
            being constructed and may not yet be ready for use.
            </param>
            <returns>
            A sequence of <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/> instances that should be added to the <paramref name="clientTransaction"/>.
            </returns>
            <remarks>
            <see cref="M:Remotion.Data.DomainObjects.IClientTransactionExtensionFactory.CreateClientTransactionExtensions(Remotion.Data.DomainObjects.ClientTransaction)"/> is invoked while the <paramref name="clientTransaction"/>'s constructor is executing, but has
            not yet finished. No <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances should be accessed in the context of the <paramref name="clientTransaction"/> while 
            the method is running.  The <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.ParentTransaction"/> property can safely be accessed.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.PersistableData">
            <summary>
            Holds the data needed to persist a <see cref="P:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.PersistableData.DomainObject"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.DataContainerEndPointsRegistrationAgentBase">
            <summary>
            Provices typical implementations of <see cref="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.DataContainerEndPointsRegistrationAgentBase.RegisterEndPoints(Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointMap)"/> and <see cref="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.DataContainerEndPointsRegistrationAgentBase.CreateUnregisterEndPointsCommand(Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointMap)"/> with template methods,
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.DataContainerEndPointsRegistrationAgentBase.GetOwnedEndPointIDs(Remotion.Data.DomainObjects.DataManagement.DataContainer)"/> and <see cref="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.DataContainerEndPointsRegistrationAgentBase.GetUnregisterProblem(Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPoint,Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointMap)"/>, to be implemented by concrete implementations.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IDataContainerEndPointsRegistrationAgent">
            <summary>
            Encapsulates logic for registering and unregistering the relation end-points for a <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.DelegatingDataContainerEndPointsRegistrationAgent">
            <summary>
            Delegates to <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ExistingDataContainerEndPointsRegistrationAgent"/> and <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.NonExistingDataContainerEndPointsRegistrationAgent"/>,
            depending on the state of the given <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ExistingDataContainerEndPointsRegistrationAgent">
            <summary>
            Handles end-point registration for <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> instances that exist in the underlying data source. Such data containers
            only own their non-virtual end-points, and when unloading, these end-points must not be changed (because the changes would be lost and might
            leave other end-points in an inconsistent state).
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPointMapReadOnlyView">
            <summary>
            Provides read-only access to a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointMap"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPointRegistrationAgent">
            <summary>
            Defines an interface for classes registering and unregistering end-points in/from a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointManager"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.NonExistingDataContainerEndPointsRegistrationAgent">
            <summary>
            Handles end-point registration for <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> instances that do not exist in the underlying data source. Such data containers
            own both virtual and non-virtual end-points, and when unloading, these end-points must not reference any related objects (because the 
            references cannot be reconstructed and the related end-points would therefore end up as dangling references).
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.NullRealObjectEndPoint">
            <summary>
            Represents a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.NullObjectEndPoint"/> for a non-virtual relation property.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.NullObjectEndPoint">
            <summary>
            Represents an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IObjectEndPoint"/> (with a specific <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationEndPointDefinition"/>) for a <see langword="null"/> object.
            This is used by the different end point modification commands - when a bidirectional relation modification extends to a <see langword="null"/> 
            object, this end point (or <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.NullCollectionEndPoint"/>) is used to represent the object's part in the relation, and a 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.NullEndPointModificationCommand"/> is used to represent the modification. The end point is created on the fly by 
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointManager.GetRelationEndPointWithLazyLoad(Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)"/> and is usually discarded after it's used.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRealObjectEndPoint">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRealObjectEndPoint"/> represents an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IObjectEndPoint"/> that holds the foreign key in a relation.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointFactory">
            <summary>
            Creates <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPoint"/> instances.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointMap">
            <summary>
            Holds a set of <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPoint"/> instances and provides access to them.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointRegistrationAgent">
            <summary>
            Registers and unregisters end-points in/from a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointManager"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RootRelationEndPointRegistrationAgent">
            <summary>
            Extends <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointRegistrationAgent"/> with functionality specific to root transactions. Specifically, it optimizes
            end-point registration for 1:1 relations to avoid unnecessary queries.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.IncompleteVirtualEndPointLoadStateBase`4">
            <summary>
            Defines common logic for <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPoint"/> implementations in incomplete state, ie., before lazy loading has completed.
            </summary>
            <typeparam name="TEndPoint">The type of the end point whose state is managed by this class.</typeparam>
            <typeparam name="TData">The type of data held by the <typeparamref name="TDataManager"/>.</typeparam>
            <typeparam name="TDataManager">The type of <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.IVirtualEndPointDataManager"/> holding the data for the end-point.</typeparam>
            <typeparam name="TLoadStateInterface">The type of the load state interface used by <typeparamref name="TEndPoint"/>.</typeparam>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.IVirtualEndPointLoadState`3">
            <summary>
            Represents the lazy-loading state of an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPoint"/> and implements accessor methods for that end-point.
            </summary>
            <typeparam name="TEndPoint">The type of the end point whose state is managed by this instance.</typeparam>
            <typeparam name="TData">The type of data held by the <typeparamref name="TDataManager"/>.</typeparam>
            <typeparam name="TDataManager">The type of <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.IVirtualEndPointDataManager"/> holding the data for the end-point.</typeparam>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CompleteVirtualEndPointLoadStateBase`3">
            <summary>
            Defines common logic for <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPoint"/> implementations in complete state, ie., when lazy loading has completed.
            </summary>
            <typeparam name="TEndPoint">The type of the end point whose state is managed by this class.</typeparam>
            <typeparam name="TData">The type of data held by the <typeparamref name="TDataManager"/>.</typeparam>
            <typeparam name="TDataManager">The type of <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.IVirtualEndPointDataManager"/> holding the data for the end-point.</typeparam>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.IVirtualEndPointDataManager">
            <summary>
            Defines an interface for classes keeping the data for an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPoint"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.VirtualObjectEndPoints.CompleteVirtualObjectEndPointLoadState">
            <summary>
            Represents the state of a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualObjectEndPoint"/> where all of its data is available (ie., the end-point has been (lazily) loaded).
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.VirtualObjectEndPoints.IVirtualObjectEndPointLoadState">
            <summary>
            Represents the lazy-loading state of a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualObjectEndPoint"/> and implements accessor methods for that end-point.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.VirtualObjectEndPoints.IncompleteVirtualObjectEndPointLoadState">
            <summary>
            Represents the state of a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualObjectEndPoint"/> where not all of its data is available (ie., the end-point has not been (lazily) 
            loaded, or it has been unloaded).
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.VirtualObjectEndPoints.IVirtualObjectEndPointDataManager">
            <summary>
            Defines an interface for classes storing the data for a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualObjectEndPoint"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.VirtualObjectEndPoints.VirtualObjectEndPointDataManager">
            <summary>
            Keeps the data of a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualObjectEndPoint"/>, managing current and original values as well as opposite end-points.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.VirtualObjectEndPoints.VirtualObjectEndPointDataManagerFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.VirtualObjectEndPoints.VirtualObjectEndPointDataManagerFactory"/> is responsible to create a new <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.VirtualObjectEndPoints.IVirtualObjectEndPointDataManager"/> instance.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPointStateUpdateListener">
            <summary>
            Implements the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPointStateUpdateListener"/> interface by passing information about state updates on to a 
            <see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPointStateUpdateListener.ClientTransaction"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPointStateUpdateListener">
            <summary>
            Used to signal when the change state of an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPoint"/> is updated.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.CollectionEndPointDataManagerFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.CollectionEndPointDataManagerFactory"/> is responsible to create a new <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ICollectionEndPointDataManager"/> instance.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.CompleteCollectionEndPointLoadState">
            <summary>
            Represents the state of a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/> where all of its data is available (ie., the end-point has been (lazily) loaded).
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ICollectionEndPointLoadState">
            <summary>
            Represents the lazy-loading state of a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/> and implements accessor methods for that end-point.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.IncompleteCollectionEndPointLoadState">
            <summary>
            Represents the state of a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/> where not all of its data is available (ie., the end-point has not been (lazily) 
            loaded, or it has been unloaded).
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.SortedPropertyComparer">
            <summary>
            Compares two <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances based on a <see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.SortedPropertyComparer.SortedPropertySpecification"/>. The property values are retrieved
            without raising any events. If the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances are not loaded, their data is lazily loaded.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointDeleteCommand">
            <summary>
            Represents the deletion of an object owning a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/> from the end-point's point of view.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.RelationEndPointModificationCommand">
            <summary>
            Represents a modification performed on a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPoint"/>. Provides default behavior for triggering the required
            events and notifying the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> about the modification. The actual modification has to be specified by subclasses
            by implementing <see cref="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.RelationEndPointModificationCommand.Perform"/>. In addition, <see cref="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.RelationEndPointModificationCommand.ExpandToAllRelatedObjects"/> has to be overridden to return a 
            composite object containing all commands needed to be performed when this modification starts a bidirectional relation change.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.RelationEndPointModificationCommand.Perform">
            <summary>
            Performs this command without raising any events and without performing any bidirectional modifications.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.RelationEndPointModificationCommand.ExpandToAllRelatedObjects">
            <summary>
            Returns a new <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand"/> instance that involves changes to all objects affected by this
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.RelationEndPointModificationCommand"/>. If no other objects are involved by the change, this method returns just this
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand"/>.
            </summary>
            <returns>A new <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand"/> instance that involves changes to all objects affected by this
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.RelationEndPointModificationCommand"/>.</returns>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.ObjectEndPointDeleteCommand">
            <summary>
            Represents the deletion of an object owning a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ObjectEndPoint"/> from the end-point's point of view.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.NullVirtualObjectEndPoint">
            <summary>
            Represents a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.NullObjectEndPoint"/> for a virtual relation property.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RealObjectEndPoints.IRealObjectEndPointSyncState">
            <summary>
            Represents the synchronization state of an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IObjectEndPoint"/> with the opposite <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPoint"/>, and implements 
            accessor methods for that end-point.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RealObjectEndPoints.SynchronizedRealObjectEndPointSyncState">
            <summary>
            Represents the state of an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IObjectEndPoint"/> that is synchronized with the opposite <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPoint"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RealObjectEndPoints.UnknownRealObjectEndPointSyncState">
            <summary>
            Represents the synchronization state of an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ObjectEndPoint"/> whose opposite end-point is not loaded/complete yet.
            In this case, the synchronization state is unknown until the opposite end-point is loaded. Any access to the sync state will cause the
            opposite end-point to be loaded.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RealObjectEndPoints.UnsynchronizedRealObjectEndPointSyncState">
            <summary>
            Represents the state of an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IObjectEndPoint"/> that is not synchronized with the opposite <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPoint"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DomainImplementation.BidirectionalRelationSyncService">
             <summary>
             Provides APIs for checking whether the opposite relation properties in a bidirectional relation are out-of-sync, and - if yes -
             allows to synchronize them. Synchronization is performed only in the scope of a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>, not with the underlying data 
             source. When applied to a sub-transaction or to a transaction with sub-transactions, the <see cref="T:Remotion.Data.DomainObjects.DomainImplementation.BidirectionalRelationSyncService"/>
             affects the whole transaction hierarchy.
             </summary>
             <remarks>
             <para>
             When a bidirectional relation property is loaded from the underlying data source, re-store always tries to keep the two opposite
             sides in the relation in-sync. For example, in an Order-OrderItems relation, both the Order's relation property and 
             the individual OrderItems' relation properties should reflect the same relation data.
             </para>
             <para>
             There are, however, scenarios under which re-store cannot keep that promise of consistency. Due to the nature of lazy loading, the two
             sides of a bidirectional relation can become out-of-sync when the underlying data source changes between the loading of the two sides of the
             relation. This is most notable with 1:n relations, where the collection side is not fully loaded when only a single collection item
             is loaded into memory.
             </para>
             <para>
             Here is an example: Consider that the collection side of a bidirectional relation property is resolved from the underlying data source 
             (eg., by accessing the contents of the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>). The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> loads the contents of the 
             relation by means of a query to the underlying data source and stores the result for further use (again, via the 
             <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>). Now consider that the data source changes so that the foreign key property of another item gets set
             in a way that would normally qualify it as a collection item. After that, the item is loaded into the same <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> that
             already holds the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>'s contents. That relation is now out-of-sync: the item's foreign key property points
             to the owner of the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>, but the collection does not contain the item.
             </para>
             <para>
             Here is that same example in code:
             <code>
             var order = Order.GetObject (DomainObjectIDs.Order1);
             var orderItemsArray = order.OrderItems.ToArray(); // cause the full relation contents to be loaded and stored in-memory
            
             // data source now changes: an additional OrderItem with ID NewOrderItem is added which points back to DomainObjectIDs.Order1
             
             // load that new item
             var newOrderItem = OrderItem.GetObject (DomainObjectIDs.NewOrderItem);
             
             // prints "True" - the foreign key property points to DomainObjectIDs.Order1
             Console.WriteLine (newOrderItem.Order == order);
            
             // prints "False" - the collection has still the same state as before; it does not contain the item
             Console.WriteLine (order.OrderItems.ContainsObject (newOrderItem));
             </code>
             </para>
             <para>
             There are four scenarios where an out-of-sync state can happen:
             <list type="bullet">
             <item>
             A collection is loaded that does not contain an item. Later, that item's data is loaded, and it points back to the collection owner.
             The foreign key property is out-of-sync.
             </item>
             <item>
             A collection is loaded that does contain an item. Later, that item's data is loaded, and it does not points back to the collection owner.
             The collection is out-of-sync.
             </item>
             <item>
             An item is loaded that does point to the owner of a collection. Later, that collection is loaded, and it does not contain the item.
             The foreign key property is out-of-sync.
             </item>
             <item>
             An item is loaded that does not point to the owner of a collection. Later, that collection is loaded, and it contains the item.
             The collection is out-of-sync.
             </item>
             </list>
             (No matter whether the item or the collection is loaded first, the same foreign key/collection situation causes the same out-of-sync state.)
             </para>
             <para>
             The <see cref="T:Remotion.Data.DomainObjects.DomainImplementation.BidirectionalRelationSyncService"/> class allows users to check whether a relation is out-of-sync (<see cref="M:Remotion.Data.DomainObjects.DomainImplementation.BidirectionalRelationSyncService.IsSynchronized(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)"/>)
             and, if so, get re-store to synchronize the opposite sides in the relation (<see cref="M:Remotion.Data.DomainObjects.DomainImplementation.BidirectionalRelationSyncService.Synchronize(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)"/>):
             <code>
             var endPointID = RelationEndPointID.Create (newOrderItem, oi =&gt; oi.Order);
             
             // Prints "False" - the relation is out-of-sync
             Console.WriteLine (BidirectionalRelationSyncService.IsSynchronized (ClientTransaction.Current, endPointID));
             
             BidirectionalRelationSyncService.Synchronize (ClientTransaction.Current, endPointID);
             
             // Prints "True" - the relation is now synchronized
             Console.WriteLine (BidirectionalRelationSyncService.IsSynchronized (ClientTransaction.Current, endPointID));
             
             // prints "True" - the foreign key property points to DomainObjectIDs.Order1
             Console.WriteLine (newOrderItem.Order == order);
            
             // prints "True" - the collection now contains the item
             Console.WriteLine (order.OrderItems.ContainsObject (newOrderItem));
             </code>
             </para>
             <para>
             The <see cref="M:Remotion.Data.DomainObjects.DomainImplementation.BidirectionalRelationSyncService.Synchronize(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)"/> API always adjusts the collection so that the foreign keys in the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> match. They
             never adjust a foreign key property, as this would violate the integrity of the respective <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> (and its timestamp).
             </para>
             </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainImplementation.BidirectionalRelationSyncService.IsSynchronized(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)">
            <summary>
            Determines whether the given relation property is in-sync with the opposite relation property/properties.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> to check the relation property in. In a transaction hierarchy,
            <see cref="M:Remotion.Data.DomainObjects.DomainImplementation.BidirectionalRelationSyncService.IsSynchronized(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)"/> returns the same result, no matter to which transaction (root or sub-transaction) in the hierarchy it is applied.</param>
            <param name="endPointID">The ID of the relation property to check. This contains the ID of the originating object and the
            relation property to check. The relation property must have been loaded into the given <paramref name="clientTransaction"/>.</param>
            <returns>
            	<see langword="true"/> if the specified relation property is synchronized; <see langword="false"/> if it is out-of-sync.
              If the relation has not been completely loaded, the result is <see langword="null"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
              <paramref name="endPointID"/> denotes a unidirectional (or anonymous) relation property.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainImplementation.BidirectionalRelationSyncService.Synchronize(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)">
            <summary>
            Synchronizes the given relation property with its opposite relation property/properties.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> to synchronize the relation property in. In a transaction hierarchy,
            <see cref="M:Remotion.Data.DomainObjects.DomainImplementation.BidirectionalRelationSyncService.Synchronize(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)"/> affects the whole hierarchy, no matter to which transaction (root or sub-transaction) it is applied. </param>
            <param name="endPointID">The ID of the relation property to synchronize. This contains the ID of the originating object and the
            relation property to check.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="endPointID"/> denotes a unidirectional (or anonymous) relation property.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              The relation property denoted by <paramref name="endPointID"/> has not yet been fully loaded into the given <paramref name="clientTransaction"/>.
            </exception>
            <remarks>
            <para>
              If <paramref name="endPointID"/> denotes an object-valued end-point that is out-of-sync with an opposite collection (eg., OrderItem.Order), 
              the opposite collection 
              (eg., Order.OrderItems) is adjusted to match the foreign key value. This results in the item being added to the collection.
              If <paramref name="endPointID"/> denotes a collection-valued end-point that is out-of-sync (eg., Order.OrderItems), the collection is 
              synchronized with the opposite foreign key values. This results in all items being removed from the collection that do not have a foreign 
              key value pointing at the collection.
            </para>
            <para>
              If the relation is already synchronized, this method does nothing.
            </para>
            <para> 
              When a relation involving a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> is synchronized, its current and original contents may be changed.
              For these changes, the <see cref="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.BidirectionalRelationAttribute.SortExpression"/> is not re-executed, the 
              <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Adding"/>/<see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Added"/> events are not raised (and the 
              <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnAdding(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"/>/<see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnAdded(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"/> methods not called), and no relation change 
              events are raised. Because synchronization affects current and original relation value alike, the <see cref="P:Remotion.Data.DomainObjects.DomainObject.State"/> of the
              <see cref="N:Remotion.Data.DomainObjects"/> involved in the relation is not changed.
            </para>
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DomainObjectExtensions">
            <summary>
            Provides useful extension methods for working with <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectExtensions.GetSafeID(Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Returns the <see cref="P:Remotion.Data.DomainObjects.DomainObject.ID"/> of the given <paramref name="domainObjectOrNull"/>, or <see langword="null"/> if 
            <paramref name="domainObjectOrNull"/> is itself <see langword="null"/>.
            </summary>
            <param name="domainObjectOrNull">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> whose <see cref="P:Remotion.Data.DomainObjects.DomainObject.ID"/> to get. If this parameter is 
            <see langword="null"/>, the method returns <see langword="null"/>.</param>
            <returns>The <paramref name="domainObjectOrNull"/>'s <see cref="P:Remotion.Data.DomainObjects.DomainObject.ID"/>, or <see langword="null"/> if <paramref name="domainObjectOrNull"/>
            is <see langword="null"/>.</returns>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.InvalidObjects.IInvalidDomainObjectManager">
            <summary>
            Defines an API for classes keeping a collection of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> references that were marked as invalid in a given 
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.InvalidObjects.InvalidDomainObjectManager">
            <summary>
            Keeps a collection of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> references that were marked as invalid in a given <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Validation.CommitValidationClientTransactionExtension">
            <summary>
            Handles commit validation for <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instances.
            </summary>
            <remarks>
            Currently, this extension only checks that all mandatory relations are set.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.LinqCastMethodAttribute">
            <summary>
            Denotes a property or method to be treated like a cast to the member's return type when used in a database LINQ query. To apply the attribute 
            to a property, attribute the property's get accessor.
            </summary>
            <remarks>
            If the member is an instance member, that instance is cast to the member's return type. If it is a static member, the method must have exactly
            one argument, which is then cast to the member's return type. The latter makes the attribute suitable for use with extension methods (see 
            example).
            </remarks>
            <example>
            This attribute is especially useful to provide easy, discoverable access to the members added by a mixin to a class. If the class uses the mixin,
            the class itself can provide a property that casts the object to the mixin's interface:
            <code>
            [DBTable]
            [Uses (typeof (MyMixin))] // MyMixin adds persistent properties and exposes them via IMyMixin 
            public class MyDomainObject : DomainObject
            {
              [StorageClassNone]
              public IMyMixin MixinMembers
              {
                [LinqCastMethod] get { return (IMyMixin) this; }
              }
            }
            </code>
            
            If the class is extended by the mixin, the mixin can add an extension method:
            <code>
            public static class MyDomainObjectExtensions
            {
              [LinqCastMethod]
              public static IMyMixin GetMixinMembers (this MyDomainObject that)
              {
                return (IMyMixin) that;
              }
            }
            </code>
            The <see cref="T:Remotion.Data.DomainObjects.LinqCastMethodAttribute"/> will ensure that those properties or methods can also be used from within a LINQ database query.
            </example>
        </member>
        <member name="T:Remotion.Data.DomainObjects.LinqCastMethodAttribute.MethodCallTransformer">
            <summary>
            Implements the transformation that allows the SQL generator to regard a property or method as a cast.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Linq.FetchResultOperatorHandler">
            <summary>
            Implements <see cref="T:Remotion.Linq.SqlBackend.SqlPreparation.IResultOperatorHandler"/> for classes derived from <see cref="T:Remotion.Linq.EagerFetching.FetchRequestBase"/>. Since those result operators cannot
            be translated to SQL, but must be removed by the LINQ provider _before_ the query is translated to SQL, the <see cref="T:Remotion.Data.DomainObjects.Linq.FetchResultOperatorHandler"/>
            always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Linq.IStorageSpecificExpressionResolver">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Linq.IStorageSpecificExpressionResolver"/> defines the API for classes that evaluate the re-store persistence model when resolving
            re-linq expressions.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.InvalidPropertyInformation">
            <summary>
            Holds information about a mapping property that could not be resolved.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.InvalidRelationEndPointDefinitionBase">
            <summary>
            Holds information about a relation end point that could not be resolved.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinitionCollectionFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinitionCollectionFactory"/> is used to get a <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinitionCollection"/> for a set of 
            <see cref="T:Remotion.Reflection.IPropertyInformation"/>s.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.RelationDefinitionCollectionFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationDefinitionCollectionFactory"/> is used to get a sequence of <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationDefinition"/> objects for a set of 
            <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/>s.
            sets base classes and derived classes correctly.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.RelationEndPointDefinitionCollectionFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationEndPointDefinitionCollectionFactory"/> is used to get a <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationEndPointDefinitionCollection"/> for a 
            <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/>
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.TypeNotObjectIDRelationEndPointDefinition">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Mapping.TypeNotObjectIDRelationEndPointDefinition"/> represents an invalid relation endpoint where the property type represents no 
            <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.ColumnValueReader">
            <summary>
            Implements <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IColumnValueProvider"/> by reading the values associated with a column (via a <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.IColumnOrdinalProvider"/>) from
            an <see cref="T:System.Data.IDataReader"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IColumnValueProvider">
            <summary>
            Provides an interface for classes providing values for given <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnDefinition"/> instances.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlEmptyViewScriptElementFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlTableViewScriptElementFactory"/> is responsible to create script-elements for empty-views in a sql-server database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlViewScriptElementFactoryBase`1">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlViewScriptElementFactoryBase`1"/> represents the base-class for all factory classes that are responsible to create new script 
            elements for creating views in a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlElementFactoryBase">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlElementFactoryBase"/> represents the base class for all elment factories.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.IViewScriptElementFactory`1">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.IViewScriptElementFactory`1"/> defines the API for all factory classes that are responsible to create view script elements for a 
            relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.StorageEntityBasedStorageProviderDefinitionFinder">
            <summary>
            Returns the <see cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition"/> of a <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/> based on its 
            <see cref="P:Remotion.Data.DomainObjects.Mapping.ClassDefinition.StorageEntityDefinition"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.IStorageProviderDefinitionFinder">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.IStorageProviderDefinitionFinder"/> defines the API for the storage provider definition finder implementations.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.ObjectLookupResult`1">
            <summary>
            Holds the result from looking up the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> for a specific <see cref="P:Remotion.Data.DomainObjects.Persistence.ObjectLookupResult`1.ObjectID"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.FixedValueStorageProviderCommand`2">
            <summary>
            Implements <see cref="T:Remotion.Data.DomainObjects.Persistence.IStorageProviderCommand`2"/> by always returning the same, fixed value.
            </summary>
            <typeparam name="T">The type of the value to return.</typeparam>
            <typeparam name="TExecutionContext">The type of the execution context. This is not actually used by this command.</typeparam>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.IStorageProviderCommand`2">
            <summary>
            Represents a command with a return value to be executed by a storage provider.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.IStorageProviderCommand`1">
            <summary>
            Represents a command without a return value to be executed by a storage provider.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.IStorageProviderCommandFactory`1">
            <summary>
            Defines an interface for classes instantiating <see cref="T:Remotion.Data.DomainObjects.Persistence.IStorageProviderCommand`1"/> instances for the basic storage provider operations.
            <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"/> uses this factory interface when the respective provider methods are called.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.DataContainerReader">
            <summary>
            Reads data from an <see cref="T:System.Data.IDataReader"/> and converts it into <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> instances.
            The command whose data is converted must return an ID, a timestamp (as defined by the given <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStoragePropertyDefinition"/> 
            instances), and values for each persistent property of the <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/> matching the <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> read from the 
            <see cref="T:System.Data.IDataReader"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.IObjectReader`1">
            <summary>
            Defines an interface for classes reading data from an <see cref="T:System.Data.IDataReader"/> and composing objects from the result.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.IObjectReaderFactory">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.IObjectReaderFactory"/> defines the API for all implementations that are responsible to create <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.IObjectReader`1"/> instances.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.ObjectIDReader">
            <summary>
            Reads data from an <see cref="T:System.Data.IDataReader"/> and converts it into <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> instances.
            The command whose data is converted must return an ID (as defined by the given <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStoragePropertyDefinition"/>).
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.DictionaryBasedColumnOrdinalProvider">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.DictionaryBasedColumnOrdinalProvider"/> calculates the index of a <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnDefinition"/> 
            based on <see cref="T:System.Collections.Generic.IDictionary`2"/> entries.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.IColumnOrdinalProvider">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.IColumnOrdinalProvider"/> defines the API for all implementations that calculate the index of a 
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnDefinition"/> in the list of values read by a specified <see cref="T:System.Data.IDataReader"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.NameBasedColumnOrdinalProvider">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.NameBasedColumnOrdinalProvider"/> calculates the index of a <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnDefinition"/> based on its column name.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.ObjectReaderFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.ObjectReaderFactory"/> is responsible to create <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.IObjectReader`1"/> instances.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.TimestampReader">
            <summary>
            Reads data from an <see cref="T:System.Data.IDataReader"/> and converts it into timestamp instances.
            The command whose data is converted must return an ID and a timestamp (as defined by the given <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStoragePropertyDefinition"/>
            instances).
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.DbCommandBuilders.Specifications.SqlXmlSetComparedColumnSpecification">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.DbCommandBuilders.Specifications.SqlXmlSetComparedColumnSpecification"/> builds a specification command that allows retrieving a set of records.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.IComparedColumnsSpecification">
            <summary>
            Provides an interface for classes defining a set of comparisons in a WHERE clause. Multiple comparisons are separated by "AND" operators.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.UpdateDbCommandBuilder">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.UpdateDbCommandBuilder"/> builds a command that allows updating a set of records as specified by a given 
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.IUpdatedColumnsSpecification"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.DeleteDbCommandBuilder">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.DeleteDbCommandBuilder"/> builds a command that allows deleting a set of records as specified by a given 
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.IComparedColumnsSpecification"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.InsertDbCommandBuilder">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.InsertDbCommandBuilder"/> builds a command that allows inserting a set of records as specified by a given 
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.IInsertedColumnsSpecification"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.IInsertedColumnsSpecification">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.IInsertedColumnsSpecification"/> defines the API for all implementations that specify how to insert columns in a relational
            database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.InsertedColumnsSpecification">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.InsertedColumnsSpecification"/> defines the API for all implementations that specify the values to insert into the the specified columns 
            in a relational  database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.IUpdatedColumnsSpecification">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.IUpdatedColumnsSpecification"/> defines the API for all implementations that specify columns to be updated in a SQL statement.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.UpdatedColumnsSpecification">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.UpdatedColumnsSpecification"/> specifies what columns should be updated, and with what values.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.IRdbmsPersistenceModelProvider">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.IRdbmsPersistenceModelProvider"/> provides methods to retrieve rdbms-specific persistence model definitions from mapping objects.
            The provider only returns existing objects, it doesn't create any.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.IRdbmsProviderCommandExecutionContext">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.IRdbmsProviderCommandExecutionContext"/> defines methods for creating and executing <see cref="T:System.Data.IDbCommand"/> instances. These are
            used by RDBMS-specific implementations of <see cref="T:Remotion.Data.DomainObjects.Persistence.IStorageProviderCommand`2"/> and <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.IDbCommandBuilder"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnValueTable">
            <summary>
            Defines a sequence of value rows (<see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnValueTable.Rows"/>) associated with a list of <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnDefinition"/> instances 
            (<see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnValueTable.Columns"/>). Each row has exactly as many elements as the <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnValueTable.Columns"/> sequence, and its elements are associated with
            the respective <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnDefinition"/>.
            </summary>
            <remarks>
            For efficiency, this data structure only holds <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequences and does not ensure that the <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnValueTable.Rows"/> have
            the same width as the <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnValueTable.Columns"/> sequence. Code initializing <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnValueTable"/> must ensure that this is always the case.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IObjectIDStoragePropertyDefinition">
            <summary>
            Represents an RDBMS storage property for <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> values.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStoragePropertyDefinition">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStoragePropertyDefinition"/> is exposed by all RDBMS-specific <see cref="T:Remotion.Data.DomainObjects.Persistence.Model.IStoragePropertyDefinition"/> implementations.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Model.IStoragePropertyDefinition">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Model.IStoragePropertyDefinition"/> defines the API for a storable property defintion.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.StorageProviderCommands.Factories.RelationLookupCommandFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.StorageProviderCommands.Factories.RelationLookupCommandFactory"/> is responsible for creating relation lookup commands for a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.StorageProviderCommands.ScalarValueLoadCommand">
            <summary>
            Executes the command created by the given <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.IDbCommandBuilder"/> and parses the result into a single object using the specified
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.IObjectReader`1"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.StorageProviderCommands.Factories.LookupCommandFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.StorageProviderCommands.Factories.LookupCommandFactory"/> is responsible for creating lookup commands for a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.IInfrastructureStoragePropertyDefinitionProvider">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.IInfrastructureStoragePropertyDefinitionProvider"/> defines the API to create instances of <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStoragePropertyDefinition"/>
            to use for infrastructure columns.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.InfrastructureStoragePropertyDefinitionProvider">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.InfrastructureStoragePropertyDefinitionProvider"/> class is responsible to create 
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStoragePropertyDefinition"/> objects for infrastructure columns.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnValue">
            <summary>
            Associates a value with a <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnDefinition"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.CompoundStoragePropertyDefinition">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.CompoundStoragePropertyDefinition"/> can be used to read and store complex values.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation">
            <summary>
            Defines an API for classes providing information about the storage type of a value in a relational database.
            In addition, it can create an unnamed <see cref="T:System.Data.IDbDataParameter"/> for a given value (convertible to the storage format) or read and 
            convert a value from an <see cref="T:System.Data.IDataReader"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation.CreateDataParameter(System.Data.IDbCommand,System.Object)">
            <summary>
            Creates an <see cref="T:System.Data.IDbDataParameter"/> for the given <paramref name="value"/> and <see cref="T:System.Data.IDbCommand"/>.
            </summary>
            <param name="command">The command to create the <see cref="T:System.Data.IDbDataParameter"/> with.</param>
            <param name="value">The value to create the parameter for.</param>
            <returns>A parameter holding the given <paramref name="value"/> (possibly converted), for the given <paramref name="command"/>.</returns>
            <remarks>
            <para>
            The returned parameter's <see cref="P:System.Data.IDataParameter.Value"/> is set to (a possibly converted version of) <paramref name="value"/>.
            </para>
            <para>
            The parameter's <see cref="P:System.Data.IDataParameter.ParameterName"/> is not set, and the parameter is not added to the command's 
            <see cref="P:System.Data.IDbCommand.Parameters"/> collection.
            </para>
            </remarks>
            <exception cref="T:System.NotSupportedException">The <paramref name="value"/> cannot be converted to the <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation.StorageType"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation.Read(System.Data.IDataReader,System.Int32)">
            <summary>
            Reads a value from the specified <see cref="T:System.Data.IDataReader"/> at the given <paramref name="ordinal"/>, returning it as an instance of 
            <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation.DotNetType"/> (or <see langword="null"/>).
            </summary>
            <param name="dataReader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="ordinal">The ordinal identifying the value to be read.</param>
            <returns>A (possibly converted) value read from the given <paramref name="dataReader"/>.</returns>
            <exception cref="T:System.NotSupportedException">The read value cannot be converted to the <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation.DotNetType"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation.ConvertToStorageType(System.Object)">
            <summary>
            Converts a value to the <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.StorageType"/>, so that it can be stored by the database.
            </summary>
            <param name="dotNetValue">The value to be converted. Can be <see langword="null"/>.</param>
            <returns>The converted value as it can be stored by the database.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation.ConvertFromStorageType(System.Object)">
            <summary>
            Converts a value read from the database to the <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.DotNetType"/>.
            </summary>
            <param name="storageValue">The value to be converted. Can be <see langword="null"/>.</param>
            <returns>The converted value as it can be used in .NET code.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation.StorageType">
            <summary>
            Gets the storage type as a CLR <see cref="T:System.Type"/>; this is the <see cref="T:System.Type"/> used to represent stored values in memory before conversion.
            For example, for <see cref="T:System.Enum"/> values, this could be the <see cref="T:System.Int32"/> type.
            </summary>
            <value>The storage type as a CLR <see cref="T:System.Type"/>.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation.StorageTypeName">
            <summary>
            Gets the name of the storage type as understood by the underlying database.
            </summary>
            <value>The name of the storage type.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation.IsStorageTypeNullable">
            <summary>
            Gets a value indicating whether the storage type is nullable in the underlying database.
            </summary>
            <value>
            	<see langword="true"/> if the storage type is nullable; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation.DotNetType">
            <summary>
            Gets the storage type after conversion. This is the <see cref="T:System.Type"/> of values returned by <see cref="M:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation.Read(System.Data.IDataReader,System.Int32)"/> and put into 
            <see cref="M:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation.CreateDataParameter(System.Data.IDbCommand,System.Object)"/>.
            For example, for <see cref="T:System.Enum"/> values, this would be the respective <see cref="T:System.Enum"/> type.
            </summary>
            <value>The converted type.</value>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ObjectIDWithoutClassIDStoragePropertyDefinition">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ObjectIDStoragePropertyDefinition"/> represents an <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> property that is stored as an ID column without a 
            ClassID column. This can only be used when the <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ObjectIDWithoutClassIDStoragePropertyDefinition.ClassDefinition"/> of the referenced <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> is known in advance
            (i.e., if there is no inheritance involved).
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.OrderedColumn">
            <summary>
            Associates a <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.OrderedColumn.ColumnDefinition"/> with a <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.OrderedColumn.SortOrder"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.SerializedObjectIDStoragePropertyDefinition">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ObjectIDStoragePropertyDefinition"/> represents an <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> property that is stored in a single string-typed column.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.SimpleStoragePropertyDefinition">
            <summary>
            Defines that a property maps directly to a simple column in a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation"/> provides information about the storage type of a value in a relational database.
            In addition, it can create an unnamed <see cref="T:System.Data.IDbDataParameter"/> for a value convertible to <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.StorageType"/> via 
            <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.DotNetTypeConverter"/>, or read and convert a value from an <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <remarks>
            The <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.DotNetTypeConverter"/> must be associated with the in-memory .NET type of the stored value. It is used to convert to the database
            representation (represented by <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.StorageType"/>) when a <see cref="T:System.Data.IDbDataParameter"/> is created, and it is used to convert
            values back to the <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.DotNetType"/> when a value is read from an <see cref="T:System.Data.IDataReader"/>.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.ConvertToStorageType(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.ConvertFromStorageType(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.StorageType">
            <inheritdoc />
        </member>
        <member name="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.StorageTypeName">
            <inheritdoc />
        </member>
        <member name="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.StorageDbType">
            <summary>
            Gets the <see cref="T:System.Data.DbType"/> value corresponding to the storage type.
            </summary>
            <value>The <see cref="T:System.Data.DbType"/> of the storage type.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.DotNetType">
            <inheritdoc />
        </member>
        <member name="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.DotNetTypeConverter">
            <summary>
            Gets a <see cref="T:System.ComponentModel.TypeConverter"/> that can converts a value from the <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.DotNetType"/> (e.g., an enum type) 
            to the <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.StorageType"/> (e.g., <see cref="T:System.Int32"/>) and back.
            </summary>
            <value>The type converter for the actual .NET type.</value>
            <remarks>
            The <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.DotNetTypeConverter"/> is used to convert the values passed into <see cref="M:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.CreateDataParameter(System.Data.IDbCommand,System.Object)"/> to the underlying 
            <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.StorageType"/>. That way, an enum value passed into <see cref="M:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.CreateDataParameter(System.Data.IDbCommand,System.Object)"/> can be converted to the underlying
            <see cref="T:System.Int32"/> type when it is to be written into the database. Conversely, <see cref="M:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.Read(System.Data.IDataReader,System.Int32)"/> uses the <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.DotNetTypeConverter"/> to
            convert values read from the database (which should usually be of the <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.StorageType"/>) back to the expected 
            <see cref="P:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeInformation.DotNetType"/>. That way, e.g, an <see cref="T:System.Int32"/> value can become an enum value again.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.RdbmsPersistenceModelProvider">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.RdbmsPersistenceModelProvider"/> implements methods that retrieve rdbms-specific persistence model definitions from mapping objects.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.RdbmsProviderCommandFactory">
            <summary>
            Creates <see cref="T:Remotion.Data.DomainObjects.Persistence.IStorageProviderCommand`1"/> instances for use with <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.RdbmsProvider"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.AllSelectedColumnsSpecification">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.AllSelectedColumnsSpecification"/> specifies that all possible columns should be selected. It emits a '*' into the
            projection list.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.ISelectedColumnsSpecification">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.ISelectedColumnsSpecification"/> defines the API for all implementations that specify how to select columns in a relational
            database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.IDbCommandBuilderFactory">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.IDbCommandBuilderFactory"/> defines the API for all implementations that are responsible to instantiate new 
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.IDbCommandBuilder"/> instances.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.IOrderedColumnsSpecification">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.IOrderedColumnsSpecification"/> defines the API for all implementations that specify the selected data ordering. 
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.OrderedColumnsSpecification">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.OrderedColumnsSpecification"/> defines that the selected data should be ordered by the given columns.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.SelectedColumnsSpecification">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.SelectedColumnsSpecification"/> specifies that all specified columns should be selected.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.SelectDbCommandBuilder">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.SelectDbCommandBuilder"/> builds a command that allows retrieving a set of records as specified by a given 
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.Specifications.IComparedColumnsSpecification"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.StorageProviderCommands.Factories.QueryCommandFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.StorageProviderCommands.Factories.QueryCommandFactory"/> is responsible for creating query commands for a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.StorageProviderCommands.Factories.SaveCommandFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.StorageProviderCommands.Factories.SaveCommandFactory"/> is responsible to reate save commands for a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.DbCommandBuilders.SqlDbCommandBuilderFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.DbCommandBuilders.SqlDbCommandBuilderFactory"/> creates SQL Server-specific <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.IDbCommandBuilder"/> instances.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.DbCommandBuilders.SqlDbCommandBuilderFactory.#ctor(Remotion.Data.DomainObjects.Persistence.Rdbms.ISqlDialect)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.DbCommandBuilders.SqlDbCommandBuilderFactory"/> class.
            </summary>
            <param name="sqlDialect">The SQL dialect.</param>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.UnionSelectDbCommandBuilder">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.UnionSelectDbCommandBuilder"/> builds a command that allows retrieving a set of records where a foreign key column
            matches a given <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> value from a set of unioned tables.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.RdbmsStorageEntityDefinitionProvider">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.RdbmsStorageEntityDefinitionProvider"/> returns a sequence of <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStorageEntityDefinition"/> for the given <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/> 
            instances.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.IRdbmsStorageEntityDefinitionProvider">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.IRdbmsStorageEntityDefinitionProvider"/> provides a strategy to get all <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStorageEntityDefinition"/> objects for a collection of 
            <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/> instances. Reimplement this interface to influence which entities are processed by <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ScriptGenerator"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.Model.IndexOrder">
            <summary>
            Defines whether an index is to be sorted ascending or descending.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.CompositeScriptBuilder">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.CompositeScriptBuilder"/> contains database-independent code to generate database-scripts for a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.IScriptBuilder">
            <summary>
            Defines an interface for classes generating script files for several <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStorageEntityDefinition"/>s.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.FileGenerator">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.FileGenerator"/> is responsible to write database scripts to the file system.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ForeignKeyConstraintScriptBuilder">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ForeignKeyConstraintScriptBuilder"/> contains database-independent code to generate scripts to create and drop foreign constraints in 
            a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ICommentScriptElementFactory">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ICommentScriptElementFactory"/> defines the API for all factory classes that are responsible to create comment script elements for a 
            relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.IForeignKeyConstraintScriptElementFactory">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.IForeignKeyConstraintScriptElementFactory"/> defines the API for all factory classes that are responsible to create foreign key 
            constraint script elements for a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.IIndexScriptElementFactory">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.IIndexScriptElementFactory"/> defines the API for all factory classes that are responsible to create index script elements for a 
            relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.IndexScriptBuilder">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.IndexScriptBuilder"/> contains database-independent code to generate scripts to create and drop indexes in a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.IScriptToStringConverter">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.IScriptToStringConverter"/> defines the API for all converter classes that are responsible to convert script statements to a string.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ISynonymScriptElementFactory`1">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.IViewScriptElementFactory`1"/> defines the API for all factory classes that are responsible to create synonym script elements for a 
            relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ITableScriptElementFactory">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ITableScriptElementFactory"/> defines the API for all factory classes that are responsible to create table script elements for a 
            relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.Script">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.Script"/> holds a setup- and teardown script for a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ScriptElements.BatchDelimiterStatement">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ScriptElements.BatchDelimiterStatement"/> adds a batch delimiter to a script-statement for a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ScriptElements.IScriptElement">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ScriptElements.IScriptElement"/> defines the API for all script-element classes.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ScriptElements.ScriptElementCollection">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ScriptElements.ScriptElementCollection"/> represents several <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ScriptElements.IScriptElement"/>s for a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ScriptElements.ScriptStatement">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ScriptElements.ScriptStatement"/> represents a script-statement for a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ScriptGenerator">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ScriptGenerator"/> is responsible to return a collection of <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.Script"/>-objects for all <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/>s
            grouped by their <see cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ScriptPair">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ScriptPair"/> holds a setup- and a teardown-script of a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ScriptToStringConverter">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ScriptToStringConverter"/> is responsible to convert the script statements, that are returned by the <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.IScriptBuilder"/>
            instance, to strings.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.SynonymScriptBuilder">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.SynonymScriptBuilder"/> contains database-independent code to generate scripts to create and drop synonyms in a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.TableScriptBuilder">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.TableScriptBuilder"/> contains database-independent code to generate scripts to create and drop tables in a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ViewScriptBuilder">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ViewScriptBuilder"/> contains database-independent code to generate scripts to create and drop views in a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.ISqlIndexDefinitionScriptElementFactory`1">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.ISqlIndexDefinitionScriptElementFactory`1"/> defines the API for all factory classes that are responsible to create 
            index script elements for a sql-server database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlCommentScriptElementFactory">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlCommentScriptElementFactory"/> ist responsible to generate a comment-script for a sql-server database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlDatabaseSelectionScriptElementBuilder">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlDatabaseSelectionScriptElementBuilder"/> ist responsible to generate a sql-statement to change the database context to the 
            specified  database for a sql-server database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlFilterViewScriptElementFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlTableViewScriptElementFactory"/> is responsible to create script-elements for filter-views in a sql-server database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlForeignKeyConstraintScriptElementFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlForeignKeyConstraintScriptElementFactory"/> is responsible to create script-elements for foreign-key constraints in a 
            sql-server database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlIndexDefinitionScriptElementFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlIndexDefinitionScriptElementFactory"/> is responsible to create script-elements for standard indexes in a sql-server database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlIndexScriptElementFactoryBase`1">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlIndexScriptElementFactoryBase`1"/> represents the base-class for all factory classes that are responsible to create new script 
            elements for creating indexes in a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlIndexScriptElementFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlIndexScriptElementFactory"/> is responsible to create script-elements for indexes in a sql-server database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.Model.ISqlIndexDefinitionVisitor">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.Model.ISqlIndexDefinitionVisitor"/> defines the API for all index-definition visitor implementations.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IIndexDefinitionVisitor">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IIndexDefinitionVisitor"/> defines the API for the index definition visitor implementations.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlPrimaryXmlIndexDefinitionScriptElementFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlPrimaryXmlIndexDefinitionScriptElementFactory"/> is responsible to create script-elements for primary-xml indexes in a 
            sql-server database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlSecondaryXmlIndexDefinitionScriptElementFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlSecondaryXmlIndexDefinitionScriptElementFactory"/> is responsible to create script-elements for secondary-xml indexes in a 
            sql-server database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlSynonymScriptElementFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlSynonymScriptElementFactory"/> is responsible to create script-elements for synonyms in a sql-server database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlTableScriptElementFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlTableScriptElementFactory"/> is responsible to create script-elements for tables in a sql-server database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlTableViewScriptElementFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlTableViewScriptElementFactory"/> is responsible to create script-elements for table-views in a sql-server database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlUnionViewScriptElementFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.SqlUnionViewScriptElementFactory"/> is responsible to create script-elements for union-views in a sql-server database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.Model.SqlIndexedColumnDefinition">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.Model.SqlIndexedColumnDefinition"/> represents an indexed-column in a SQL-server database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.Model.SqlIndexDefinition">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.Model.SqlIndexDefinition"/> represents an index on a table or view in a SQL Server database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.Model.SqlIndexDefinitionBase">
            <summary>
            Acts as a base class for classes defining SQL Server indexes.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IIndexDefinition">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IIndexDefinition"/> defines an index definition in a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.StoragePropertyDefinitionResolver">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.StoragePropertyDefinitionResolver"/> is responsible to get all <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStoragePropertyDefinition"/> instances for a 
            <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.IStoragePropertyDefinitionResolver">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.IStoragePropertyDefinitionResolver"/> defines the API for classes that calculate the <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStoragePropertyDefinition"/> 
            objects for a <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/>.
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.IStoragePropertyDefinitionResolver"/> only returns the <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStoragePropertyDefinition"/> instances, it doesn't create
            any.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.RdbmsStorageEntityDefinitionBase">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.RdbmsStorageEntityDefinitionBase"/> is the base-class for all entity definitions.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStorageEntityDefinition">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStorageEntityDefinition"/> defines the API for an entity definition for a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Model.IStorageEntityDefinition">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Model.IStorageEntityDefinition"/> defines the API for a storable entity definition.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.EntityNameDefinition">
            <summary>
            Defines the name of an entity in a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.ForeignKeyConstraintDefinitionFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.ForeignKeyConstraintDefinitionFactory"/> is responsible to create all <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ForeignKeyConstraintDefinition"/>s for a 
            <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.IForeignKeyConstraintDefinitionFactory">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.IForeignKeyConstraintDefinitionFactory"/> defines the API for all foreign key constraint definition factories.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.IStorageNameProvider">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.IStorageNameProvider"/> defines the API for classes providing names for RDBMS items. There is a default implementation
            called <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.ReflectionBasedStorageNameProvider"/> that retrieves the item names via reflection and custom attributes. Storage providers with
            specific naming constraints (eg., length limits, forbidden characters, etc.) can decorate (or reimplement) this interface to fulfill those
            constraints.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Linq.StorageSpecificExpressionResolver">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Linq.StorageSpecificExpressionResolver"/> is responsible to resolve expressions for a specific storage system.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.ClassDefinitionCollectionFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinitionCollectionFactory"/> is used to get the list of <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/>s for a set of types. It automatically
            sets base classes and derived classes correctly.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.IMappingObjectFactory">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Mapping.IMappingObjectFactory"/> defines the API for creating maping objects.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.PersistenceModelLoader">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Mapping.PersistenceModelLoader"/> applied the persistence model to a class hierarchy.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Model.IPersistenceModelLoader">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Model.IPersistenceModelLoader"/> defines the API for all persistence model loader implementations.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.ReflectionBasedMappingObjectFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Mapping.ReflectionBasedMappingObjectFactory"/> is used to create new mapping objects.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.CommonCollection">
            <summary>
            Base class for all collections of Remotion.Data.DomainObjects.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.CommonCollection.#ctor">
            <summary>
            Initializes a new <b>CommonCollection</b>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.CommonCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Remotion.Data.DomainObjects.CommonCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the entire <see cref="T:Remotion.Data.DomainObjects.CommonCollection"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.CommonCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the items of the <see cref="T:Remotion.Data.DomainObjects.CommonCollection"/> to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the items copied from <see cref="T:Remotion.Data.DomainObjects.CommonCollection"/>. The array must have zero-based indexing. Must not be <see langword="null"/>.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is smaller than 0.</exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="array"/> is not a one-dimensional array.<br/> -or- <br/>
              <paramref name="index"/> is greater than the current length of the array.<br/> -or- <br/>
              The number of items is greater than the available space from <paramref name="index"/> to the end of <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseGetObject(System.Int32)">
            <summary>
            Returns the object with a given index from the collection 
            </summary>
            <param name="index">The index of the object to return.</param>
            <returns>The object with the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is less than zero.<br/> -or- <br/>
              <paramref name="index"/> is equal to or greater than <see cref="P:Remotion.Data.DomainObjects.CommonCollection.Count"/>.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseGetObject(System.Object)">
            <summary>
            Returns the object with a given key from the collection.
            </summary>
            <param name="key">The key of the object to return. Must not be <see langword="null"/>.</param>
            <returns>The object with the given key, if the object is found; otherwise, <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseContainsKey(System.Object)">
            <summary>
            Determines whether the <see cref="T:Remotion.Data.DomainObjects.CommonCollection"/> contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Remotion.Data.DomainObjects.CommonCollection"/>. Must not be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Remotion.Data.DomainObjects.CommonCollection"/> contains the key; otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseContains(System.Object,System.Object)">
            <summary>
            Determines whether the <see cref="T:Remotion.Data.DomainObjects.CommonCollection"/> contains a specified value for a key.
            </summary>
            <param name="key">The key to located in the <see cref="T:Remotion.Data.DomainObjects.CommonCollection"/>. Must not be <see langword="null"/>.</param>
            <param name="value">The object that is expected as value for the specified key.</param>
            <returns><see langword="true"/> if the <see cref="T:Remotion.Data.DomainObjects.CommonCollection"/> contains the key and the object found for the key is equal to <paramref name="value"/>; 
            otherwise <see langword="false"/>.</returns>
            <remarks>This method locates the object with the given <paramref name="key"/> in the collection and compares it with the given <paramref name="value"/>. 
            <see cref="M:System.Object.Equals(System.Object)"/> is used for the comparison.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseAdd(System.Object,System.Object)">
            <summary>
            Adds an item with the specified key and value.
            </summary>
            <param name="key">A key of the item to add. The key must not be <see langword="null"/>. Must not be <see langword="null"/>.</param>
            <param name="value">The value of the item to add. The value must not be <see langword="null"/>. Must not be <see langword="null"/>.</param>
            <returns>The position into which the new item was inserted.</returns>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="key"/> is <see langword="null"/>.<br/> -or- <br/>
              <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseRemove(System.Object)">
            <summary>
            Removes the item with the specified key.
            </summary>
            <param name="key">The key of the item to remove. Must not be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseClear">
            <summary>
            Removes all objects from the collection.
            </summary>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseIndexOfKey(System.Object)">
            <summary>
            Returns the zero-based index of the item with a given key in the collection.
            </summary>
            <param name="key">The <paramref name="key"/> to locate in the collection.</param>
            <returns>The zero-based index of the item with the given <paramref name="key"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseInsert(System.Int32,System.Object,System.Object)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based <paramref name="index"/> at which the item should be inserted.</param>
            <param name="key">The key of the item to insert. Must not be <see langword="null"/>.</param>
            <param name="value">The <paramref name="value"/> of the item to add. The <paramref name="value"/> can be <see langword="null"/>.</param>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is less than zero.<br/> -or- <br/>
              <paramref name="index"/> is greater than <see cref="P:Remotion.Data.DomainObjects.CommonCollection.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">An item with the same <paramref name="key"/> already exists in the collection.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.CommonCollection.CheckIndexForInsert(System.String,System.Int32)">
            <summary>
            Checks the <paramref name="index"/> for an insert operation and throws an exception if it is invalid.
            </summary>
            <param name="argumentName">The <paramref name="argumentName"/> for throwing the exception.</param>
            <param name="index">The <paramref name="index"/> to check.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is less than zero.<br/> -or- <br/>
              <paramref name="index"/> is greater than <see cref="P:Remotion.Data.DomainObjects.CommonCollection.Count"/>.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.CommonCollection.CheckIndexForIndexer(System.String,System.Int32)">
            <summary>
            Checks the <paramref name="index"/> for access via the indexer and throws an exception if it is invalid.
            </summary>
            <param name="argumentName">The <paramref name="argumentName"/> for throwing the exception.</param>
            <param name="index">The <paramref name="index"/> to check.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is less than zero.<br/> -or- <br/>
              <paramref name="index"/> is equal to or greater than <see cref="P:Remotion.Data.DomainObjects.CommonCollection.Count"/>.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.CommonCollection.SetIsReadOnly(System.Boolean)">
            <summary>
            Sets the <see cref="P:Remotion.Data.DomainObjects.CommonCollection.IsReadOnly"/> property of the collection.
            </summary>
            <param name="isReadOnly">The new value for the <see cref="P:Remotion.Data.DomainObjects.CommonCollection.IsReadOnly"/> property of the collection.</param>
        </member>
        <member name="P:Remotion.Data.DomainObjects.CommonCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.CommonCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Remotion.Data.DomainObjects.CommonCollection"/> is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.CommonCollection.Count">
            <summary>
            Gets the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.CommonCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Remotion.Data.DomainObjects.CommonCollection"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.PropertyNotFoundRelationEndPointDefinition">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyNotFoundRelationEndPointDefinition"/> represents an invalid relation endpoint where the property could not be found.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.SortExpressions.SortedPropertySpecification">
            <summary>
            Defines how a property is to be sorted.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.SortExpressions.SortOrder">
            <summary>
            Defines how a property is to be sorted as part of a <see cref="T:Remotion.Data.DomainObjects.Mapping.SortExpressions.SortExpressionDefinition"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.ClassDefinitionValidator">
            <summary>
            Holds a read-only collection of class definition validation rules and exposes a Validate-method, which gets a list of 
            class definitions to validate. Each validation rule is applied to each class definition and for every rule which is invalid a 
            mapping validation result with the respective error message is returned.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.IClassDefinitionValidator">
            <summary>
            Defines the API for the class definition mapping validator.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.IPersistenceMappingValidationRule">
            <summary>
            Defines the API for the persistence mapping validation rules.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.IPersistenceMappingValidator">
            <summary>
            Defines the API for the persistence mapping validator.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.IPropertyDefinitionValidationRule">
            <summary>
            Defines the API for the property definition mapping validation rules.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.IPropertyDefinitionValidator">
            <summary>
            Defines the API for the property definition mapping validator.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.IRelationDefinitionValidator">
            <summary>
            Defines the API for the class definition mapping validator.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.ISortExpressionValidator">
            <summary>
            Defines the API for the sort expression mapping validator.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Logical.CheckForInvalidRelationEndPointsValidationRule">
            <summary>
            Validates that the given <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationDefinition"/> has no a <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyNotFoundRelationEndPointDefinition"/>
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.IRelationDefinitionValidatorRule">
            <summary>
            Defines the API for the relation definition mapping validator rules.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Logical.CheckForTypeNotFoundClassDefinitionValidationRule">
            <summary>
            Validates that the given<see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/> is no <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinitionForUnresolvedRelationPropertyType"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Logical.PropertyTypeIsSupportedValidationRule">
            <summary>
            Validates that a property type is supported.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Logical.RelationEndPointCombinationIsSupportedValidationRule">
            <summary>
            Validates that a relation has valid relation endpoint combinations.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Logical.SortExpressionIsValidValidationRule">
            <summary>
            Validates that specified sort expression for a relation is valid. 
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Logical.StorageGroupTypesAreSameWithinInheritanceTreeRule">
            <summary>
            Validates that the class has the same storage group type as its base class.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.IClassDefinitionValidationRule">
            <summary>
            Defines the API for the class definition mapping validation rules.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.IRdbmsStorageObjectFactory">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.IStorageObjectFactory"/> defines the API for all relational database management system storage object factories.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.IStorageObjectFactory">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.IStorageObjectFactory"/> defines the API for all storage object factories.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.RdbmsStorageEntityDefinitionFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.RdbmsStorageEntityDefinitionFactory"/> provides factory methods to create <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStorageEntityDefinition"/>s.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.IRdbmsStorageEntityDefinitionFactory">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.IRdbmsStorageEntityDefinitionFactory"/> defines the API for all entity definition factory implementations.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ForeignKeyConstraintDefinition">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ForeignKeyConstraintDefinition"/> represents a foreign key constraint in a relational database management system.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ITableConstraintDefinition">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ITableConstraintDefinition"/> defines the API for all table constraint definition implementations.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ITableConstraintDefinitionVisitor">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ITableConstraintDefinitionVisitor"/> defines the API for all table constraint definition visitor implementations.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.EmptyViewDefinition">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.EmptyViewDefinition"/> represents a non-existing entity.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ObjectIDStoragePropertyDefinition">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ObjectIDStoragePropertyDefinition"/> represents an <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> property that is stored as an ID column and a ClassID
            column.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.PrimaryKeyConstraintDefinition">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.PrimaryKeyConstraintDefinition"/> represents a primary key constraint in a relational database management system.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.ReflectionBasedStorageNameProvider">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.ReflectionBasedStorageNameProvider"/> provides methods to obtain names for RDBMS items (tables, columns, ...) using default names for
            system items ("ID", "ClassID", "Timestamp") and custom attributes (<see cref="T:Remotion.Data.DomainObjects.DBTableAttribute"/>, <see cref="T:Remotion.Data.DomainObjects.DBColumnAttribute"/>) for 
            user-defined names.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Validation.PropertyTypeIsSupportedByStorageProviderValidationRule">
            <summary>
            Validates that a persistent property type is supported by the storage provider.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Reflection.ClassDefinitionTypeIsSubclassOfDomainObjectValidationRule">
            <summary>
            Validates that a class definition type is a sub-class of domain object. 
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Reflection.RelationEndPointNamesAreConsistentValidationRule">
            <summary>
            Validates that a matching <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.BidirectionalRelationAttribute"/> is defined on both end points and that the corresponding defined opposite
            property names do match.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Reflection.ForeignKeyIsSupportedForCardinalityOfRelationPropertyValidationRule">
            <summary>
            Validates that a foreign key is not defined for a virtual relation end point.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.PersistenceMappingValidator">
            <summary>
            Holds a read-only collection of class definition validation rules and exposes a Validate-method, which gets a list of 
            class definitions to validate. Each validation rule is applied to each class definition and for every rule which is invalid a 
            mapping validation result with the respective error message is returned.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.PropertyDefinitionValidator">
            <summary>
            Holds a read-only collection of class definition validation rules and exposes a Validate-method, which gets a list of 
            class definitions to validate. Each validation rule is applied to all property definition for each class definition and for every rule which 
            is invalid a mapping validation result with the respective error message is returned.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Reflection.RelationEndPointTypesAreConsistentValidationRule">
            <summary>
            Validates that the relation end point property types are consistent.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.RelationDefinitionValidator">
            <summary>
            Holds a read-only collection of relation definition validation rules and exposes a Validate-method, which gets a list of 
            relation definitions to validate. Each validation rule is applied to each relation definition and for every rule which is invalid a 
            mapping validation result with the respective error message is returned.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.PropertyAccessorDataCache">
            <summary>
            Holds all <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData"/> object for a <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/>, providing fast access via full property name or
            declaring type and short (.NET) property name.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.SortExpressions.SortExpressionParser">
            <summary>
            Parses a <see cref="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.BidirectionalRelationAttribute.SortExpression"/> into a <see cref="T:Remotion.Data.DomainObjects.Mapping.SortExpressions.SortExpressionDefinition"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationPropertyFinder">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationPropertyFinder"/> is used to find all <see cref="T:Remotion.Reflection.IPropertyInformation"/> objects that constitute a 
            <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationEndPointDefinition"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.PropertyFinder">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.PropertyFinder"/> is used to find all <see cref="T:System.Reflection.PropertyInfo"/> objects that constitute a <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ClientTransactionScope">
            <summary>
            Manages a thread's <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.CurrentTransaction"/> in a scoped way. Optionally, it can also automatically roll back a transaction at the end
            of the scope.
            </summary>
            <remarks>
            <para>
            When an instance of this class is created via <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnterScope(Remotion.Data.DomainObjects.AutoRollbackBehavior)"/>, it sets the
            <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope"/> property to the newly created intance. The new instance stores the previous active scope, and
            when its <see cref="M:Remotion.Data.DomainObjects.ClientTransactionScope.Leave"/> method is called, it resets <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope"/> to that value (executing the 
            <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.AutoRollbackBehavior"/> as applicable). Employ a <c>using</c> block to associate a new <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> with the
            current thread and to restore the previous transaction (and execute the <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.AutoRollbackBehavior"/>) in a scoped way.
            </para>
            <para>
            If <see cref="M:Remotion.Data.DomainObjects.ClientTransactionScope.Leave"/> is not called (and the scope is not disposed of), the previous scope (and thus the previous transaction) is not
            automatically restored and the <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.AutoRollbackBehavior"/> is not executed; also, the chain of stored previously active transactions
            will become a memory leak unless <see cref="M:Remotion.Data.DomainObjects.ClientTransactionScope.ResetActiveScope"/> is used.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransactionScope.ResetActiveScope">
            <summary>
            Resets the active scope to <see langword="null"/>, causing the previously active scopes to be removed even if they haven't been left.
            </summary>
            <remarks>This method can be used to implement a custom scoping mechanism, as it circumvents the need of calling a scope's <see cref="M:Remotion.Data.DomainObjects.ClientTransactionScope.Leave"/>
            method to avoid memory leaks. It should only be used in very special scenarios, however.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransactionScope.EnterNullScope">
            <summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope"/> with an empty (<see langword="null"/>) <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ScopedTransaction"/> and makes
            it the current thread's <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope"/> constructor stores the previous <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope"/>. When this scope's
            <see cref="M:Remotion.Data.DomainObjects.ClientTransactionScope.Leave"/> method is called or the scope is disposed of, the previous scope is reactivated.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransactionScope.#ctor(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.AutoRollbackBehavior)">
            <summary>
            Associates a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> with the current thread, specifying the scope's automatic rollback behavior.
            </summary>
            <param name="scopedCurrentTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> object used as the current transaction until the scope is left.</param>
            <param name="autoRollbackBehavior">The automatic rollback behavior to be exhibited by this scope.</param>
            <remarks>
            <para>
            The <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope"/> constructor stores the previous <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope"/>. When this scope's
            <see cref="M:Remotion.Data.DomainObjects.ClientTransactionScope.Leave"/> method is called or the scope is disposed of, the previous scope is reactivated.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransactionScope.Leave">
            <summary>
            Resets <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.CurrentTransaction"/> to the value it had before this scope was instantiated and performs the
            <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.AutoRollbackBehavior"/>. This method is ignored when executed more than once.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransactionScope.Commit">
            <summary>
            Commits the transaction scoped by this object. This is equivalent to <c>ScopedTransaction.Commit()</c>.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.PersistenceException">Changes to objects from multiple storage providers were made.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.StorageProviderException">An error occurred while committing the changes to the data source.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransactionScope.Rollback">
            <summary>
            Performs a rollback on the transaction scoped by this object. This is equivalent to <c>ScopedTransaction.Rollback()</c>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.HasCurrentTransaction">
            <summary>
            Gets a value indicating if a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> is currently set as <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.CurrentTransaction"/>. 
            </summary>
            <remarks>
            Even if the value returned by <b>HasCurrentTransaction</b> is false, <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.CurrentTransaction"/> will return a
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. See <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.CurrentTransaction"/> for further information.
            </remarks>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.CurrentTransaction">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> associated with the current thread. 
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.CurrentTransaction"/> is being used, but no <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> has been
            associated with the current thread.</exception>
            <remarks>If there is no <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> associated with the current thread, this method throws an exception. It
            <b>does not</b> automatically initialize a new transaction. Use a <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope"/> to set the current thread's current
            transaction.</remarks>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope">
            <summary>
            Retrieves the active <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope"/> for the current thread.
            </summary>
            <value>The current thread's active scope, or <see langword="null"/> if no scope is currently active.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.AutoRollbackBehavior">
            <summary>
            Gets or sets a value indicating whether this scope will automatically call <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Rollback"/> on a transaction
            with uncommitted changed objects when the scope's <see cref="M:Remotion.Data.DomainObjects.ClientTransactionScope.Leave"/> method is invoked.
            </summary>
            <value>An <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.AutoRollbackBehavior"/> value indicating how the scope should behave when it is disposed and its transaction's changes
            have not been committed.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.ScopedTransaction">
            <summary>
            Gets the transaction this scope was created for.
            </summary>
            <value>The transaction passed to the scope's constructor or automatically created by the scope.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.Remotion#Data#ITransactionScope#ScopedTransaction">
            <summary>
            Gets the transaction managed by this scope.
            </summary>
            <value>The scoped transaction.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.Remotion#Data#ITransactionScope#IsActiveScope">
            <summary>
            Gets a flag that describes whether this is the active scope.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ChangeCachingCollectionDataDecorator">
            <summary>
            Decorates another <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> object and manages change state, keeping around a (lazily created) copy of the 
            original data until <see cref="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ChangeCachingCollectionDataDecorator.Commit"/> or <see cref="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ChangeCachingCollectionDataDecorator.Rollback"/> are called. The change state is cached, and the cache is invalidated by 
            modifying operations. An change state invalidation also triggers a notification via <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IVirtualEndPointStateUpdateListener"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ChangeCachingCollectionDataDecorator.OriginalData"/> is a <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.CopyOnWriteDomainObjectCollectionData"/> and is exposed only through a read-only wrapper. 
            As a  result, the  <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ChangeCachingCollectionDataDecorator"/> class is the only class that can change that original data.
            </para>
            <para>
            There are a few operations (e.g., <see cref="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ChangeCachingCollectionDataDecorator.SortOriginalAndCurrent(System.Comparison{Remotion.Data.DomainObjects.DomainObject})"/>) that do not invalidate the change state of this collection (unless the
            collection was already changed before) because they affect both the current and original data of this 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ChangeCachingCollectionDataDecorator"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ChangeCachingCollectionDataDecorator.RegisterOriginalItem(Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Registers the given <paramref name="domainObject"/> as an original item of this collection. This means the item is added to the 
            <see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ChangeCachingCollectionDataDecorator.OriginalData"/> collection, and it is also added to this <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ChangeCachingCollectionDataDecorator"/> collection. If the 
            <see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ChangeCachingCollectionDataDecorator.OriginalData"/> collection already contains the item, an exception is thrown. If this collection already contains the item, it is
            only added to the <see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ChangeCachingCollectionDataDecorator.OriginalData"/>. This operation may invalidate the state cache.
            </summary>
            <param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to be registered.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ChangeCachingCollectionDataDecorator.UnregisterOriginalItem(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Unregisters the item with the given <paramref name="objectID"/> as an original item of this collection. This means the item is removed from 
            the <see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ChangeCachingCollectionDataDecorator.OriginalData"/> collection, and it is also removed from this <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ChangeCachingCollectionDataDecorator"/> collection. If 
            the <see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ChangeCachingCollectionDataDecorator.OriginalData"/> collection does not contain the item, an exception is thrown. If this collection does not contain the item, it 
            is only removed from the <see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ChangeCachingCollectionDataDecorator.OriginalData"/>. This operation may invalidate the state cache.
            </summary>
            <param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to be unregistered.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ChangeCachingCollectionDataDecorator.SortOriginalAndCurrent(System.Comparison{Remotion.Data.DomainObjects.DomainObject})">
            <summary>
            Sorts the data in this <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ChangeCachingCollectionDataDecorator"/> and the data in the <see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ChangeCachingCollectionDataDecorator.OriginalData"/> collection
            using the given <paramref name="comparison"/>. This operation causes the change state to be invalidated if the original data is not the same
            as the current data.
            </summary>
            <param name="comparison"></param>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.DeleteCommand">
            <summary>
            Encapsulates all logic that is required to delete a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.ExpandedCommand">
            <summary>
            Represents the result of an <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.ExpandToAllRelatedObjects"/> operation. Similar to a 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.Commands.CompositeCommand"/>, but calling  <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.ExpandToAllRelatedObjects"/> again on this object will
            result in the same <see cref="T:Remotion.Data.DomainObjects.DataManagement.Commands.ExpandedCommand"/> as before.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.NopCommand">
            <summary>
            Implements a command that performs no operation.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.DataManagementCommandExtensions">
            <summary>
            Provides extension methods for <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.DataManagementCommandExtensions.NotifyAndPerform(Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand)">
            <summary>
            Raises all events and performs the action of the given <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand"/>.
            The order of events is as follows: <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.NotifyClientTransactionOfBegin"/>,
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.Begin"/>, <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.Perform"/>, 
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.NotifyClientTransactionOfEnd"/>, <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.End"/>.
            </summary>
            <param name="command">The command to be executed.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.DataManagementCommandExtensions.CanExecute(Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand)">
            <summary>
            Gets a value indicating whether this command can be executed (i.e., it has no associated exceptions).
            </summary>
            <value>
            	<see langword="true"/> if this instance command can be execute; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.DataManagementCommandExtensions.EnsureCanExecute(Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand)">
            <summary>
            Ensures the given command can be executed (i.e., it has no associated exceptions). If it can't, this method throws the first of the command's
            associated exceptions
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.IDataContainerMapReadOnlyView">
            <summary>
            Provides a read-only API to access the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> instances loaded into a <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainerMap"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.ICollectionEndPointDataManager">
            <summary>
            Defines an interface for classes storing the data for a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPointManager">
            <summary>
            Provides an API to manage the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPoint"/> instances loaded into a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.CollectionEndPointDataManager">
            <summary>
            Keeps the data of a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ICollectionEndPoint"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointExtensions">
            <summary>
            Provides extension methods for <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPoint"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RealObjectEndPoint">
            <summary>
            Represents an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ObjectEndPoint"/> that holds the foreign key in a relation. The foreign key is actually held by a 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> object, this end point implementation just delegates to the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPoint">
            <summary>
            Provides an abstract base implementation of non-transient relation end points that can be stored in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointManager"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointValueChecker">
            <summary>
            Provides common checks needed by relation end points when they are assigned new values.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.StateValueSet">
            <summary>
            Represents a set of <see cref="T:Remotion.Data.DomainObjects.StateType"/> values, allowing efficient <see cref="T:Remotion.Data.DomainObjects.StateType"/> matching via the <see cref="M:Remotion.Data.DomainObjects.DataManagement.StateValueSet.Matches(Remotion.Data.DomainObjects.StateType)"/> method.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualObjectEndPoint">
            <summary>
            Represents an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ObjectEndPoint"/> that does not hold the foreign key in a relation. The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualObjectEndPoint"/> is
            constructed by the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointManager"/> as an in-memory representation of the opposite of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RealObjectEndPoint"/> 
            holding the foreign key.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DomainObjectCollection">
            <summary>
            Represents a collection of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s.
            </summary>
            <remarks>
            <para>
            A derived collection with additional state should override at least the following methods:
            <list type="table">
              <listheader>
                <term>Method</term>
                <description>Description</description>
              </listheader>
              <item>
                <term><see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnAdding(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"/>, <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnAdded(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"/></term>
                <description>
                  These methods can be used to adjust internal state whenever a new item is added to the collection. 
                  The actual adjustment should be performed in the <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnAdded(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"/> method, 
                  because the operation could be cancelled after the <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnAdding(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"/> method has been called.
                </description>
              </item>
              <item>
                <term><see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnRemoving(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"/>, <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnRemoved(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"/></term>
                <description>
                  These methods can be used to adjust internal state whenever an item is removed from the collection. 
                  The actual adjustment should be performed in the <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnRemoved(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"/> method, 
                  because the operation could be cancelled after the <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnRemoving(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"/> method has been called. 
                  If the collection is cleared through the <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.Clear"/> method, <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnRemoving(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"/> is called for each item, then
                  the collection data is cleared, then <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnRemoved(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"/> is called for every item.
                </description>
              </item>
              <item>
                <term><see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnDeleting"/>, <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnDeleted"/></term>
                <description>
                  These methods can be used to clear all internal state or to unsubscribe from events whenever the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> 
                  holding this collection is deleted. The actual adjustment should be performed in the 
                  <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnDeleted"/> method, because the operation could be cancelled after the <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnDeleting"/> method has been called. 
                </description>
              </item>
              <item>
                <term><see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnReplaceData"/></term>
                <description>
                  This method is automatically called when the state of a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> that represents an end-point in a
                  bidirectional relation changes due to data management events. Implementations can use this method to re-initialize or adapt 
                  their internal state in reaction to these events. Since this method is called in the middle of a data management operation, special
                  constraints exist for its implementation. See the method's documentation for details.
                </description>
              </item>
            </list>
            </para>
            <para>
            When a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> is used to model a bidirectional 1:n relation, the contents of the collection is lazily loaded.
            This means that the contents is usually not loaded together with the object owning the collection, but later, eg., when the collection's items
            are first accessed. In a root transaction, the collection's contents is loaded by executing a query on the underlying data source.
            </para>
            <para>
            Due to lazy loading, it is possible (and common) to load items that are part of a collection and the full collection contents within different
            database transactions. If the underlying data source changes between two lazy load operations involving the same relation, that relation can
            get out-of-sync. See the <see cref="T:Remotion.Data.DomainObjects.DomainImplementation.BidirectionalRelationSyncService"/> for details. To ensure consistency, use a database transaction or some 
            similar concept so that the different read operations on the data source work on the same database state.
            </para>
            <para>
              Subclasses of <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> that keep state additional to that managed by re-store might need to take additional 
              considerations when the <see cref="T:Remotion.Data.DomainObjects.DomainImplementation.BidirectionalRelationSyncService"/> is used.
            </para>
            <para>
            To be notified on <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Commit"/> when the contents of a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> has changed while 
            calculations were made in a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>:
            <list type="bullet">
              <item>the object owning the collection should be included in the commit set, and</item>
              <item>the domain model should be programmed in such a way that all changes to the collection always cause that object to be included in the 
              respective commit set as well.</item>
            </list>
            This can be achieved by calling the <see cref="M:Remotion.Data.DomainObjects.DomainObject.MarkAsChanged"/> method in the respective places. That way, a 
            <see cref="T:Remotion.Data.DomainObjects.Persistence.ConcurrencyViolationException"/> will be raised on <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Commit"/> if the collection changes while the value 
            is being calculated.
            </para>
            <para>
            If a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> is used to model a bidirectional 1:n relation, consider the following about ordering:
            <list type="bullet">
              <item>
                When loading the collection from the database (via loading an object in a root transaction), the order of items is defined
                by the sort order of the relation (see <see cref="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.BidirectionalRelationAttribute.SortExpression"/>). If there is no sort
                order, the order of items is undefined.
              </item>
              <item>
                When committing a root transaction, the order of items in the collection is ignored; the next time the object is loaded
                in another root transaction, the sort order is again defined by the sort order (or undefined). Specifically, if only the
                order of items changed in a 1:n relation, the respective objects will not be written to the database at all, as they will not
                be considered to have changed.
              </item>
              <item>
                When loading the collection from a parent transaction via loading an object in a subtransaction, the order of items is the same
                as in the parent transaction.
              </item>
              <item>
                When committing a subtransaction, the order of items in the collection is propagated to the parent transaction. After the commit,
                the parent transaction's collection will have the items in the same order as the committed subtransaction.
              </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionEventRaiser">
            <summary>
            Provides an interface to clients requiring to raise <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> events from outside of the collection.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IAssociatableDomainObjectCollection">
            <summary>
            Defines APIs used by <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/> when it needs to transform a stand-alone <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> to
            an associated collection.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.CollectionData.IAssociatableDomainObjectCollection.TransformToAssociated(Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID,Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.IAssociatedCollectionDataStrategyFactory)">
            <summary>
            Transforms the collection to an associated collection. The collection will represent the data stored by the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ICollectionEndPoint"/>
            represented by <paramref name="endPointID"/>, and all modifications will be performed on that <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ICollectionEndPoint"/>.
            After this operation, the collection's data will be that of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID"/>.
            This interface is used by <see cref="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointSetCollectionCommand"/> and should usually not be called by framework
            users.
            </summary>
            <param name="endPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID"/> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ICollectionEndPoint"/> to associate with.</param>
            <param name="associatedCollectionDataStrategyFactory">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.IAssociatedCollectionDataStrategyFactory"/> to get the new data strategy from.</param>
            <returns>The <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> strategy used by the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> before it was associated.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.CollectionData.IAssociatableDomainObjectCollection.TransformToStandAlone">
            <summary>
            Transforms the collection to a stand-alone collection. The collection will get its own data store (with a fresh copy of the data that was held 
            by the collection) and will not be associated with an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ICollectionEndPoint"/> any longer.
            This interface is used by  <see cref="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointSetCollectionCommand"/> and should usually not be required by framework 
            users.
            </summary>
            <returns>The <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> strategy used by the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> before it was made stand-alone.</returns>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.CollectionData.IAssociatableDomainObjectCollection.AssociatedEndPointID">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ICollectionEndPoint"/> associated with this <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>, or <see langword="null"/> if
            this is a stand-alone collection.
            </summary>
            <value>The associated end point.</value>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.CreateDataStrategyForStandAloneCollection(Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData,System.Type,Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionEventRaiser)">
            <summary>
            Creates an <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> object for stand-alone collections. The returned object takes care of argument checks,
            required item checks, and event raising.
            </summary>
            <param name="dataStore">The data store to use for the collection.</param>
            <param name="requiredItemType">The required item type to use for the collection.</param>
            <param name="eventRaiser">The event raiser to use for raising events.</param>
            <returns>An instance of <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> that can be used for stand-alone collections.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.#ctor">
            <summary>
            Initializes a new <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.#ctor(System.Type)">
            <summary>
            Initializes a new <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> that only takes a certain <see cref="T:System.Type"/> as members.
            </summary>
            <param name="requiredItemType">The <see cref="T:System.Type"/> that are required for members.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.#ctor(Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> class with a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/>
            data storage strategy.
            </summary>
            <param name="dataStrategy">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> instance to use as the data storage strategy.</param>
            <remarks>
            <para>
            Derived classes must provide a constructor with the same signature. (The constructor is used for cloning as well as by relation end points.)
            </para>
            <para>
            Most members of <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> directly delegate to the given <paramref name="dataStrategy"/>, so it should 
            any special argument checks and event raising must be performed by the <paramref name="dataStrategy"/> itself.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.#ctor(System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DomainObject},System.Type)">
            <summary>
            Initializes a new <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> as a shallow copy of a given enumeration of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s.
            </summary>
            <param name="domainObjects">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s to copy. Must not be <see langword="null"/>.</param>
            <param name="requiredItemType">The required item type of the new collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="domainObjects"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.EnsureDataComplete">
            <summary>
            If this <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> represents a relation end point, ensures that the end point's data has been loaded, loading
            the data if necessary. If this <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> is a stand-alone collection, this method does nothing.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the items in this <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>.
            </summary>
            <returns>An enumerator for iterating over the items in this collection.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.ContainsObject(Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Determines whether the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> contains a reference to the specified <paramref name="domainObject"/>.
            </summary>
            <param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to locate in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>. Must not be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="domainObject"/> is found in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>; otherwise, false;</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="domainObject"/> is <see langword="null"/></exception>
            <remarks>
            <para>This method only returns <see langword="true"/> if the same reference is found in the collection. It returns <see langword="false"/> 
            when the collection contains no matching object or another object reference (from another <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>) with the same
            <see cref="P:Remotion.Data.DomainObjects.DomainObject.ID"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Contains(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Determines whether an item is in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>.
            </summary>
            <param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to locate in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>. Must not be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with the <paramref name="id"/> is found in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>; otherwise, false;</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.IndexOf(Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Returns the zero-based index of a given <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> in the collection.
            </summary>
            <param name="domainObject">The <paramref name="domainObject"/> to locate in the collection.</param>
            <returns>The zero-based index of the <paramref name="domainObject"/>, if found; otherwise, -1.</returns>
            <remarks>
            The method returns -1 if the <paramref name="domainObject"/> is <see langword="null"/>. If the collection holds a different item with the
            same <see cref="P:Remotion.Data.DomainObjects.DomainObject.ID"/> as <paramref name="domainObject"/>, -1 is returned as well. Use the 
            <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.IndexOf(Remotion.Data.DomainObjects.ObjectID)"/> overload taking an <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> to find the index in such cases.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.IndexOf(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Returns the zero-based index of a given <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> in the collection.
            </summary>
            <param name="id">The <paramref name="id"/> to locate in the collection.</param>
            <returns>The zero-based index of the <paramref name="id"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Add(Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Adds a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to the collection.
            </summary>
            <param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to add. Must not be <see langword="null"/>.</param>
            <returns>The zero-based index where the <paramref name="domainObject"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="domainObject"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Utilities.ArgumentTypeException"><paramref name="domainObject"/> is not of type <see cref="P:Remotion.Data.DomainObjects.DomainObjectCollection.RequiredItemType"/> or one of its derived types.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">
              <paramref name="domainObject"/> belongs to a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> that is different from the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> 
              managing this collection. 
              This applies only to <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>s that represent a relation.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.AddRange(System.Collections.IEnumerable)">
            <summary>
            Adds a range of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances to this collection, calling <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.Add(Remotion.Data.DomainObjects.DomainObject)"/> for each single item.
            </summary>
            <param name="domainObjects">The domain objects to add.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="domainObjects"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Utilities.ArgumentItemNullException">The range contains a <see langword="null"/> element.</exception>
            <exception cref="T:Remotion.Utilities.ArgumentItemDuplicateException">The range contains a duplicate element.</exception>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
            <exception cref="T:Remotion.Utilities.ArgumentItemTypeException">An element in the range is not of type <see cref="P:Remotion.Data.DomainObjects.DomainObjectCollection.RequiredItemType"/> or one of its derived types.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">
              An element in the range belongs to a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> that is different from the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> 
              managing this collection. 
              This applies only to <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>s that represent a relation.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> from the collection.
            </summary>
            <param name="index">The index of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is less than zero.<br/> -or- <br/>
              <paramref name="index"/> is equal to or greater than the number of items in the collection.
            </exception>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Remove(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Removes a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> from the collection.
            </summary>
            <param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to remove. Must not be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Remove(Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Removes a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> from the collection.
            </summary>
            <returns>True if the collection contained the given object when the method was called; false otherwise.
            </returns>
            <remarks>
              If <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.Remove(Remotion.Data.DomainObjects.DomainObject)"/> is called with an object that is not in the collection, no exception is thrown, and no events are raised. 
            </remarks>
            <param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to remove. Must not be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="domainObject"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="domainObject"/> has the same <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> as an object in this collection, but it is a 
            different object reference. You can use <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.Remove(Remotion.Data.DomainObjects.ObjectID)"/> to remove an object if you only know its <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>.</exception>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">
              <paramref name="domainObject"/> belongs to a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> that is different from the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> 
              managing this collection. 
              This applies only to <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>s that represent a relation.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Insert(System.Int32,Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Inserts a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based <paramref name="index"/> at which the item should be inserted.</param>
            <param name="domainObject">The <paramref name="domainObject"/> to add. Must not be <see langword="null"/>.</param>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is less than zero.<br/> -or- <br/>
              <paramref name="index"/> is greater than the number of items in the collection.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="domainObject"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">
              The <paramref name="domainObject"/> already exists in the collection.<br/> -or- <br/>
              <paramref name="domainObject"/> is not of type <see cref="P:Remotion.Data.DomainObjects.DomainObjectCollection.RequiredItemType"/> or one of its derived types.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">
              <paramref name="domainObject"/> belongs to a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> that is different from the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> 
              managing this collection. 
              This applies only to <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>s that represent a relation.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Sort(System.Comparison{Remotion.Data.DomainObjects.DomainObject})">
            <summary>
            Sorts this collection using the specified <see cref="T:System.Comparison`1"/> without triggering bidirectional changes or raising any modification
            events apart from <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnReplaceData"/>. The operation causes the associated <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/> to become touched, and it 
            might affect the change state of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/> and the owning object.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Clone">
            <summary>
            Creates a shallow copy of this collection, i.e. a collection of the same type and with the same contents as this collection. 
            No <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Adding"/>, <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Added"/>, <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removing"/>, or <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removed"/> 
            events are raised during the process of cloning.
            </summary>
            <returns>The cloned collection.</returns>
            <remarks>
            <para>
            The clone is always a stand-alone collection, even when the source was associated with a collection end point.
            </para>
            <para>
            If this collection is read-only, the clone will be read-only, too. Otherwise, the clone will not be read-only.
            </para>
            <para>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> returned by this method contains the same <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances as the original
            collection, it does not reflect any changes made to the original collection after cloning, and changes made to it are not reflected upon
            the original collection.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Clone(System.Boolean)">
            <summary>
            Creates a shallow copy of this collection, i.e. a collection of the same type and with the same contents as this collection, while allowing
            to specify whether the clone should be read-only or not. 
            No <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Adding"/>, <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Added"/>, <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removing"/>, or <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removed"/> 
            events are raised during the process of cloning.
            </summary>
            <param name="makeCloneReadOnly">Specifies whether the cloned collection should be read-only.</param>
            <returns>The cloned collection.</returns>
            <remarks>
            <para>
            The clone is always a stand-alone collection, even when the source was associated with a collection end point.
            </para>
            <para>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> returned by this method contains the same <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances as the original
            collection, it does not reflect any changes made to the original collection after cloning, and changes made to it are not reflected upon
            the original collection.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnAdding(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Adding"/> event.
            </summary>
            <param name="args">A <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnAdded(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Added"/> event.
            </summary>
            <param name="args">A <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs"/> object that contains the event data.</param>
            <remarks>This method can be used to adjust internal state whenever a new item is added to the collection.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnRemoving(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removing"/> event.
            </summary>
            <param name="args">A <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs"/> object that contains the event data.</param>
              If the collection is cleared through the <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.Clear"/> method <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnRemoving(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"/> 
              is called for every item.
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnRemoved(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removed"/> event.
            </summary>
            <param name="args">A <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs"/> object that contains the event data.</param>
            <remarks>
              This method can be used to adjust internal state whenever an item is removed from the collection.
              If the collection is cleared through the <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.Clear"/> method <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnRemoved(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"/> 
              is called for every item.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnDeleting">
            <summary>
            The method is invoked immediately before the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> holding this collection is deleted if the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> represents a one-to-many relation.
            </summary>
            <remarks>
            During the delete process of a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> all <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s are removed from the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> without notifying other objects.
            Before all <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s will be removed the <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnDeleting"/> method is invoked.
            To clear any internal state or to unsubscribe from events whenever the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> holding this collection is deleted 
            use the <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnDeleted"/> method, because the operation could be cancelled after the <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnDeleting"/> method has been called.<br/><br/>
            <note type="inotes">Inheritors overriding this method must not throw an exception from the override.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnDeleted">
            <summary>
            The method is invoked after the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> holding this collection is deleted if the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> represents a one-to-many relation.
            </summary>
            <remarks>
            During the delete process of a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> all <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s are removed from the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> without notifying other objects.
            After all <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s have been removed the <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnDeleted"/> method is invoked 
            to allow derived collections to adjust their internal state or to unsubscribe from events of contained <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s.<br/><br/>
            <note type="inotes">Inheritors overriding this method must not throw an exception from the override.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnReplaceData">
            <summary>
            Called when the data of this collection is changed due to an operation that is not covered by <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnAdded(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"/>, <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnRemoved(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"/>,
            or <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnDeleted"/>. For example, such an operation could be that the a collection associated with a relation is rolled back, reloaded, 
            or synchronized with its opposite end-points. Override this method to react to the contents of this collection changing due to such an operation.
            </summary>
            <remarks>
            <para>
            <note type="inotes">
            This method must not throw an exception, and its implementation must take care when accessing or modifying any data in the current 
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> because the transaction might be in the middle of a data management operation.
            </note>
            </para>
            </remarks>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe). Always
            returns <see langword="false" />.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size. Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="E:Remotion.Data.DomainObjects.DomainObjectCollection.Adding">
            <summary>
            Occurs before an object is added to the collection.
            </summary>
        </member>
        <member name="E:Remotion.Data.DomainObjects.DomainObjectCollection.Added">
            <summary>
            Occurs after an object is added to the collection.
            </summary>
        </member>
        <member name="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removing">
            <summary>
            Occurs before an object is removed to the collection.
            </summary>
            <remarks>
            This event is not raised if the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> holding the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> is being deleted. 
            The <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Deleting"/> event is raised instead.
            </remarks>
        </member>
        <member name="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removed">
            <summary>
            Occurs after an object is removed to the collection.
            </summary>
            <remarks>
            This event is not raised if the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> holding the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> has been deleted. 
            The <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Deleted"/> event is raised instead.
            </remarks>
        </member>
        <member name="E:Remotion.Data.DomainObjects.DomainObjectCollection.Deleting">
            <summary>
            Occurs before the object holding this collection is deleted if this <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> represents a one-to-many relation.
            </summary>
        </member>
        <member name="E:Remotion.Data.DomainObjects.DomainObjectCollection.Deleted">
            <summary>
            Occurs after the object holding this collection is deleted if this <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> represents a one-to-many relation.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>.
            </returns>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether this collection is read-only.
            </summary>
            <returns>true if this collection is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.RequiredItemType">
            <summary>
            Gets the required <see cref="T:System.Type"/> for all elements of the collection. If the collection is read-only, this is <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.AssociatedEndPointID">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ICollectionEndPoint"/> associated with this <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>, or <see langword="null"/> if
            this is a stand-alone collection.
            </summary>
            <value>The associated end point.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with a given <paramref name="index"/> in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is less than zero.<br/> -or- <br/>
              <paramref name="index"/> is equal to or greater than the number of items in the collection.
            </exception>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="value"/> is not a derived type of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> and of type <see cref="P:Remotion.Data.DomainObjects.DomainObjectCollection.RequiredItemType"/> or a derived type.
            </exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="value"/> is already part of the collection.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.Item(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with a given <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> from the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>.
            </summary>
            <remarks>The indexer returns <see langword="null"/> if the given <paramref name="id"/> was not found.</remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ICollectionEndPointChangeDetectionStrategy">
            <summary>
            Provides an interface for classes determining whether a collection end point has changed. This is used by 
            <see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint.HasChanged"/>,
            and its concrete implementation is installed by <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.DomainObjectCollectionDataExtensions">
            <summary>
            Provides extension methods for working with <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> instances.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IndirectDomainObjectCollectionEventRaiser">
            <summary>
            Implements the <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionEventRaiser"/> interface by delegating to another implementation of 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionEventRaiser"/>. This is useful when the event raiser needs to be changed after e.g. the 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.EventRaisingCollectionDataDecorator"/> has been created.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.ReadOnlyCollectionDataDecorator">
            <summary>
            This class acts as a read-only decorator for another <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> object. Every modifying method 
            of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> interface will throw an <see cref="T:System.InvalidOperationException"/> when invoked on this class.
            Modifications are still possible via the <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> passed into the <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.ReadOnlyCollectionDataDecorator"/>'s
            constructor.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.DomainObjectCollectionFactory">
            <summary>
            Creates <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> instances via reflection for use with the data management classes (mostly 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/>).
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.DomainObjectCollectionFactory.CreateCollection(System.Type,Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData)">
            <summary>
            Creates a collection of the given <paramref name="collectionType"/> via reflection, passing in the given 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> object as the data storage strategy.
            The collection must provide a constructor that takes a single parameter of type <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/>.
            </summary>
            <param name="collectionType">The type of the collection to create.</param>
            <param name="dataStrategy">The data strategy to use for the new collection.</param>
            <returns>An instance of the given <paramref name="collectionType"/>.</returns>
            <exception cref="T:System.MissingMethodException">The <paramref name="collectionType"/> does not provide a constructor taking
            a single parameter of type <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.DomainObjectCollectionFactory.CreateCollection(System.Type,System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DomainObject},System.Type)">
            <summary>
            Creates a stand-alone collection of the given <paramref name="collectionType"/> via reflection. The collection is initialized to have
            the given <paramref name="requiredItemType"/> and initial <paramref name="content"/>.
            The collection must provide a constructor that takes a single parameter of type <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/>.
            </summary>
            <param name="collectionType">The type of the collection to create.</param>
            <param name="content">The initial content of the collection. This must match <paramref name="requiredItemType"/> and it cannot contain
            duplicates or <see langword="null"/> values.</param>
            <param name="requiredItemType">The required item type of the collection.</param>
            <returns>A stand-alone instance of <paramref name="collectionType"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.DomainObjectCollectionFactory.CreateCollection(System.Type,System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DomainObject})">
            <summary>
            Creates a stand-alone collection of the given <paramref name="collectionType"/> via reflection, inferring the collection's required item
            type from the <paramref name="collectionType"/>. The collection is initialized to have the given initial <paramref name="content"/>.
            The collection must provide a constructor that takes a single parameter of type <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/>.
            </summary>
            <param name="collectionType">The type of the collection to create.</param>
            <param name="content">The initial content of the collection. This must not contain duplicates or <see langword="null"/> values.</param>
            <returns>A stand-alone instance of <paramref name="collectionType"/>.</returns>
            <remarks>
            The required item type of the collection is inferred from its interfaces: if an implementation of <see cref="T:System.Collections.Generic.IEnumerable`1"/> is found
            in the collection's list of interfaces, that implementation's type parameter is used as the required item type. If none is found,
            no required item type is set.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.DomainObjectCollectionFactory.CreateReadOnlyCollection(System.Type,System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DomainObject})">
            <summary>
            Creates a stand-alone read-only collection of the given <paramref name="collectionType"/> via reflection. Read-onlyness is enforced by a
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.ReadOnlyCollectionDataDecorator"/>. The collection is initialized to have the given initial <paramref name="content"/>.
            The collection must provide a constructor that takes a single parameter of type <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/>.
            </summary>
            <param name="collectionType">The type of the collection to create.</param>
            <param name="content">The initial content of the collection. This must not contain duplicates or <see langword="null"/> values.</param>
            <returns>A stand-alone read-only instance of <paramref name="collectionType"/>.</returns>
            <remarks>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> returned is read-only, its content cannot be changed.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.ModificationCheckingCollectionDataDecorator">
            <summary>
            Implements a decorator for <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> that performs semantic checks on the arguments passed to 
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.CollectionData.ModificationCheckingCollectionDataDecorator.Insert(System.Int32,Remotion.Data.DomainObjects.DomainObject)"/>, <see cref="M:Remotion.Data.DomainObjects.DataManagement.CollectionData.ModificationCheckingCollectionDataDecorator.Replace(System.Int32,Remotion.Data.DomainObjects.DomainObject)"/>, and <see cref="M:Remotion.Data.DomainObjects.DataManagement.CollectionData.ModificationCheckingCollectionDataDecorator.Remove(Remotion.Data.DomainObjects.DomainObject)"/>. Those checks are
            performed in a decorator so that they lead to exceptions before any events are raised by <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.EventRaisingCollectionDataDecorator"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.VirtualEndPoints.CollectionEndPoints.EndPointDelegatingCollectionData">
            <summary>
            Implements the <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> by forwarding all requests to an implementation of 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ICollectionEndPoint"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.DomainObjectCollectionData">
            <summary>
            Provides an an encapsulation of the data stored inside a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>, implementing the 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> interface. The data is stored by means of two collections, an ordered <see cref="T:System.Collections.Generic.List`1"/> of 
            <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>s and a <see cref="T:System.Collections.Generic.Dictionary`2"/> mapping the IDs to <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances.
            This class does not perform any fancy argument checking, use <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.ModificationCheckingCollectionDataDecorator"/> for that. It does, however,
            ensure that no inconsistent state can be created, even when calling its members with invalid arguments.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.EventRaisingCollectionDataDecorator">
            <summary>
            Decorates <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> by raising events whenever the inner collection is modified. The events are raised via
            an <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionEventRaiser"/> instance before and after the modification.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.InitializedEventDomainObjectTransactionContextDecorator">
            <summary>
            Provides an implementation of the <see cref="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext"/> interface that is returned while the 
            <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnReferenceInitializing"/> is run. It does not allow access to properties and methods that read or modify
            the state of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> in the associated <see cref="P:Remotion.Data.DomainObjects.Infrastructure.InitializedEventDomainObjectTransactionContextDecorator.ClientTransaction"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext">
            <summary>
            Represents the context of a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> that is associated with a specific <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.MarkAsChanged">
            <summary>
            Marks the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> as changed. If the object's previous <see cref="P:Remotion.Data.DomainObjects.DomainObject.State"/> was <see cref="F:Remotion.Data.DomainObjects.StateType.Unchanged"/>, it
            will be <see cref="F:Remotion.Data.DomainObjects.StateType.Changed"/> after this method has been called.
            </summary>
            <exception cref="T:System.InvalidOperationException">This object is not in state <see cref="F:Remotion.Data.DomainObjects.StateType.Changed"/> or <see cref="F:Remotion.Data.DomainObjects.StateType.Unchanged"/>.
            New or deleted objects cannot be marked as changed.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in the associated <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The object cannot be used in the associated transaction.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.EnsureDataAvailable">
            <summary>
            Ensures that the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>'s data has been loaded. If it hasn't, this method causes the object's data to be loaded.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in the associated <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The object cannot be used in the associated transaction.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.ObjectsNotFoundException">No data could be loaded for the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> because the object was not
            found in the data source.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.Execute``1(System.Func{Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.ClientTransaction,``0})">
            <summary>
            Executes the specified delegate in the context of the <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction"/> associated with this 
            <see cref="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext"/>, returning the result of the delegate. While the
            delegate is being executed, the <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction"/> is made the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/> transaction.
            </summary>
            <typeparam name="T">The type of the value returned by the delegate.</typeparam>
            <param name="func">The delegate to be executed. The delegate gets the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> and the <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction"/>
            associated with this <see cref="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext"/> as its parameters.
            </param>
            <returns>The result of <paramref name="func"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.Execute(System.Action{Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.ClientTransaction})">
            <summary>
            Executes the specified delegate in the context of the <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction"/> associated with this 
            <see cref="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext"/>. While the
            delegate is being executed, the <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction"/> is made the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/> transaction.
            </summary>
            <param name="action">The delegate to be executed. The delegate gets the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> and the <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction"/>
            associated with this <see cref="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext"/> as its parameters.</param>
        </member>
        <member name="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction">
            <summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction"/> this context is associated with.
            </summary>
            <value>The client transaction.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.State">
            <summary>
            Gets the current state of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> in the associated <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction"/>.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The object cannot be used in the given transaction.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.IsInvalid">
            <summary>
            Gets a value indicating the invalid status of the object in the associated <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction"/>.
            </summary>
            <remarks>
            For more information why and when an object becomes invalid see <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/>.
            </remarks>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The object cannot be used in the associated transaction.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.Timestamp">
            <summary>
            Gets the timestamp used for optimistic locking when the object is committed to the database.
            </summary>
            <value>The timestamp of the object.</value>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in the associated <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The object cannot be used in the given transaction.</exception>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.NullClientTransactionListener">
            <summary>
            <see cref="T:Remotion.INullObject"/> implementation of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.DomainObjectStateCache">
            <summary>
            Implements <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener"/> in order to cache the values of <see cref="P:Remotion.Data.DomainObjects.DomainObject.State"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.DomainObjectStateCache.GetState(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.StateType"/> value for the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with the given <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> from the cache; recalculating 
            it if the cache does not have an up-to-date <see cref="T:Remotion.Data.DomainObjects.StateType"/> value.
            </summary>
            <param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> whose state to get.</param>
            <returns>The state of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with the given <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>. If no such object has been loaded, 
            <see cref="F:Remotion.Data.DomainObjects.StateType.NotLoadedYet"/> is returned.</returns>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.RootClientTransactionComponentFactory">
            <summary>
            Creates all parts necessary to construct a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> with root-transaction semantics.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.NewObjectHierarchyInvalidationClientTransactionListener">
            <summary>
            Propagates <see cref="F:Remotion.Data.DomainObjects.StateType.Invalid"/> state for New objects over the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> hierarchy.
            </summary>
            <remarks>
            <para>
            When a new object is created (i.e., its <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> is registered), it is automatically invalidated in all parent transactions
            of the respective transaction.
            </para>
            <para>
            When a new object is discarded (i.e., its <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> is unregistered), it is automatically invalidated in all subtransactions 
            of the respective transaction.
            </para>
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.SubClientTransactionComponentFactory">
            <summary>
            Creates all parts necessary to construct a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> with sub-transaction semantics.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.LinqPropertyRedirectionAttribute">
            <summary>
            Allows a property or method to be redirected to a different property in the scope of LINQ queries. To redirect a property, apply the attribute 
            to the property's get accessor.
            </summary>
            <remarks>
            Usually, LINQ queries can only be performed on properties that are mapped to a database columns. Trying to use them on
            columns marked with the <see cref="T:Remotion.Data.DomainObjects.StorageClassNoneAttribute"/> will cause an exception. Sometimes, however, it can be
            useful to enable LINQ queries on such properties if they can be redirected to another property that is mapped to a column.
            That way, a public unmapped property that acts as a wrapper for a protected mapped property can still be used in queries.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.LinqPropertyRedirectionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.LinqPropertyRedirectionAttribute"/> class.
            </summary>
            <param name="declaringType">The declaring type of the property to which the attribute's target is redirected. The property must
            exist within the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> holding the redirected attribute (or one of its persistent mixins).</param>
            <param name="mappedPropertyName">The name of the property to which the attribute's target is redirected.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.LinqPropertyRedirectionAttribute.GetMappedProperty">
            <summary>
            Gets the property to which the attribute's target is redirected, throwing an exception if the property does not exist.
            </summary>
            <returns>The property to which the attribute's target is redirected.</returns>
            <exception cref="T:Remotion.Data.DomainObjects.Mapping.MappingException">The property does not exist.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.LinqPropertyRedirectionAttribute.DeclaringType">
            <summary>
            Gets the declaring type of the property to which the attribute's target is redirected
            </summary>
            <value>The declaring type of the property to which the attribute's target is redirected.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.LinqPropertyRedirectionAttribute.MappedPropertyName">
            <summary>
            Gets the name of the property to which the attribute's target is redirected.
            </summary>
            <value>The name of the property to which the attribute's target is redirected.</value>
        </member>
        <member name="T:Remotion.Data.DomainObjects.LinqPropertyRedirectionAttribute.MethodCallTransformer">
            <summary>
            Implements the transformations required to map a member onto another property.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1.#ctor(Remotion.Linq.Parsing.Structure.IQueryParser,Remotion.Linq.IQueryExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1"/> class.
            </summary>
            <param name="queryParser">The <see cref="T:Remotion.Linq.Parsing.Structure.IQueryParser"/> used to parse queries. Specify an instance of 
            <see cref="T:Remotion.Linq.Parsing.Structure.QueryParser"/> for default behavior. See also <see cref="M:Remotion.Linq.Parsing.Structure.QueryParser.CreateDefault"/>.</param>
            <param name="executor">The <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor"/> that is used for the queries.</param>
            <remarks>
            <para>
            This constructor marks the default entry point into a LINQ query for <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances. It is normally used to define
            the data source on which the first <c>from</c> expression operates.
            </para>
            <para>
            The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryFactory"/> class wraps this constructor and provides some additional support, so it should usually be preferred to a
            direct constructor call.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1.#ctor(Remotion.Linq.QueryProviderBase,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1"/> class. This is an infrastructure constructor.
            </summary>
            <param name="provider">The provider to be used for querying.</param>
            <param name="expression">The expression encapsulated by this <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1"/> instance.</param>
            <remarks>
            This constructor is used by the standard query methods defined in <see cref="T:System.Linq.Queryable"/> when a LINQ query is constructed.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor">
            <summary>
            Provides an implementation of <see cref="T:Remotion.Linq.IQueryExecutor"/> for <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> queries.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.#ctor(Remotion.Data.DomainObjects.Mapping.ClassDefinition,Remotion.Linq.SqlBackend.SqlPreparation.ISqlPreparationStage,Remotion.Linq.SqlBackend.MappingResolution.IMappingResolutionStage,Remotion.Linq.SqlBackend.SqlGeneration.ISqlGenerationStage,Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.IStorageTypeInformationProvider,Remotion.Utilities.TypeConversionProvider)">
            <summary>
            Initializes a new instance of this <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor"/> class.
            </summary>
            <param name="startingClassDefinition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> type the query is started 
              with. This determines the <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"/> used for the query.</param>
            <param name="preparationStage">The <see cref="T:Remotion.Linq.SqlBackend.SqlPreparation.ISqlPreparationStage"/> provides methods to prepare the <see cref="T:Remotion.Linq.SqlBackend.SqlStatementModel.SqlStatement"/> based on a <see cref="T:Remotion.Linq.QueryModel"/>.</param>
            <param name="resolutionStage">The <see cref="T:Remotion.Linq.SqlBackend.MappingResolution.IMappingResolutionStage"/> provides methods to resolve the expressions in the <see cref="T:Remotion.Linq.SqlBackend.SqlStatementModel.SqlStatement"/>.</param>
            <param name="generationStage">The <see cref="T:Remotion.Linq.SqlBackend.SqlGeneration.ISqlGenerationStage"/> provides methods to generate sql text for the given <see cref="T:Remotion.Linq.SqlBackend.SqlStatementModel.SqlStatement"/>.</param>
            <param name="storageTypeInformationProvider">The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.IStorageTypeInformationProvider"/> provides methods to determine the storage-specific type for a domain object property type.</param>
            <param name="typeConversionProvider">The <see cref="P:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.TypeConversionProvider"/> provides functionality to get the <see cref="T:System.ComponentModel.TypeConverter"/> for a <see cref="T:System.Type"/> and to convert a value from a source <see cref="T:System.Type"/> into a destination <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.ExecuteScalar``1(Remotion.Linq.QueryModel)">
            <summary>
            Creates and executes a given <see cref="T:Remotion.Linq.QueryModel"/> as an <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> using the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>'s
            <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.QueryManager"/>. The query is executed as a scalar query.
            </summary>
            <param name="queryModel">The generated <see cref="T:Remotion.Linq.QueryModel"/> of the LINQ query.</param>
            <returns>
            The result of the executed query, cast to <typeparam name="T"/>.
            </returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.ExecuteSingle``1(Remotion.Linq.QueryModel,System.Boolean)">
            <summary>
            Creates and executes a given <see cref="T:Remotion.Linq.QueryModel"/> as an <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> using the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>'s
            <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.QueryManager"/>. The query is executed as a collection query, and its result set is expected in its result set.
            </summary>
            <param name="queryModel">The generated <see cref="T:Remotion.Linq.QueryModel"/> of the LINQ query.</param>
            <param name="returnDefaultWhenEmpty">If <see langword="true"/>, the executor returns a default value when the result set is empty; 
            if <see langword="false"/>, it throws an <see cref="T:System.InvalidOperationException"/> when its result set is empty.</param>
            <returns>
            The result of the executed query, cast to <typeparam name="T"/>.
            </returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.ExecuteCollection``1(Remotion.Linq.QueryModel)">
            <summary>
            Creates and executes a given <see cref="T:Remotion.Linq.QueryModel"/> as an <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> using the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>'s
            <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.QueryManager"/>. The query is executed as a collection query.
            </summary>
            <param name="queryModel">The generated <see cref="T:Remotion.Linq.QueryModel"/> of the LINQ query.</param>
            <returns>
            The result of the executed query as an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.CreateQuery(System.String,Remotion.Linq.QueryModel,System.Collections.Generic.IEnumerable{Remotion.Linq.EagerFetching.FetchQueryModelBuilder},Remotion.Data.DomainObjects.Queries.Configuration.QueryType)">
            <summary>
            Creates an <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> object based on the given <see cref="T:Remotion.Linq.QueryModel"/>.
            </summary>
            <param name="id">The identifier for the linq query.</param>
            <param name="queryModel">The <see cref="T:Remotion.Linq.QueryModel"/> for the given query.</param>
            <param name="fetchQueryModelBuilders">The <see cref="T:Remotion.Linq.EagerFetching.FetchQueryModelBuilder"/> instances for the fetch requests to be executed together with 
            the query.</param>
            <param name="queryType">The type of query to create.</param>
            <returns>
            An <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> object corresponding to the given <paramref name="queryModel"/>.
            </returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.CreateQuery(System.String,Remotion.Linq.QueryModel,System.Collections.Generic.IEnumerable{Remotion.Linq.EagerFetching.FetchQueryModelBuilder},Remotion.Data.DomainObjects.Queries.Configuration.QueryType,Remotion.Data.DomainObjects.Mapping.ClassDefinition)">
            <summary>
            Creates an <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> object based on the given <see cref="T:Remotion.Linq.QueryModel"/>.
            </summary>
            <param name="id">The identifier for the linq query.</param>
            <param name="queryModel">The <see cref="T:Remotion.Linq.QueryModel"/> for the given query.</param>
            <param name="fetchQueryModelBuilders">The <see cref="T:Remotion.Linq.EagerFetching.FetchQueryModelBuilder"/> instances for the fetch requests to be executed together with 
            the query.</param>
            <param name="queryType">The type of query to create.</param>
            <param name="classDefinitionOfResult">The class definition of the result objects to be returned by the query. This is used to obtain the
            storage provider to execute the query and to resolve the relation properties of the fetch requests.</param>
            <returns>
            An <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> object corresponding to the given <paramref name="queryModel"/>.
            </returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.CreateSqlCommand(Remotion.Linq.QueryModel,System.Boolean)">
            <summary>
            Creates a SQL query from a given <see cref="T:Remotion.Linq.QueryModel"/>.
            </summary>
            <param name="queryModel">
            The <see cref="T:Remotion.Linq.QueryModel"/> a sql query is generated for. The query must not contain any eager fetch result operators.
            </param>
            <param name="checkResultIsDomainObject">If <see langword="true"/>, the method will check whether the query returns <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>
            instances and throw an exception if not. If <see langword="false"/>, no such check will be made.</param>
            <returns>A <see cref="T:Remotion.Linq.SqlBackend.SqlGeneration.SqlCommandData"/> instance containing the SQL text, parameters, and an in-memory projection for the given query model.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.CreateQuery(System.String,Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition,System.String,Remotion.Linq.SqlBackend.SqlGeneration.CommandParameter[],Remotion.Data.DomainObjects.Queries.Configuration.QueryType)">
            <summary>
            Creates a <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> object.
            </summary>
            <param name="id">The identifier for the linq query.</param>
            <param name="storageProviderDefinition">The <see cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition"/> to be used for the query.</param>
            <param name="statement">The sql statement of the query.</param>
            <param name="commandParameters">The parameters of the sql statement.</param>
            <param name="queryType">The type of query to create.</param>
            <returns>A <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> object.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.TransformAndResolveQueryModel(Remotion.Linq.QueryModel)">
            <summary>
            Transforms and resolves <see cref="T:Remotion.Linq.QueryModel"/> to build a <see cref="T:Remotion.Linq.SqlBackend.SqlStatementModel.SqlStatement"/> which represents an AST to generate query text.
            </summary>
            <param name="queryModel">The <see cref="T:Remotion.Linq.QueryModel"/> which should be transformed.</param>
            <returns>the generated <see cref="T:Remotion.Linq.SqlBackend.SqlStatementModel.SqlStatement"/></returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.CreateSqlCommand(Remotion.Linq.SqlBackend.SqlStatementModel.SqlStatement)">
            <summary>
            Creates a SQL command based on a given <see cref="T:Remotion.Linq.SqlBackend.SqlStatementModel.SqlStatement"/>.
            </summary>
            <param name="sqlStatement">The <see cref="T:Remotion.Linq.SqlBackend.SqlStatementModel.SqlStatement"/> a SQL query has to be generated for.</param>
            <returns><see cref="T:System.Data.SqlClient.SqlCommand"/> which represents the sql query.</returns>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.StorageProviderDefinition">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition"/> that is used for the query.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.PreparationStage">
            <summary>
            Gets the <see cref="T:Remotion.Linq.SqlBackend.SqlPreparation.ISqlPreparationStage"/> used for generating SQL.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.ResolutionStage">
            <summary>
            Gets the <see cref="T:Remotion.Linq.SqlBackend.MappingResolution.IMappingResolutionStage"/> used for generating SQL.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.GenerationStage">
            <summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.GenerationStage"/> used for generating SQL.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Linq.MappingResolver">
            <summary>
            Implements <see cref="T:Remotion.Linq.SqlBackend.MappingResolution.IMappingResolver"/> to supply information from re-store to the re-linq SQL backend.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.Model.SqlPrimaryXmlIndexDefinition.#ctor(System.String,Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnDefinition,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.Model.SqlPrimaryXmlIndexDefinition"/> represents a priamry xml-column index in a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.Model.SqlSecondaryXmlIndexDefinition">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.Model.SqlSecondaryXmlIndexDefinition"/> represents a secondary xml-column index in a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.InlineRdbmsStorageEntityDefinitionVisitor">
            <summary>
            Visits the given <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStorageEntityDefinition"/> and executes a handler based on the entity's type.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStorageEntityDefinitionVisitor">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStorageEntityDefinitionVisitor"/> defines the API for the entity definition visitor implementations.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.StorageProviderCommands.Factories.ITableDefinitionFinder">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.StorageProviderCommands.Factories.ITableDefinitionFinder"/> defines the API for all implementations that are responsible to get the <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.TableDefinition"/> for
            an <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>-class definition.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.StorageProviderCommands.Factories.TableDefinitionFinder">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.StorageProviderCommands.Factories.TableDefinitionFinder"/> is responsible to get the <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.TableDefinition"/> for an <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>-class definition.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.StorageProviderCommands.IndirectDataContainerLoadCommand">
            <summary>
            Executes the given <see cref="T:Remotion.Data.DomainObjects.Persistence.IStorageProviderCommand`2"/> to retrieve a sequence of <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> values, then
            looks up those values via the given <see cref="T:Remotion.Data.DomainObjects.Persistence.IStorageProviderCommandFactory`1"/>. This command can be used to indirectly
            load <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> instances via two queries, where the first yields only IDs, for example for concrete table inheritance 
            relation lookup.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.StorageProviderCommands.MultiObjectLoadCommand`1">
            <summary>
            Executes the command created by the given <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.IDbCommandBuilder"/> and parses the result into a sequence of objects using the specified
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.IObjectReader`1"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.StorageProviderCommands.MultiDataContainerSaveCommand">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.StorageProviderCommands.MultiDataContainerSaveCommand"/> saves a sequence of <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> instances by executing the given
            <see cref="T:System.Data.IDbCommand"/> instances.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.StorageProviderCommands.MultiDataContainerSortCommand">
            <summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Persistence.IStorageProviderCommand`2"/> and sorts the resulting <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> instances
            according to a given list of <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> values.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.StorageProviderCommands.MultiObjectIDLoadCommand">
            <summary>
            Executes the command created by the given <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.IDbCommandBuilder"/> and parses the result into a sequence of <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>
            instances.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.StorageProviderCommands.SingleObjectLoadCommand`1">
            <summary>
            Executes the command created by the given <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.IDbCommandBuilder"/> and parses the result into a single object using the specified
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DataReaders.IObjectReader`1"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.DelegateBasedStorageProviderCommand">
            <summary>
            Creates instances of <see cref="T:Remotion.Data.DomainObjects.Persistence.DelegateBasedStorageProviderCommand`3"/>. Use this factory class to avoid having
            to pass all generic arguments to <see cref="T:Remotion.Data.DomainObjects.Persistence.DelegateBasedStorageProviderCommand`3"/>'s constructor by hand.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Persistence.DelegateBasedStorageProviderCommand.Create``3(Remotion.Data.DomainObjects.Persistence.IStorageProviderCommand{``0,``2},System.Func{``0,``1})">
            <summary>
            Creates instances of <see cref="T:Remotion.Data.DomainObjects.Persistence.DelegateBasedStorageProviderCommand`3"/>. Use this factory method to avoid having
            to pass all generic arguments to <see cref="T:Remotion.Data.DomainObjects.Persistence.DelegateBasedStorageProviderCommand`3"/>'s constructor by hand.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.DelegateBasedStorageProviderCommand`3">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.DelegateBasedStorageProviderCommand`3"/> executes an <see cref="T:Remotion.Data.DomainObjects.Persistence.IStorageProviderCommand`2"/>
            and applies a specified operation-transformation to the result.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.StorageGroupBasedStorageProviderDefinitionFinder">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageGroupBasedStorageProviderDefinitionFinder"/> is responsible for finding the <see cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition"/> for a 
            <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/> based on the <see cref="P:Remotion.Data.DomainObjects.Mapping.ClassDefinition.StorageGroupType"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.IDataStoragePropertyDefinitionFactory">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.DataStoragePropertyDefinitionFactory"/> defines the API to create instances of <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStoragePropertyDefinition"/> for
            <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition"/> objects. 
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.DataStoragePropertyDefinitionFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.DataStoragePropertyDefinitionFactory"/> is responsible to create <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IRdbmsStoragePropertyDefinition"/> objects for 
            <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition"/> instances.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.FilterViewDefinition">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.FilterViewDefinition"/> defines a filtered view in a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnDefinition">
            <summary>
            Represents a column in a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Logical.StorageClassIsSupportedValidationRule">
            <summary>
            Validates that the given storage class is supported.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Logical.VirtualRelationEndPointCardinalityMatchesPropertyTypeValidationRule">
            <summary>
            Validates that the virtual relation end point cardinality matches the property type.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Logical.VirtualRelationEndPointPropertyTypeIsSupportedValidationRule">
            <summary>
            Validates that the virtual property definition is derived from DomainObject, DomainObjectValidation or DomainObjectCollection.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.MappingValidationResult">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Mapping.Validation.MappingValidationResult"/> is returned by the validate-methods of the mapping configuration validators and contains the information,
            if the rule is valid. If not, it also returns an error message.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Validation.OnlyOneTablePerHierarchyValidationRule">
            <summary>
            Validates that in a hierarchy of classes, only one can be mapped to a table.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Validation.TableNamesAreDistinctWithinConcreteTableInheritanceHierarchyValidationRule">
            <summary>
            Validates that all tables within a concrete table inheritance hierarchy have unique names.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Validation.ClassAboveTableIsAbstractValidationRule">
            <summary>
            Validates that all concrete (non-abstract) class in the mapping have an associated table (either directly or indirectly).
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Logical.SortExpressionIsSupportedForCardianlityOfRelationPropertyValidationRule">
            <summary>
            Validates that a relation end point defintion with cardinality one must not specify a sort expression.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Validation.ColumnNamesAreUniqueWithinInheritanceTreeValidationRule">
            <summary>
            Validates that each defined persistent property storage specific name is not already defined in a class in the same inheritance hierarchy.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Reflection.DomainObjectTypeDoesNotHaveLegacyInfrastructureConstructorValidationRule">
            <summary>
            Validates that the domain object does not have a legacy infrastructure constructor taking a single data container argument.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Reflection.DomainObjectTypeIsNotGenericValidationRule">
            <summary>
            Validates that a class definition type is not generic.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Reflection.InheritanceHierarchyFollowsClassHierarchyValidationRule">
            <summary>
            Validates that the type of a class defintion is derived from base type.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Reflection.MappingAttributesAreOnlyAppliedOnOriginalPropertyDeclarationsValidationRule">
            <summary>
            Validates that the property mapping attributes are applied at the original property declaration.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Reflection.MappingAttributesAreSupportedForPropertyTypeValidationRule">
            <summary>
            Validates that all applied attribute types of a property are supported.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Reflection.StorageGroupAttributeIsOnlyDefinedOncePerInheritanceHierarchyValidationRule">
            <summary>
            Validates that the StorageGroupAttribute is not defined twice in the class hierarchy.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.ReflectionBasedPropertyResolver">
            <summary>
            Provides functionality to resolve <see cref="T:System.Reflection.PropertyInfo"/> objects into child objects of <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.SortExpressions.SortExpressionDefinition">
            <summary>
            Defines how to sort a number of items in a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.Validation.SortExpressionValidator">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Mapping.Validation.SortExpressionValidator"/> validates the sort expression text of the <see cref="T:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute"/> 
            on the <see cref="T:System.Reflection.PropertyInfo"/> of the <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/>s.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectDefaultValueStrategy">
            <summary>
            Implements <see cref="T:Remotion.ObjectBinding.BindableObject.IDefaultValueStrategy"/> for <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances. A <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> property is defined
            to have its default value set if it is a new object and the property has not been touched yet.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.ISqlDialect">
            <summary>
            Provides a common interface for classes defining the specifics of a SQL dialect. Used by <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.RdbmsProvider"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.ISqlDialect.DelimitIdentifier(System.String)">
            <summary> Surrounds an identifier with delimiters according to the database's syntax. </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Persistence.Rdbms.ISqlDialect.StatementDelimiter">
            <summary> A delimiter to end a SQL statement if the database requires one, an empty string otherwise. </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.IStorageTypeInformationProvider">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.IStorageTypeInformationProvider"/> is the base class for type-calculator implementations which determine the storage-specific type for a 
            storable column definition.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.IStorageTypeInformationProvider.GetStorageType(Remotion.Data.DomainObjects.Mapping.PropertyDefinition,System.Boolean)">
            <summary>
            Gets an <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation"/> for the given <paramref name="propertyDefinition"/>.
            </summary>
            <param name="propertyDefinition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition"/> for which an <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation"/> object should be
              returned.</param>
            <param name="forceNullable">Specifies whether to override the <see cref="P:Remotion.Data.DomainObjects.Mapping.PropertyDefinition.IsNullable"/> property to make the property
            nullable in the database even when the property is not nullable in memory.</param>
            <returns>A <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation"/> for the given <paramref name="propertyDefinition"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.IStorageTypeInformationProvider.GetStorageType(System.Type)">
            <summary>
            Gets an <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation"/> for situations where a .NET <see cref="T:System.Type"/> is known that should be mapped to an
            Rdbms type.
            </summary>
            <param name="type">The type for which an <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation"/> object should be returned.</param>
            <returns>A <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation"/> for the given <paramref name="type"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.IStorageTypeInformationProvider.GetStorageType(System.Object)">
            <summary>
            Gets an <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation"/> for situations where no other information is available but a <paramref name="value"/>.
            This is similar to <see cref="M:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.IStorageTypeInformationProvider.GetStorageType(System.Type)"/>, but it also works with <see langword="null"/> values.
            </summary>
            <param name="value">The value for which an <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation"/> object should be returned. Can be <see langword="null"/>.</param>
            <returns>A best-effort <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation"/> for the given <paramref name="value"/>.</returns>
            <remarks>
            For  <see langword="null"/> values, a default <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageTypeInformation"/> is returned that is not guaranteed to be compatible with 
            all possible data types, although it tries to be as compatible as possible without knowing the context in which the value is to be used.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.RdbmsPersistenceModelLoader">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Building.RdbmsPersistenceModelLoader"/> is responsible to load a persistence model for a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.Model.Building.SqlStorageTypeInformationProvider">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.Model.Building.SqlStorageTypeInformationProvider"/> calculates the SQL Server-specific type for a column in a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.TableDefinition">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.TableDefinition"/> defines a table in a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.UnionViewDefinition">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.UnionViewDefinition"/> defines a union view in a relational database.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SqlDialect">
            <summary>
            Defines the <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.ISqlDialect"/> for MS SQL Server.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.Sql2005.SqlStorageObjectFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.Sql2005.SqlStorageObjectFactory"/> is responsible to create SQL Server-specific storage provider instances.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.PropertyChangeEventArgs">
            <summary>
            Provides data for a <b>PropertyChanging</b> event.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ValueChangeEventArgs">
            <summary>
            Provides data for change events of <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> instances.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ValueChangeEventArgs.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <b>ValueChangingEventArgs</b>.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ValueChangeEventArgs.OldValue">
            <summary>
            Gets the old value.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ValueChangeEventArgs.NewValue">
            <summary>
            Gets the new value.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.PropertyChangeEventArgs.#ctor(Remotion.Data.DomainObjects.DataManagement.PropertyValue,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <b>ValueChangingEventArgs</b> class.
            </summary>
            <param name="propertyValue">The <see cref="P:Remotion.Data.DomainObjects.PropertyChangeEventArgs.PropertyValue"/> that is being changed. Must not be <see langword="null"/>.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyValue"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.PropertyChangeEventArgs.PropertyValue">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> object that is being changed.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.EagerFetching.FetchedRealObjectRelationDataRegistrationAgent">
            <summary>
            Implements <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPointRegistrationAgent"/> for non-virtual object-valued relation end-points.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.EagerFetching.FetchedRelationDataRegistrationAgentBase">
            <summary>
            Provides common functionality for implementations of <see cref="T:Remotion.Data.DomainObjects.Queries.EagerFetching.IFetchedRelationDataRegistrationAgent"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.EagerFetching.IFetchedRelationDataRegistrationAgent">
            <summary>
            Registers a set of related objects with a set of originating objects based on an <see cref="T:Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition"/>. If one of the 
            relation end-points already has data registered, the new related object data is ignored.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.EagerFetching.FetchedCollectionRelationDataRegistrationAgent">
            <summary>
            Implements <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPointRegistrationAgent"/> for collection-valued relation end-points.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.EagerFetching.DelegatingFetchedRelationDataRegistrationAgent">
            <summary>
            Implements the <see cref="T:Remotion.Data.DomainObjects.Queries.EagerFetching.IFetchedRelationDataRegistrationAgent"/> interface by checking the given <see cref="T:Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition"/> 
            and delegating to a specific <see cref="T:Remotion.Data.DomainObjects.Queries.EagerFetching.IFetchedRelationDataRegistrationAgent"/> implementation for that end-point type.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.EagerFetching.FetchedVirtualObjectRelationDataRegistrationAgent">
            <summary>
            Implements <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPointRegistrationAgent"/> for virtual object-valued relation end-points.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.ILinqParserCustomizer">
            <summary>
            Defines an interface for classes needing to customize the re-store LINQ provider. Instances of types 
            implementing this interface are retrieved from the <see cref="T:Microsoft.Practices.ServiceLocation.ServiceLocator"/> by the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryFactory"/> when the first LINQ query is
            executed. They are then used to customize the LINQ provider for the rest of the application.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.QueryParameterWithType">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterWithType"/> associated a <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameterWithType.QueryParameter"/> with a <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameterWithType.StorageTypeInformation"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ReadOnlyDomainObjectCollectionAdapter`1">
            <summary>
            This class acts as a read-only adapter for an <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> object.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointRemoveCommand">
            <summary>
            Represents the removal of an element from a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointRemoveCommand.ExpandToAllRelatedObjects">
            <summary>
            Creates all commands needed to perform a bidirectional remove operation from this collection end point.
            </summary>
            <remarks>
            A remove operation of the form "customer.Orders.Remove (RemovedOrder)" needs two steps:
            <list type="bullet">
              <item>RemovedOrder.Customer = null and</item>
              <item>customer.Orders.Remove (removedOrder).</item>
            </list>
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointInsertCommand">
            <summary>
            Represents the insertion of an element into a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointInsertCommand.ExpandToAllRelatedObjects">
            <summary>
            Creates all commands needed to perform a bidirectional insert operation into this collection end point.
            </summary>
            <remarks>
            An insert operation of the form "customer.Orders.Insert (insertedOrder, index)" needs three steps:
            <list type="bullet">
              <item>insertedOrder.Customer = customer,</item>
              <item>customer.Orders.Insert (insertedOrder, index), and</item>
              <item>oldCustomer.Orders.Remove (insertedOrder) - with oldCustomer being the old customer of the inserted order (if non-null).</item>
            </list>
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointReplaceCommand">
            <summary>
            Represents the replacement of an element in a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointReplaceCommand.ExpandToAllRelatedObjects">
            <summary>
            Creates all commands needed to perform a bidirectional replace operation within this collection end point.
            </summary>
            <remarks>
            A replace operation of the form "customer.Orders[index] = newOrder" needs four steps:
            <list type="bullet">
              <item>customer.Order[index].Customer = null,</item>
              <item>newOrder.Customer = customer,</item>
              <item>customer.Orders[index] = newOrder,</item>
              <item>oldCustomer.Orders.Remove (insertedOrder) - with oldCustomer being the old customer of the new order (if non-null).</item>
            </list>
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointSetCollectionCommand">
            <summary>
            Represents the replacement of the whole <see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint.Collection"/>, including the transformation
            of the involved <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> instances into stand-alone resp. associated collections.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointSetCollectionCommand.ExpandToAllRelatedObjects">
            <summary>
            Creates all commands needed to perform a bidirectional collection replace operation within this collection end point.
            </summary>
            <remarks>
            A replace operation of the form "customer.Orders = newOrders" involves the following steps:
            <list type="bullet">
              <item>for each oldOrder the old collection (Orders) that's not in the new one: oldOrder.Customer = <see langword="null" />,</item>
              <item>for each newOrder in the new collection (newOrders) that's not in the old one: newOrder.Customer.Orders.Remove (newOrder),</item>
              <item>for each newOrder in the new collection (newOrders) that's not in the old one: newOrder.Customer = customer,</item>
              <item>customer.Orders = newOrders.</item>
            </list>
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointReplaceSameCommand">
            <summary>
            Represents the replacement of an element in a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/> with itself. Calling <see cref="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointReplaceSameCommand.ExpandToAllRelatedObjects"/>
            results in an <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand"/> that does not raise any events.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointReplaceSameCommand.ExpandToAllRelatedObjects">
            <summary>
            Creates all commands needed to perform a self-replace operation within this collection end point.
            </summary>
            <remarks>
            A self-replace operation of the form "customer.Orders[index] = customer.Orders[index]" needs two steps:
            <list type="bullet">
              <item>customer.Orders.Touch() and</item>
              <item>customer.Orders[index].Touch().</item>
            </list>
            No change notifications are sent for this operation.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.ObjectEndPointSetOneManyCommand">
            <summary>
            Represents the operation of setting the object stored by an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ObjectEndPoint"/> that is part of a one-to-many relation.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.ObjectEndPointSetCommand">
            <summary>
            Implementations of this class represents the operation of setting the object stored by an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ObjectEndPoint"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.ObjectEndPointSetOneManyCommand.ExpandToAllRelatedObjects">
            <summary>
            Creates all commands needed to perform a bidirectional 1:n set operation on this <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ObjectEndPoint"/>. One of the steps is 
            this command, the other steps are the opposite commands on the new/old related objects.
            </summary>
            <remarks>
            A 1:n set operation of the form "order.Customer = newCustomer" needs three steps:
            <list type="bullet">
              <item>order.Customer = newCustomer,</item>
              <item>newCustomer.Orders.Add (order), and</item>
              <item>oldCustomer.Orders.Remove (order).</item>
            </list>
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.ObjectEndPointSetOneOneCommand">
            <summary>
            Represents the operation of setting the object stored by an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ObjectEndPoint"/> that is part of a one-to-one relation.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.ObjectEndPointSetOneOneCommand.ExpandToAllRelatedObjects">
            <summary>
            Creates all commands needed to perform a bidirectional 1:1 set operation on this <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ObjectEndPoint"/>. One of the steps is 
            this command, the other steps are the opposite commands on the new/old related objects.
            </summary>
            <remarks>
            A 1:1 set operation of the form "order.OrderTicket = newTicket" needs four steps:
            <list type="bullet">
              <item>order.OrderTicket = newTicket,</item>
              <item>oldTicket.Order = null, </item>
              <item>newTicket.Order = order, and</item>
              <item>oldOrderOfNewTicket.OrderTicket = null.</item>
            </list>
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.ObjectEndPointSetSameCommand">
            <summary>
            Represents the operation of setting the object stored by an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ObjectEndPoint"/> to the same value as before. Calling 
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.ObjectEndPointSetSameCommand.ExpandToAllRelatedObjects"/> results in a <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand"/> that does not raise any events.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.ObjectEndPointSetSameCommand.ExpandToAllRelatedObjects">
            <summary>
            Creates all commands needed to perform a bidirectional set-same operation on this <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ObjectEndPoint"/>. One of the steps is 
            this command, the other steps are the opposite commands on the new/old related objects.
            </summary>
            <remarks>
            A same-set operation of the form "order.OrderTicket = order.OrderTicket" needs two steps:
            <list type="bullet">
              <item>order.Touch() and</item>
              <item>order.OrderTicket.Touch.</item>
            </list>
            No change notifications are sent for this operation.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.ObjectEndPointSetUnidirectionalCommand">
            <summary>
            Represents the operation of setting the object stored by an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ObjectEndPoint"/> that is part of a unidirectional relation.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.RelationEndPointTouchCommand">
            <summary>
            Represents a command that touches, but does not change the modified end point.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DomainObjectCollectionExtensions">
            <summary>
            Provides extension methods for <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollectionExtensions.CheckNotReadOnly(Remotion.Data.DomainObjects.DomainObjectCollection,System.String)">
            <summary>
            Checks that the given <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> is not read only, throwing a <see cref="T:System.NotSupportedException"/> if it is.
            </summary>
            <param name="collection">The collection to check.</param>
            <param name="message">The message the exception should have if one is thrown.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollectionExtensions.UnionWith(Remotion.Data.DomainObjects.DomainObjectCollection,Remotion.Data.DomainObjects.DomainObjectCollection)">
            <summary>
            Adds all items of the given <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> to the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>, that are not already part of it.
            This method is a convenience method combining <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.Contains(Remotion.Data.DomainObjects.ObjectID)"/> and <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.AddRange(System.Collections.IEnumerable)"/>. If there are no changes made to this
            collection, the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> method does not touch the associated end point (if any).
            </summary>
            <param name="collection">The collection to add items to.</param>
            <param name="sourceCollection">The collection to add items from. Must not be <see langword="null"/>.</param>
            <remarks>
            <para>
            To check if an item is already part of the <see cref="P:Remotion.Data.DomainObjects.DomainObject.ID"/> its <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is used.
            <see cref="P:Remotion.Data.DomainObjects.DomainObject.ID"/> does not check if the item references are identical. In case the two <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> contain
            different items with the same <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>, <see cref="N:System"/> will thus ignore those items.
            </para>
            <para>
            This method calls <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.AddRange(System.Collections.IEnumerable)"/> and might throw any of the exceptions that can be thrown by 
            <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.AddRange(System.Collections.IEnumerable)"/>-
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollectionExtensions.GetItemsExcept(Remotion.Data.DomainObjects.DomainObjectCollection,Remotion.Data.DomainObjects.DomainObjectCollection)">
            <summary>
            Returns all items of a given <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> that are not part of another <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>. The
            comparison is made by <see cref="P:Remotion.Data.DomainObjects.DomainObject.ID"/>, not by reference.
            </summary>
            <param name="collection">The collection to return items from.</param>
            <param name="exceptedDomainObjects">A collection containing items that should not be returned.</param>
            <returns>
            An enumeration of all items from <paramref name="collection"/> that are not part of <paramref name="exceptedDomainObjects"/>.
            </returns>
            <remarks>
            	<para>The method does not modify the given <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> istances.</para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollectionExtensions.SequenceEqual(Remotion.Data.DomainObjects.DomainObjectCollection,System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DomainObject})">
            <summary>
            Checks whether a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> matches a sequence of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> items by reference. 
            The comparison takes the order of elements into account.
            </summary>
            <param name="collection">The <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> to check.</param>
            <param name="comparedSequence">The sequence of elements to check against.</param>
            <returns><see langword="true"/> if the collection contains the same items as the comparedCollection in the same order; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollectionExtensions.SetEquals(Remotion.Data.DomainObjects.DomainObjectCollection,System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DomainObject})">
            <summary>
            Checks whether a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> matches another set of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> items by reference. 
            The comparison does not take the order of elements into account.
            </summary>
            <param name="collection">The <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> to check.</param>
            <param name="comparedSet">The set of elements to check against.</param>
            <returns><see langword="true"/> if the collection contains the same items as the set in any order; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollectionExtensions.AsList``1(Remotion.Data.DomainObjects.DomainObjectCollection)">
            <summary>
            Adapts the given <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> as an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The desired item type. This must be assignable from the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>'s 
            <see cref="P:Remotion.Data.DomainObjects.DomainObjectCollection.RequiredItemType"/>. If it is more general than the item type, the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>'s
            runtime checks will ensure that only compatible items are inserted into the list.</typeparam>
            <param name="collection">The collection to be wrapped..</param>
            <returns>An implementation of <see cref="T:System.Collections.Generic.IList`1"/> that wraps the given <paramref name="collection"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollectionExtensions.AsReadOnlyCollection(Remotion.Data.DomainObjects.DomainObjectCollection)">
            <summary>
            Returns a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> representing the data of the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>.
            The data is not copied; instead, the returned collection holds the same data store as the original collection and will therefore reflect
            any changes made to the original.
            </summary>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> representing the data of the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollectionExtensions.AsReadOnlyCollection``1(Remotion.Data.DomainObjects.ObjectList{``0})">
            <summary>
            Returns a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> representing the data of the <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/>.
            The data is not copied; instead, the returned collection holds the same data store as the original collection and will therefore reflect
            any changes made to the original.
            </summary>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> representing the data of the <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/>.</returns>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DomainObjectCollectionWrapper`1">
            <summary>
            Implements the <see cref="T:System.Collections.Generic.IList`1"/> interface around a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>.
            </summary>
            <typeparam name="T">The item type of the <see cref="T:System.Collections.Generic.IList`1"/>. This must be assignable from the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>'s
            <see cref="P:Remotion.Data.DomainObjects.DomainObjectCollection.RequiredItemType"/>. If it is more general than the item type, the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>'s
            runtime checks will ensure that only compatible items are inserted into the list.</typeparam>
            <remarks><see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> is a non-generic collection type. For use with LINQ or other strongly-typed APIs, this
            adapter can be used. Use <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollectionExtensions.AsList``1(Remotion.Data.DomainObjects.DomainObjectCollection)"/> to conveniently construct an implementation of this
            class from a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>.</remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ExtensibleEnumPropertyAttribute">
            <summary>
            Apply the <see cref="T:Remotion.Data.DomainObjects.ExtensibleEnumPropertyAttribute"/> to extensible enum properties to set additional
            options.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IMappingAttribute">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IMappingAttribute"/> is a marker interface implemented by all attributes relevant to the mapping.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DomainImplementation.UnloadService">
            <summary>
            Provides functionality for unloading the data that a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> stores for <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances and for
            relations. Use the methods of this class to remove unneeded data from memory and, more importantly, to reload data from the underlying 
            data source.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainImplementation.UnloadService.UnloadVirtualEndPoint(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)">
            <summary>
            Unloads the virtual relation end point indicated by the given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID"/> in the specified
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. If the end point has not been loaded or has already been unloaded, this method does nothing.
            The relation must be unchanged in order to be unloaded, and it must not belong to an object that is new or deleted.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> to unload the data from. The unload operation always affects the whole transaction 
            hierarchy.</param>
            <param name="endPointID">The ID of the relation property to unload. This must denote a virtual relation end-point, ie., the relation side not 
            holding the foreign key property.</param>
            <exception cref="T:System.InvalidOperationException">The given end point is not in unchanged state.</exception>
            <exception cref="T:System.ArgumentNullException">One of the arguments passed to this method is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The given <paramref name="endPointID"/> does not specify a virtual relation end point.</exception>
            <remarks>
            The unload operation is not atomic over the transaction hierarchy. It will start at the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.LeafTransaction"/> 
            and try to unload here, then it will go over the parent transactions one by one. If the operation fails in any of the transactions, 
            it will stop and throw an exception. At this point of time, the operation will have unloaded items from all the transactions where it 
            succeeded, but not in the one where it failed or those above.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainImplementation.UnloadService.TryUnloadVirtualEndPoint(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)">
            <summary>
            Tries to unload the virtual end point indicated by the given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID"/> in the specified
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>, returning a value indicating whether the unload operation succeeded. If the end point has not been loaded or
            has already been unloaded, this method returns <see langword="true"/> and does nothing.
            The relation must be unchanged in order to be unloaded, and it must not belong to an object that is new or deleted, otherwise this method 
            returns <see langword="false"/>.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> to unload the data from. The unload operation always affects the whole transaction 
            hierarchy.</param>
            <param name="endPointID">The ID of the relation property to unload. This must denote a virtual relation end-point, ie., the relation side not 
            holding the foreign key property.</param>
            <returns><see langword="true"/> if the unload operation succeeded (in all transactions), or <see langword="false"/> if it did not succeed
            (in one transaction).</returns>
            <exception cref="T:System.ArgumentNullException">One of the arguments passed to this method is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The given <paramref name="endPointID"/> does not specify a virtual relation end point.</exception>
            <remarks>
            The unload operation is not atomic over the transaction hierarchy. It will start at the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.LeafTransaction"/> 
            and try to unload here, then it will go over the parent transactions one by one. If the operation fails in any of the transactions, 
            it will stop and throw an exception. At this point of time, the operation will have unloaded items from all the transactions where it 
            succeeded, but not in the one where it failed or those above.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainImplementation.UnloadService.UnloadData(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Unloads the data held by the given <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> for the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with the specified 
            <paramref name="objectID"/>. The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> reference 
            and <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> instances held by the object are not removed, only the data is. The object can only be unloaded if 
            it is in unchanged state and no relation end-points would remain inconsistent.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> to unload the data from. The unload operation always affects the whole transaction 
            hierarchy.</param>
            <param name="objectID">The object ID.</param>
            <exception cref="T:System.InvalidOperationException">The object to be unloaded is not in unchanged state - or - the operation would affect an 
            opposite relation end-point that is not in unchanged state.</exception>
            <remarks>
            <para>
            The method unloads the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>, the collection end points the object is part of (but not
            the collection end points the object owns), the non-virtual end points owned by the object and their respective opposite virtual object 
            end-points. This means that unloading an object will unload a relation if and only if the object's <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> is holding 
            the foreign key for the relation. Use <see cref="M:Remotion.Data.DomainObjects.DomainImplementation.UnloadService.UnloadVirtualEndPoint(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)"/> or <see cref="M:Remotion.Data.DomainObjects.DomainImplementation.UnloadService.UnloadVirtualEndPointAndItemData(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)"/> to unload 
            relations whose foreign keys are not held by the object.
            </para>
            <para>
            The unload operation is not atomic over the transaction hierarchy. It will start at the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.LeafTransaction"/> 
            and try to unload here, then it will go over the parent transactions one by one. If the operation fails in any of the transactions, 
            it will stop and throw an exception. At this point of time, the operation will have unloaded items from all the transactions where it 
            succeeded, but not in the one where it failed or those above.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainImplementation.UnloadService.TryUnloadData(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Unloads the data held by the given <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> for the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with the specified
            <paramref name="objectID"/>, returning a value indicating whether the unload operation succeeded. The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> reference
            and <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> instances held by the object are not removed, only the data is. The object can only be unloaded if
            it is in unchanged state and no relation end-points would remain inconsistent.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> to unload the data from. The unload operation always affects the whole transaction 
            hierarchy.</param>
            <param name="objectID">The object ID.</param>
            <returns><see langword="true"/> if the unload operation succeeded (in all transactions), or <see langword="false"/> if it did not succeed
            (in one transaction).</returns>
            <remarks>
            <para>
            The method unloads the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>, the collection end points the object is part of (but not
            the collection end points the object owns), the non-virtual end points owned by the object and their respective opposite virtual object 
            end-points. This means that unloading an object will unload a relation if and only if the object's <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> is holding 
            the foreign key for the relation. Use <see cref="M:Remotion.Data.DomainObjects.DomainImplementation.UnloadService.TryUnloadVirtualEndPoint(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)"/> or <see cref="M:Remotion.Data.DomainObjects.DomainImplementation.UnloadService.TryUnloadVirtualEndPointAndItemData(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)"/> to unload 
            relations whose foreign keys are not held by the object.
            </para>
            	<para>
            The unload operation is not atomic over the transaction hierarchy. It will start at the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.LeafTransaction"/> 
            and try to unload here, then it will go over the parent transactions one by one. If the operation fails in any of the transactions, 
            it will stop and throw an exception. At this point of time, the operation will have unloaded items from all the transactions where it 
            succeeded, but not in the one where it failed or those above.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainImplementation.UnloadService.UnloadVirtualEndPointAndItemData(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)">
            <summary>
            Unloads the virtual end point indicated by the given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID"/> in the specified 
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> as well as the data of the items referenced by it. If the end point has not been loaded or has already been 
            unloaded, this method does nothing.
            The relation end-point must be unchanged in order to be unloaded, and it must not belong to an object that is new or deleted.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> to unload the data from. The unload operation always affects the whole transaction 
            hierarchy.</param>
            <param name="endPointID">The end point ID. In order to retrieve this ID from a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> representing a relation
            end point, specify the <see cref="P:Remotion.Data.DomainObjects.DomainObjectCollection.AssociatedEndPointID"/>.</param>
            <exception cref="T:System.InvalidOperationException">The involved end points or one of the items it stores are not in unchanged state.</exception>
            <exception cref="T:System.ArgumentNullException">One of the arguments passed to this method is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The given <paramref name="endPointID"/> does not specify a collection end point.</exception>
            <remarks>
            <para>
            The unload operation is not atomic over the transaction hierarchy. It will start at the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.LeafTransaction"/> 
            and try to unload here, then it will go over the parent transactions one by one. If the operation fails in any of the transactions, 
            it will stop and throw an exception. At this point of time, the operation will have unloaded items from all the transactions where it 
            succeeded, but not in the one where it failed or those above.
            </para>
            <para>
            This operation is atomic within each transaction in the transaction hierarchy. Within each transaction, if either the end-point or any of its 
            items' data cannot be unloaded, nothing will be unloaded.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainImplementation.UnloadService.TryUnloadVirtualEndPointAndItemData(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)">
            <summary>
            Unloads the virtual end point indicated by the given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID"/> in the specified
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> as well as the data of the items referenced by it, returning a value indicating whether the unload operation 
            succeeded.
            If the end point has not been loaded or has already been unloaded, this method returns <see langword="true"/> and does nothing.
            The relation end-point must be unchanged in order to be unloaded, and it must not belong to an object that is new or deleted, otherwise this
            method will return <see langword="false"/>.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> to unload the data from. The unload operation always affects the whole transaction 
            hierarchy.</param>
            <param name="endPointID">The end point ID. In order to retrieve this ID from a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> representing a relation
            end point, specify the <see cref="P:Remotion.Data.DomainObjects.DomainObjectCollection.AssociatedEndPointID"/>.</param>
            <returns><see langword="true"/> if the unload operation succeeded (in all transactions), or <see langword="false"/> if it did not succeed
            (in one transaction).</returns>
            <exception cref="T:System.ArgumentNullException">One of the arguments passed to this method is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The given <paramref name="endPointID"/> does not specify a collection end point.</exception>
            <remarks>
            <para>
            The unload operation is not atomic over the transaction hierarchy. It will start at the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.LeafTransaction"/> 
            and try to unload here, then it will go over the parent transactions one by one. If the operation fails in any of the transactions, 
            it will stop and throw an exception. At this point of time, the operation will have unloaded items from all the transactions where it 
            succeeded, but not in the one where it failed or those above.
            </para>
            <para>
            This operation is atomic within each transaction in the transaction hierarchy. Within each transaction, if either the end-point or any of its 
            items' data cannot be unloaded, nothing will be unloaded.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainImplementation.UnloadService.UnloadAll(Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Unloads all the data and relation end-points from the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> hierarchy indicated by the given 
            <paramref name="clientTransaction"/>. This operation always succeeds (unless it is canceled by an exception thrown from a
            <see cref="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.ObjectsUnloading(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"/> or <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnUnloading"/> notification method).
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> to unload the data from. The unload operation always affects the whole transaction 
            hierarchy.</param>
            <exception cref="T:System.ArgumentNullException">One of the arguments passed to this method is <see langword="null"/>.</exception>
            <remarks>
            <para>
            The unload operation is not atomic over the transaction hierarchy. It will start at the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.LeafTransaction"/> 
            and try to unload here, then it will go over the parent transactions one by one. If the operation is canceled in any of the transactions, 
            it will stop and throw an exception. At this point of time, the operation will have unloaded items from all the transactions where it 
            succeeded, but not in the one where it failed or those above.
            </para>
            <para>
            The effect of this operation is similar to that of a <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Rollback"/> followed by calling 
            <see cref="M:Remotion.Data.DomainObjects.DomainImplementation.UnloadService.UnloadVirtualEndPoint(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)"/> and <see cref="M:Remotion.Data.DomainObjects.DomainImplementation.UnloadService.UnloadData(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.ObjectID)"/> for every piece of data in the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>, although
            the operation won't raise any Rollback-related events. 
            </para>
            <para>
            When the operation completes, the state of previously <see cref="F:Remotion.Data.DomainObjects.StateType.Changed"/>, <see cref="F:Remotion.Data.DomainObjects.StateType.Deleted"/>, and 
            <see cref="F:Remotion.Data.DomainObjects.StateType.Unchanged"/> objects becomes <see cref="F:Remotion.Data.DomainObjects.StateType.NotLoadedYet"/>. The state of <see cref="F:Remotion.Data.DomainObjects.StateType.New"/> objects
            becomes <see cref="F:Remotion.Data.DomainObjects.StateType.Invalid"/> (this state is propagated over within the whole transaction hierarchy).
            The state of <see cref="F:Remotion.Data.DomainObjects.StateType.Invalid"/> and <see cref="F:Remotion.Data.DomainObjects.StateType.NotLoadedYet"/> objects stays the same.
            </para>
            <para>
            When the operation completes, all virtual relation end-points will no longer be complete, and they will be reloaded on access. All changes,
            including <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> references set into relation properties, will be rolled back.
            </para>
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager">
            <summary>
            Provides an interface for classes managing the set of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> references that can be used in a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager.GetEnlistedDomainObjects">
            <summary>
            Gets all domain objects enlisted by this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager"/>.
            </summary>
            <value>The domain objects enlisted via <see cref="M:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)"/>.</value>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager.GetEnlistedDomainObject(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Returns the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> enlisted for the given <paramref name="objectID"/> via <see cref="M:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)"/>, or 
            <see langword="null"/> if no such object exists.
            </summary>
            <param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> for which to retrieve a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.</param>
            <returns>
            A <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with the given <paramref name="objectID"/> previously enlisted via <see cref="M:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)"/>,
            or <see langword="null"/> if no such object exists.
            </returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Enlists the given domain object in the transaction managed by this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager"/>.
            </summary>
            <param name="domainObject">The domain object to be enlisted.</param>
            <returns>
            <see langword="true"/> if the object was newly enlisted; <see langword="false"/> if it had already been enlisted before this 
            method was called.
            </returns>
            <remarks>
            From within this method, the object's <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> must not be accessed (directly or indirectly).
            </remarks>
            <exception cref="T:System.InvalidOperationException">Another object has already been registered for the <paramref name="domainObject"/>'s 
            <see cref="P:Remotion.Data.DomainObjects.DomainObject.ID"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager.IsEnlisted(Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Determines whether the specified <paramref name="domainObject"/> has been enlisted via <see cref="M:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)"/>.
            </summary>
            <param name="domainObject">The domain object to be checked.</param>
            <returns>
            <see langword="true"/> if the specified domain object has been enlisted via <see cref="M:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)"/>; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager.EnlistedDomainObjectCount">
            <summary>
            Gets the number of domain objects enlisted by this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager"/>.
            </summary>
            <value>The number of domain objects enlisted by this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager"/>.</value>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.Enlistment.DictionaryBasedEnlistedDomainObjectManager">
            <summary>
            Manages the enlisted objects via a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.SubCollectionEndPointChangeDetectionStrategy">
            <summary>
            Implements <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ICollectionEndPointChangeDetectionStrategy"/> for sub-transactions. In sub-transactions, a collection end point
            is regarded to have changed when either the opposite collection reference has changed or the sequence of items has changed. The order of the 
            items is significant.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.ObjectIDStringSerializer">
            <summary>
            Provides a mechanism to serialize <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> instances to and from strings.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.ObjectIDStringSerializer.CheckSerializableStringValue(System.String)">
            <summary>
            Checks whether the given <paramref name="value"/> can be used as an <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> value if the <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> should
            later be serialized to a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.ObjectIDStringSerializer.Serialize(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Serializes the specified object ID into a <see cref="T:System.String"/> value that can later be re-parsed via <see cref="M:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.ObjectIDStringSerializer.Parse(System.String)"/> or <see cref="M:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.ObjectIDStringSerializer.TryParse(System.String,Remotion.Data.DomainObjects.ObjectID@)"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.ObjectIDStringSerializer.Parse(System.String)">
            <summary>
            Parses the specified object ID string, throwing an <see cref="T:System.FormatException"/> if an error occurs.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.ObjectIDStringSerializer.TryParse(System.String,Remotion.Data.DomainObjects.ObjectID@)">
            <summary>
            Parses the specified object ID string, indicating by a boolean return value whether the operation was completed successfully.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.StringObjectIDValueParser">
            <summary>
            Parses the <see cref="T:System.String"/> value of an <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.IObjectIDValueParser">
            <summary>
            Provides a common interface to parsing values of an <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> from a <see cref="T:System.String"/>. This is used by <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.ObjectIDStringSerializer"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.GuidObjectIDValueParser">
            <summary>
            Parses the <see cref="T:System.Guid"/> value of an <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.Int32ObjectIDValueParser">
            <summary>
            Parses the <see cref="T:System.Int32"/> value of an <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.RootCollectionEndPointChangeDetectionStrategy">
            <summary>
            Implements <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ICollectionEndPointChangeDetectionStrategy"/> for root transactions. In root transactions, a collection end point
            is regarded to have changed when either the opposite collection reference has changed or the set of items has changed. The order of the items
            is ignored.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.InvalidEnumValueException">
            <summary>
            The exception that is thrown when a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> is set with an enum value that does not match the property's type.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.CompositeCommand">
            <summary>
            Composes several <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand"/> instances into a single command.
            </summary>
            <remarks>
            This can, for example, be used to model bidirectional relation modifications. Such modifications always comprise multiple steps: they need to 
            be performed on either side of the relation being changed, and usually they also invole one "previous" or "new" related object. (Eg. an insert 
            modificaton has a previous related object (possibly <see langword="null"/>), a remove modification has an old related object.)
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.Commands.CompositeCommand"/> aggregates these modification steps and allows executing and raising events for them all at once.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DBStorageGroupAttribute">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.DBStorageGroupAttribute"/> is the standard <see cref="T:Remotion.Data.DomainObjects.StorageGroupAttribute"/> for types persisted into a database.
            </summary>
            <remarks>
            The <see cref="T:Remotion.Data.DomainObjects.DBStorageGroupAttribute"/> can be used whenever there is no need for a more granular distribution of types into different 
            storage groups.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.StorageGroupAttribute">
            <summary>The <see cref="T:Remotion.Data.DomainObjects.StorageGroupAttribute"/> is the base class for defining storage groups in the domain layer.</summary>
            <remarks>
            <para>
            A storage group is a logical grouping of all classes within a domain that should be persisted with the same storage provider.
            </para><para>
            Define the <see cref="T:Remotion.Data.DomainObjects.StorageGroupAttribute"/> at the base classes of the domain layer to signify the root for the persistence hierarchy.
            </para><para>
            If no storage group is deifned for a persistence hierarchy, the domain object classes are assigned to the default storage provider.
            </para> 
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DomainObjectGraphTraverser">
            <summary>
            Provides a mechanism for retrieving all the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances directly or indirectly referenced by a root object via
            <see cref="F:Remotion.Data.DomainObjects.Infrastructure.PropertyKind.RelatedObject"/> and <see cref="F:Remotion.Data.DomainObjects.Infrastructure.PropertyKind.RelatedObjectCollection"/> properties. A
            <see cref="T:Remotion.Data.DomainObjects.IGraphTraversalStrategy"/> can be given to decide which objects to include and which links to follow when traversing the
            object graph.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectGraphTraverser.GetFlattenedRelatedObjectGraph">
            <summary>
            Gets the flattened related object graph for the root <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> associated with this traverser.
            </summary>
            <returns>A <see cref="T:Remotion.Collections.Set`1"/> of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances containing the root object and all objects directly or indirectly
            referenced by it.</returns>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DomainObjectMixin`1">
            <summary>
            Base class for mixins adding persistent properties to domain objects.
            </summary>
            <typeparam name="TDomainObject">The type of the <see cref="P:Remotion.Mixins.Mixin`1.Target"/> property within the mixin. This type must be assignable from
            the domain object extended by the mixin. Note that an <see cref="T:Remotion.Mixins.ExtendsAttribute"/> or
            <see cref="T:Remotion.Mixins.UsesAttribute"/> is still required to actually apply the mixin to the domain object type. See <see cref="T:Remotion.Mixins.Mixin`1"/> for 
            additional information.</typeparam>
            <remarks>Use this base class to implement a mixin adding persistent properties to a domain object which does not need to call the base 
            implementation of any overridden methods. Use <see cref="T:Remotion.Data.DomainObjects.DomainObjectMixin`2"/> if the mixin needs to call overridden
            base methods.</remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DomainObjectMixin`2">
            <summary>
            Base class for mixins adding persistent properties to domain objects.
            </summary>
            <typeparam name="TDomainObject">The type of the <see cref="P:Remotion.Mixins.Mixin`1.Target"/> property within the mixin. This type must be assignable from
            the domain object extended by the mixin. Note that an <see cref="T:Remotion.Mixins.ExtendsAttribute"/> or
            <see cref="T:Remotion.Mixins.UsesAttribute"/> is still required to actually apply the mixin to the domain object type.</typeparam>
            <typeparam name="TNextCallRequirements">An interface type specifying the members whose base implementation needs to be called via the
            <see cref="P:Remotion.Mixins.Mixin`2.Next"/> property when overridden by this mixin. The interface needs to implement
            <see cref="T:Remotion.Data.DomainObjects.IDomainObjectNextCallRequirements"/>. See <see cref="T:Remotion.Mixins.Mixin`2"/> for additional information.</typeparam>
            <remarks><para>Use this base class to implement a mixin adding persistent properties to a domain object which overrides mixin members and needs to
            call the base implementations of these members on its target object. Specify those members you need to call via the
            <see cref="P:Remotion.Mixins.Mixin`2.Next"/> property via the <typeparamref name="TNextCallRequirements"/> type parameter; the target object does not
            have to actually implement this interface.</para>
            <para>Use <see cref="T:Remotion.Data.DomainObjects.DomainObjectMixin`1"/> if the mixin does not need to call any base implementations of overridden members.</para></remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.IDomainObjectMixin">
            <summary>
            Allows a mixin applied to a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to react on events related to the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instance.
            </summary>
            <remarks>
            <para>
            Implement this interface on a mixin applied to a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to be informed about when the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instance
            is created or loaded.
            </para>
            <para>
            The hook methods defined on
            this interface are called by the <see cref="N:Remotion.Data.DomainObjects"/> infrastructure at points of time when it is safe to access the domain object's
            ID and properties. Use them instead of <see cref="M:Remotion.Mixins.Mixin`1.OnInitialized"/> to execute mixin initialization code that must access
            the domain object's properties.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IDomainObjectMixin.OnDomainObjectReferenceInitializing">
            <summary>
            Called when the mixin's target domain object has been initialized. This is executed right after 
            <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnReferenceInitializing"/>, see <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnReferenceInitializing"/> for details.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IDomainObjectMixin.OnDomainObjectCreated">
            <summary>
            Called when the mixin's target domain object has been newly created, after the constructors have finished execution.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IDomainObjectMixin.OnDomainObjectLoaded(Remotion.Data.DomainObjects.LoadMode)">
            <summary>
            Called when the mixin's target domain object has been loaded.
            </summary>
            <param name="loadMode">Specifies whether the whole domain object or only the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> has been
            newly loaded.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectMixin`2.GetPublicDomainObjectType">
            <summary>
            Gets the type returned by <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetPublicDomainObjectType"/> when called on this mixin's target object.
            </summary>
            <value>The public domain object type of this mixin's target object.</value>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectMixin`2.OnDomainObjectReferenceInitializing">
            <summary>
            Called when the mixin's target domain object is being initialized. This is executed right after 
            <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnReferenceInitializing"/>, see <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnReferenceInitializing"/> for details.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectMixin`2.OnDomainObjectCreated">
            <summary>
            Called when the mixin's target domain object has been newly created, after the constructors have finished execution.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectMixin`2.OnDomainObjectLoaded(Remotion.Data.DomainObjects.LoadMode)">
            <summary>
            Called when the mixin's target domain object has been loaded.
            </summary>
            <param name="loadMode">Specifies whether the whole domain object or only the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> has been
            newly loaded.</param>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObjectMixin`2.ID">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of this mixin's target object.
            </summary>
            <value>The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of this mixin's target object.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObjectMixin`2.State">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.StateType"/> returned by this mixin's target object's <see cref="P:Remotion.Data.DomainObjects.DomainObject.State"/> property.
            </summary>
            <value>The state of this mixin's target object.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObjectMixin`2.IsInvalid">
            <summary>
            Gets a value indicating whether this mixin's target object is invalid in its default transaction.
            </summary>
            <value><see langword="true" /> if this mixin's target object is invalid; otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObjectMixin`2.Properties">
            <summary>
            Gets the properties of this mixin's target object, as returned by the <see cref="P:Remotion.Data.DomainObjects.DomainObject.Properties"/> property.
            </summary>
            <value>The properties of the mixin's targetr object.</value>
        </member>
        <member name="T:Remotion.Data.DomainObjects.IDomainObjectNextCallRequirements">
            <summary>
            Describes the minimum base call requirements that <see cref="T:Remotion.Data.DomainObjects.DomainObjectMixin`2"/> has to its target
            objects.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.IDomainObjectNextCallRequirements.Properties">
            <summary>
            Defines that the mixin's target object must have a property called Properties which returns an object of type <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer"/>.
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> base class already defines this property.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.DomainObjectTransactionContext">
            <summary>
            Provides the default implementation of the <see cref="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext"/> interface.
            Represents the context of a <see cref="P:Remotion.Data.DomainObjects.Infrastructure.DomainObjectTransactionContext.DomainObject"/> that is associated with a specific <see cref="P:Remotion.Data.DomainObjects.Infrastructure.DomainObjectTransactionContext.ClientTransaction"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.IGraphTraversalStrategy">
            <summary>
            Defines a strategy to use when traversing a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> graph using a <see cref="T:Remotion.Data.DomainObjects.DomainObjectGraphTraverser"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IGraphTraversalStrategy.ShouldProcessObject(Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Determines whether to process the given object in the result set when traversing a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> graph.
            </summary>
            <param name="domainObject">The domain object to decide about.</param>
            <returns>True if the object should be processed; otherwise, false.</returns>
            <remarks>The question of processing has no effect on the question whether the object's links should be followed.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.IGraphTraversalStrategy.ShouldFollowLink(Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DomainObject,System.Int32,Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor)">
            <summary>
            Determines whether to follow a relation link when traversing a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> graph.
            </summary>
            <param name="root">The root domain object from which the traversal was started.</param>
            <param name="currentObject">The current domain object defining the relation link.</param>
            <param name="currentDepth">The number of links that were traversed from the root to the current object. Note that this value is not
            necessarily the shortest path from the root to the current object; if an object can be reached in more than one way, it is not defined
            which way is taken by the traverser.</param>
            <param name="linkProperty">The link property. Note that when the property's <see cref="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetValue``1"/> methods are
            accessed, this can cause the related objects to be loaded from the database.</param>
            <returns>True if the traverser should follow the link; otherwise, if traversal should stop at the <paramref name="currentObject"/>.</returns>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ClientTransaction">
            <summary>
            Represents an in-memory transaction.
            </summary>
            <remarks>
            <para>
            When a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> is manually instantiated, it has to be activated for the current thread by using a
            <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope"/>, e.g. via calling <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnterDiscardingScope"/> or <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnterNonDiscardingScope"/>. The current transaction
            for a thread can be retrieved via <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/> or <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope"/>.
            </para>
            <para>
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction">ClientTransaction's</see> methods temporarily set the <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope"/> to this instance to
            ensure they are executed in the right context.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.CreateRootTransaction">
            <summary>
            Creates a new root <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>, a transaction which uses a <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.RootPersistenceStrategy"/>.
            </summary>
            <returns>A new root <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance.</returns>
            <remarks>The object returned by this method can be extended with <b>Mixins</b> by configuring the <see cref="P:Remotion.Mixins.MixinConfiguration.ActiveConfiguration"/>
            to include a mixin for type <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.RootPersistenceStrategy"/>. Declaratively, this can be achieved by attaching an
            <see cref="T:Remotion.Mixins.ExtendsAttribute"/> instance for <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> or <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.RootPersistenceStrategy"/> to a mixin class.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.CreateBindingTransaction">
            <summary>
            Creates a new root <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> that binds all <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances that are created in its context. A bound
            <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is always accessed in the context of its binding transaction, it never uses <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/>.
            </summary>
            <returns>A new binding <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> instance.</returns>
            <remarks>
            <para>
            The object returned by this method can be extended with <b>Mixins</b> by configuring the <see cref="P:Remotion.Mixins.MixinConfiguration.ActiveConfiguration"/>
            to include a mixin for type <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.RootPersistenceStrategy"/>. Declaratively, this can be achieved by attaching an
            <see cref="T:Remotion.Mixins.ExtendsAttribute"/> instance for <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> or <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.RootPersistenceStrategy"/> to a mixin class.
            </para>
            <para>
            Binding transactions cannot have subtransactions.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.CreateEmptyTransactionOfSameType(System.Boolean)">
            <summary>Initializes a new instance of this transaction.</summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.Discard">
            <summary>
            Discards this transaction (rendering it unusable) and, if this transaction is a subtransaction, returns control to the parent transaction.
            </summary>
            <remarks>
            <para>
            When a subtransaction is created via <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.CreateSubTransaction"/>, the parent transaction is made read-only and cannot be
            used in potentially modifying operations until the subtransaction returns control to the parent transaction by calling this method.
            </para>
            <para>
            Note that this method only affects writeability of the transactions, it does not influence the active <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope"/> and
            <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/> transaction. However, by default, the scope created by <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnterDiscardingScope"/> will automatically
            execute this method when the scope is left (see <see cref="F:Remotion.Data.DomainObjects.AutoRollbackBehavior.Discard"/>). In most cases,
            <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Discard"/> therefore doesn't have to be called explicity; leaving the scopes suffices.
            </para>
            <para>
            Use <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnterNonDiscardingScope"/> instead of <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnterDiscardingScope"/> to avoid this method being called at the end of a scope.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnterDiscardingScope">
            <summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope"/> for this transaction and enters it, making it the
            <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope"/> for the current thread. When the scope is left, <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Discard"/> is executed. This will
            discard this transaction and make the parent transaction (if any) writeable again.
            </summary>
            <returns>A new <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope"/> for this transaction with an automatic <see cref="F:Remotion.Data.DomainObjects.AutoRollbackBehavior.Discard"/>
            behavior.</returns>
            <remarks>
            <para>
            The created scope will not perform any automatic rollback, but it will return control to the parent transaction at its end if this
            transaction is a subtransaction.
            </para>
            <para>
            The new <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope"/> stores the previous <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope"/>. When this scope's
            <see cref="M:Remotion.Data.DomainObjects.ClientTransactionScope.Leave"/> method is called or the scope is disposed of, the previous scope is reactivated.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnterScope(Remotion.Data.DomainObjects.AutoRollbackBehavior)">
            <summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope"/> for this transaction with the given automatic rollback behavior and enters it,
            making it the <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope"/> for the current thread.
            </summary>
            <returns>A new <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope"/> for this transaction.</returns>
            <param name="rollbackBehavior">The automatic rollback behavior to be performed when the scope's <see cref="M:Remotion.Data.DomainObjects.ClientTransactionScope.Leave"/>
            method is called.</param>
            <remarks>
            <para>
            The new <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope"/> stores the previous <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope"/>. When this scope's
            <see cref="M:Remotion.Data.DomainObjects.ClientTransactionScope.Leave"/> method is called or the scope is disposed of, the previous scope is reactivated.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnterNonDiscardingScope">
            <summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope"/> for this transaction and enters it, making it the
            <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope"/> for the current thread. When the scope is left, this transaction is not discarded and the
            parent transaction (if any) is not made writeable.
            </summary>
            <returns>A new <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope"/> for this transaction with no automatic rollback behavior.</returns>
            <remarks>
            <para>
            The created scope will not perform any automatic rollback and it will not return control to the parent transaction at its end if this
            transaction is a subtransaction. You must explicitly call <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Discard"/> if you want to continue working with
            the parent transaction. This method is useful if you want to temporarily open a scope for a transaction, then open a scope for another
            transaction, then open a new scope for the first transaction again. In this case, the first scope must be a non-discarding scope, otherwise the
            transaction will be discarded and cannot be used for a second time.
            </para>
            <para>
            The new <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope"/> stores the previous <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope"/>. When this scope's
            <see cref="M:Remotion.Data.DomainObjects.ClientTransactionScope.Leave"/> method is called or the scope is disposed of, the previous scope is reactivated.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetEnlistedDomainObjects">
            <summary>
            Gets all domain objects enlisted in this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
            <value>The domain objects enlisted in this transaction.</value>
            <remarks>
            The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>s of the returned objects might not have been loaded yet. In that case, they will be loaded on first
            access of the respective objects' properties, and this might trigger an <see cref="T:Remotion.Data.DomainObjects.Persistence.ObjectsNotFoundException"/> if the container cannot be loaded.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetEnlistedDomainObject(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Returns the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> enlisted for the given <paramref name="objectID"/> via <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)"/>, or 
            <see langword="null"/> if no such object exists.
            </summary>
            <param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> for which to retrieve a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.</param>
            <returns>
            A <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with the given <paramref name="objectID"/> previously enlisted via <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)"/>,
            or <see langword="null"/> if no such object exists.
            </returns>
            <remarks>
            The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> of the returned object might not have been loaded yet. In that case, it will be loaded on first
            access of the object's properties, and this might trigger an <see cref="T:Remotion.Data.DomainObjects.Persistence.ObjectsNotFoundException"/> if the container cannot be loaded.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.IsEnlisted(Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Determines whether the specified <paramref name="domainObject"/> is enlisted in this transaction.
            </summary>
            <param name="domainObject">The domain object to be checked.</param>
            <returns>
            <see langword="true" /> if the specified domain object can be used in the context of this transaction; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Allows the given <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to be used in the context of this transaction without needing to explicitly reload it there.
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> should be loadable into this transaction (i.e. it must be present in the underlying data store or the
            ParentTransaction), but this is not enforced until first access to the object.
            </summary>
            <param name="domainObject">The object to be enlisted in this transaction.</param>
            <returns>True if the object was newly enlisted; false if it had already been enlisted in this transaction.</returns>
            <remarks>
            <para>
            Unlike <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetObject``1(Remotion.Data.DomainObjects.ObjectID)"/>, this method does not create a new <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> reference if the object
            hasn't been loaded yet, but instead
            marks the given <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> for use in this transaction. After this, the same object reference can be used in both the
            transaction it was originally created in and the transactions it has been enlisted in.
            </para>
            <para>
            Using a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> in two different transactions at the same time will result in its <see cref="P:Remotion.Data.DomainObjects.DomainObject.Properties"/>
            differing depending on which transaction is currently active.
            For example, if a property is changed (and even committed) in transaction A and the object
            has been enlisted in transaction B before transaction's A commit, transaction B will not see the changes committed by transaction A.
            </para>
            <para>
            If a certain <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> has already been associated with a certain <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> in this transaction, it is not
            possible to register another <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> reference with the same <see cref="P:Remotion.Data.DomainObjects.DomainObject.ID"/>.
            </para>
            <para>The data for the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is not loaded immediately by this method, but will be retrieved when the object is first
            used in this transaction. If the object has been deleted from the underlying database, access to such an object will result in an
            <see cref="T:Remotion.Data.DomainObjects.Persistence.ObjectsNotFoundException"/>.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The domain object cannot be enlisted, e.g., because another <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with the same
            <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> has already been associated with this transaction..</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="domainObject"/> parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.CheckDomainObjectForEnlisting(Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Checks whether the given <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> can be enlisted in this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>, throwing an 
            <see cref="T:System.InvalidOperationException"/> if it can't.
            </summary>
            <param name="domainObject">The domain object to check.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the <paramref name="domainObject"/> cannot be enlisted in this transaction.</exception>
            <remarks>
            The default implementation of this method checks whether the <paramref name="domainObject"/> has already been bound to another transaction. Sub-
            transactions can override this method to remove this check or perform additional checks.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObjects(System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DomainObject})">
            <summary>
            Calls <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)"/> for each <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> reference in the given collection.
            </summary>
            <param name="domainObjects">The domain objects to enlist.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="domainObjects"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">A domain object cannot be enlisted, because another <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with the same
            <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> has already been associated with this transaction.</exception>
            <remarks>This method also enlists objects that do not exist in the database; accessing such an object in the context of this transaction will
            result in an <see cref="T:Remotion.Data.DomainObjects.Persistence.ObjectsNotFoundException"/>.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObjects(Remotion.Data.DomainObjects.DomainObject[])">
            <summary>
            Calls <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)"/> for each <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> reference in the given collection.
            </summary>
            <param name="domainObjects">The domain objects to enlist.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="domainObjects"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">A domain object cannot be enlisted, because another <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with the same
            <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> has already been associated with this transaction.</exception>
            <remarks>This method also enlists objects that do not exist in the database; accessing such an object in the context of this transaction will
            result in an <see cref="T:Remotion.Data.DomainObjects.Persistence.ObjectsNotFoundException"/>.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnsureDataAvailable(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Ensures that the data of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with the given <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> has been loaded into this 
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. If it hasn't, this method loads the object's data.
            </summary>
            <param name="objectID">The domain object whose data must be loaded.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="objectID"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The given <paramref name="objectID"/> is invalid in this transaction.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.ObjectsNotFoundException">No data could be loaded for the given <paramref name="objectID"/> because the object was not
            found in the underlying data source.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnsureDataAvailable(System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.ObjectID})">
            <summary>
            Ensures that the data for the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s with the given <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> values has been loaded into this 
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. If it hasn't, this method loads the objects' data, performing a bulk load operation.
            </summary>
            <param name="objectIDs">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> values whose data must be loaded.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="objectIDs"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">One of the given <paramref name="objectIDs"/> cannot be used in this 
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">One of the given <paramref name="objectIDs"/> is invalid in this transaction.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.ObjectsNotFoundException">No data could be loaded for one or more of the given <paramref name="objectIDs"/> because the object 
            was not found in the underlying data source.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.CreateNewObjectID(Remotion.Data.DomainObjects.Mapping.ClassDefinition)">
            <summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> for the given class definition.
            </summary>
            <param name="classDefinition">The class definition to create a new <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> for.</param>
            <returns></returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnsureDataComplete(Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)">
            <summary>
            Ensures that the data of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPoint"/> with the given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID"/> has been loaded into this 
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. If it hasn't, this method loads the relation end point's data.
            </summary>
            <param name="endPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID"/> of the end point whose data must be loaded. In order to force a collection-valued 
            relation property to be loaded, pass the <see cref="P:Remotion.Data.DomainObjects.DomainObjectCollection.AssociatedEndPointID"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="endPointID"/> parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.CopyCollectionEventHandlers(Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Copies the event handlers defined on the given <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>'s collection properties from another transaction to this
            transaction.
            </summary>
            <param name="domainObject">The domain object the event handlers of whose collection properties are to be copied.</param>
            <param name="sourceTransaction">The transaction to copy the event handlers from.</param>
            <remarks>
            When a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instance is used in multiple transactions at the same time, its event handlers are shared across transactions,
            because they are registered on the instance itself, not in the context of a transaction. However, the event handlers defined on
            <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> properties of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> are not shared, because each collection instance is unique
            to one transaction. To avoid having to manually re-register all such event handlers in all transactions after calling
            <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)"/>, this method copies all collection event handlers from a source transaction to this transaction.
            </remarks>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.ObjectsNotFoundException">The <paramref name="domainObject"/> could not be found in either the current transaction or the
            <paramref name="sourceTransaction"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <paramref name="domainObject"/> is invalid in either the current transaction or the
            <paramref name="sourceTransaction"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.CopyTransactionEventHandlers(Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Copies the event handlers defined on the given <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> to this transaction.
            </summary>
            <param name="sourceTransaction">The transaction to copy the event handlers from.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.CreateSubTransaction">
            <summary>
            Initializes a new subtransaction with this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> as its <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.ParentTransaction"/>.
            </summary>
            <remarks>
            <para>
            When a subtransaction is created, the parent transaction is automatically made read-only and cannot be modified until the subtransaction
            returns control to it via <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Discard"/>. <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Discard"/> is automatically called when a
            scope created by <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnterDiscardingScope"/> is left.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.CreateSubTransaction(System.Func{Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.Infrastructure.InvalidObjects.IInvalidDomainObjectManager,Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager,Remotion.Data.DomainObjects.ClientTransaction})">
            <summary>
            Initializes a new subtransaction with this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> as its <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.ParentTransaction"/>. A custom transaction
            factory is used to instantiate the subtransaction. This allows subtransactions of types derived from <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>
            to be created. The factory must create a subtransaction whose <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.ParentTransaction"/> is this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>, otherwise
            this method throws an exception.
            </summary>
            <param name="subTransactionFactory">A custom implementation of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionComponentFactory"/> to use when instantiating
            the subtransaction.</param>
            <remarks>
            <para>
            When a subtransaction is created, the parent transaction is automatically made read-only and cannot be modified until the subtransaction
            returns control to it via <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Discard"/>. <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Discard"/> is automatically called when a
            scope created by <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnterDiscardingScope"/> is left.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.HasChanged">
            <summary>
            Returns whether at least one <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> in this <b>ClientTransaction</b> has been changed.
            </summary>
            <returns><see langword="true"/> if at least one <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> in this <b>ClientTransaction</b> has been changed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.Commit">
            <summary>
            Commits all changes within the <b>ClientTransaction</b> to the underlying data source.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.PersistenceException">Changes to objects from multiple storage providers were made.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.StorageProviderException">An error occurred while committing the changes to the data source.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.Rollback">
            <summary>
            Performs a rollback of all changes within the <b>ClientTransaction</b>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetObject(Remotion.Data.DomainObjects.ObjectID,System.Boolean)">
            <summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> that is already loaded or attempts to load it from the data source.
            </summary>
            <param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> that should be loaded. Must not be <see langword="null"/>.</param>
            <param name="includeDeleted">Indicates if the method should return <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s that are already deleted.</param>
            <returns>The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with the specified <paramref name="id"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectDeletedException"><paramref name="includeDeleted"/> is false and the DomainObject with <paramref name="id"/> has been deleted.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.ObjectsNotFoundException">The object could not be found in the database.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in this transaction.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.StorageProviderException">
              The Mapping does not contain a class definition for the given <paramref name="id"/>.<br/> -or- <br/>
              An error occurred while reading a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/>.<br/> -or- <br/>
              An error occurred while accessing the data source.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetObjectReference(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Gets a reference to a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with the given <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> from this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. If the
            transaction does not currently hold an object with this <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>, an object reference representing that <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> 
            is created without calling a constructor and without loading the object's data from the data source. This method does not check whether an
            object with the given <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> actually exists in the data source, and it will also return invalid or deleted objects.
            </summary>
            <param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> to get an object reference for.</param>
            <returns>An object with the given <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>, possibly in <see cref="F:Remotion.Data.DomainObjects.StateType.NotLoadedYet"/>, <see cref="F:Remotion.Data.DomainObjects.StateType.Deleted"/>,
            or <see cref="F:Remotion.Data.DomainObjects.StateType.Invalid"/> state.</returns>
            <remarks>
            <para>
            When an object with the given <paramref name="objectID"/> has already been enlisted in the transaction, that object is returned. Otherwise,
            an object in <see cref="F:Remotion.Data.DomainObjects.StateType.NotLoadedYet"/> state is created and enlisted without loading its data from the data source. In such a case,
            the object's data is loaded when it's first needed; e.g., when one of its properties is accessed or when 
            <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnsureDataAvailable(Remotion.Data.DomainObjects.ObjectID)"/> is called for its <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>. At that point, an
            <see cref="T:Remotion.Data.DomainObjects.Persistence.ObjectsNotFoundException"/> may be triggered when the object's data cannot be found.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="objectID"/> parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetInvalidObjectReference(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Gets a reference to a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> that is currently in <see cref="F:Remotion.Data.DomainObjects.StateType.Invalid"/> state. If the object is not actually
            invalid (check with <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.IsInvalid(Remotion.Data.DomainObjects.ObjectID)"/>), an exception is throws.
            </summary>
            <param name="objectID">The object ID to get the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> reference for.</param>
            <returns>An object with the given <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> in <see cref="F:Remotion.Data.DomainObjects.StateType.Invalid"/> state.</returns>
            <exception cref="T:System.InvalidOperationException">The object is not currently in <see cref="F:Remotion.Data.DomainObjects.StateType.Invalid"/> state.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.IsInvalid(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Determines whether the specified <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> has been marked invalid in the scope of this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
            <param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> to check.</param>
            <returns>
            	<see langword="true"/> if the specified <paramref name="objectID"/> is invalid; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetObjects``1(Remotion.Data.DomainObjects.ObjectID[])">
            <summary>
            Gets a number of objects that are already loaded or attempts to load them from the data source.
            If an object cannot be found, an exception is thrown.
            </summary>
            <typeparam name="T">The type of objects expected to be returned. Specify <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> if no specific type is expected.</typeparam>
            <param name="objectIDs">The IDs of the objects to be retrieved.</param>
            <returns>A list of objects of type <typeparamref name="T"/> corresponding to (and in the same order as) the IDs specified in 
            <paramref name="objectIDs"/>. This list might include deleted objects.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="objectIDs"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidCastException">One of the retrieved objects doesn't fit the expected type <typeparamref name="T"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">One of the retrieved objects is invalid in this transaction.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.ObjectsNotFoundException">No data could be loaded for one or more of the given <paramref name="objectIDs"/> because the object 
            was not found in the underlying data source.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetObjects``1(System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.ObjectID})">
            <summary>
            Gets a number of objects that are already loaded or attempts to load them from the data source.
            If an object cannot be found, an exception is thrown.
            </summary>
            <typeparam name="T">The type of objects expected to be returned. Specify <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> if no specific type is expected.</typeparam>
            <param name="objectIDs">The IDs of the objects to be retrieved.</param>
            <returns>A list of objects of type <typeparamref name="T"/> corresponding to (and in the same order as) the IDs specified in 
            <paramref name="objectIDs"/>. This list might include deleted objects.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="objectIDs"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidCastException">One of the retrieved objects doesn't fit the expected type <typeparamref name="T"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">One of the retrieved objects is invalid in this transaction.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.ObjectsNotFoundException">No data could be loaded for one or more of the given <paramref name="objectIDs"/> because the object 
            was not found in the underlying data source.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.TryGetObjects``1(Remotion.Data.DomainObjects.ObjectID[])">
            <summary>
            Gets a number of objects that are already loaded (including invalid objects) or attempts to load them from the data source. 
            If an object is not found, the result array will contain a <see langword="null"/> reference in its place.
            </summary>
            <typeparam name="T">The type of objects expected to be returned. Specify <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> if no specific type is expected.</typeparam>
            <param name="objectIDs">The IDs of the objects to be retrieved.</param>
            <returns>A list of objects of type <typeparamref name="T"/> corresponding to (and in the same order as) the IDs specified in 
            <paramref name="objectIDs"/>. This list can contain invalid and <see langword="null"/> <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> references.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="objectIDs"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidCastException">One of the retrieved objects doesn't fit the specified type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.TryGetObjects``1(System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.ObjectID})">
            <summary>
            Gets a number of objects that are already loaded (including invalid objects) or attempts to load them from the data source. 
            If an object is not found, the result array will contain a <see langword="null"/> reference in its place.
            </summary>
            <typeparam name="T">The type of objects expected to be returned. Specify <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> if no specific type is expected.</typeparam>
            <param name="objectIDs">The IDs of the objects to be retrieved.</param>
            <returns>A list of objects of type <typeparamref name="T"/> corresponding to (and in the same order as) the IDs specified in 
            <paramref name="objectIDs"/>. This list can contain invalid and <see langword="null"/> <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> references.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="objectIDs"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidCastException">One of the retrieved objects doesn't fit the specified type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetRelatedObject(Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)">
            <summary>
            Gets the related object of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID"/>.
            </summary>
            <param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID"/> to evaluate. It must refer to a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ObjectEndPoint"/>. Must not be <see langword="null"/>.</param>
            <returns>The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> that is the current related object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="relationEndPointID"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="relationEndPointID"/> does not refer to an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ObjectEndPoint"/></exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetOriginalRelatedObject(Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)">
            <summary>
            Gets the original related object of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID"/> at the point of instantiation, loading, commit or rollback.
            </summary>
            <param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID"/> to evaluate. It must refer to a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ObjectEndPoint"/>. Must not be <see langword="null"/>.</param>
            <returns>The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> that is the original related object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="relationEndPointID"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="relationEndPointID"/> does not refer to an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ObjectEndPoint"/></exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetRelatedObjects(Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)">
            <summary>
            Gets the related objects of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID"/>.
            </summary>
            <param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID"/> to evaluate. It must refer to a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/>. Must not be <see langword="null"/>.</param>
            <returns>A <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> containing the current related objects.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="relationEndPointID"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="relationEndPointID"/> does not refer to a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/></exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetOriginalRelatedObjects(Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)">
            <summary>
            Gets the original related objects of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID"/> at the point of instantiation, loading, commit or rollback.
            </summary>
            <param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID"/> to evaluate. It must refer to a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/>. Must not be <see langword="null"/>.</param>
            <returns>A <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> containing the original related objects.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="relationEndPointID"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="relationEndPointID"/> does not refer to a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint"/></exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.Delete(Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Deletes a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
            </summary>
            <param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to delete. Must not be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="domainObject"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">
              <paramref name="domainObject"/> belongs to a different <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. 
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.OnLoaded(Remotion.Data.DomainObjects.ClientTransactionEventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.Loaded"/> event.
            </summary>
            <param name="args">A <see cref="T:Remotion.Data.DomainObjects.ClientTransactionEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.OnCommitting(Remotion.Data.DomainObjects.ClientTransactionEventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.Committing"/> event.
            </summary>
            <param name="args">A <see cref="T:Remotion.Data.DomainObjects.ClientTransactionEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.OnCommitted(Remotion.Data.DomainObjects.ClientTransactionEventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.Committed"/> event.
            </summary>
            <param name="args">A <see cref="T:Remotion.Data.DomainObjects.ClientTransactionEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.OnRollingBack(Remotion.Data.DomainObjects.ClientTransactionEventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.RollingBack"/> event.
            </summary>
            <param name="args">A <see cref="T:Remotion.Data.DomainObjects.ClientTransactionEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.OnRolledBack(Remotion.Data.DomainObjects.ClientTransactionEventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.RolledBack"/> event.
            </summary>
            <param name="args">A <see cref="T:Remotion.Data.DomainObjects.ClientTransactionEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransaction.OnSubTransactionCreated(Remotion.Data.DomainObjects.SubTransactionCreatedEventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.SubTransactionCreated"/> event.
            </summary>
            <param name="eventArgs">A <see cref="T:Remotion.Data.DomainObjects.SubTransactionCreatedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransaction.Current">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> currently associated with this thread, or <see langword="null"/> if no such transaction exists.
            </summary>
            <value>The current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> for the active thread, or <see langword="null"/> if no transaction is associated with it.</value>
            <remarks>This method is a shortcut for calling <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.CurrentTransaction"/>, but it doesn't throw an exception but
            return <see langword="null"/> if no transaction exists for the current thread.
            </remarks>
        </member>
        <member name="E:Remotion.Data.DomainObjects.ClientTransaction.SubTransactionCreated">
            <summary>
            Occurs when the <b>ClientTransaction</b> has created a subtransaction.
            </summary>
        </member>
        <member name="E:Remotion.Data.DomainObjects.ClientTransaction.Loaded">
            <summary>
            Occurs after the <b>ClientTransaction</b> has loaded a new object.
            </summary>
        </member>
        <member name="E:Remotion.Data.DomainObjects.ClientTransaction.Committing">
            <summary>
            Occurs immediately before the <b>ClientTransaction</b> performs a <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Commit"/> operation.
            </summary>
        </member>
        <member name="E:Remotion.Data.DomainObjects.ClientTransaction.Committed">
            <summary>
            Occurs immediately after the <b>ClientTransaction</b> has successfully performed a <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Commit"/> operation.
            </summary>
        </member>
        <member name="E:Remotion.Data.DomainObjects.ClientTransaction.RollingBack">
            <summary>
            Occurs immediately before the <b>ClientTransaction</b> performs a <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Rollback"/> operation.
            </summary>
        </member>
        <member name="E:Remotion.Data.DomainObjects.ClientTransaction.RolledBack">
            <summary>
            Occurs immediately after the <b>ClientTransaction</b> has successfully performed a <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Rollback"/> operation.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransaction.ParentTransaction">
            <summary>
            Gets the parent transaction for this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>, or <see langword="null"/> if this transaction is a root transaction.
            </summary>
            <value>The parent transaction, or <see langword="null"/> if this transaction is a root transaction.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransaction.SubTransaction">
            <summary>
            Gets the active sub-transaction of this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>, or <see langword="null"/> if this transaction has no sub-transaction.
            </summary>
            <value>The active sub-transaction, or <see langword="null"/> if this transaction has no sub-transaction.</value>
            <remarks>When the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.SubTransaction"/> is discarded, this property is automatically set to <see langword="null"/>.</remarks>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransaction.RootTransaction">
            <summary>
            Gets the root transaction of this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>, that is, the top-level transaction in a row of sub-transactions.
            If this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> is itself a root transaction (i.e, it has no <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.ParentTransaction"/>), it is returned.
            </summary>
            <value>The root transaction of this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransaction.LeafTransaction">
            <summary>
            Gets the lowest sub-transaction of this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>, that is, the bottom-most transaction in a row of sub-transactions.
            If this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> is itself the leaf transaction (i.e, it has no <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.SubTransaction"/>), it itself is 
            returned.
            </summary>
            <value>The leaf transaction of this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransaction.PersistenceStrategy">
            <summary>
            Gets the persistence strategy associated with this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. The <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.PersistenceStrategy"/> is used to load
            data from the underlying data source without actually registering the data in this transaction, and it can be used to store data in the
            underlying data source.
            </summary>
            <value>The persistence strategy associated with this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransaction.ID">
            <summary>
            Returns a <see cref="T:System.Guid"/> that uniquely identifies this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransaction.IsReadOnly">
            <summary>
            Indicates whether this transaction is set read-only.
            </summary>
            <value>True if this instance is set read-only; otherwise, false.</value>
            <remarks>Transactions are set read-only while there exist open subtransactions for them. A read-only transaction can only be used for
            operations that do not cause any change of transaction state. Most reading operations that do not require objects to be loaded
            from the data store are safe to be used on read-only transactions, but any method that would cause a state change will throw an exception.
            </remarks>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransaction.IsDiscarded">
            <summary>
            Returns whether this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> has been discarded. A transaction is discarded when its <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Discard"/> or
            <see cref="M:Remotion.Data.ITransaction.Release"/> methods are called or when it has been used in a discarding scope.
            </summary>
            <value>True if this transaction has been discarded.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransaction.Extensions">
            <summary>
            Gets the collection of <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/>s of this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> hierarchy.
            </summary>
            <remarks>
            <para>
              Use <see cref="M:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection.Add(Remotion.Data.DomainObjects.IClientTransactionExtension)"/> and <see cref="M:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection.Remove(System.String)"/> 
              to register and unregister an extension.
            </para>
            <para>
              The order of the extensions in this collection is the order in which they are notified.
            </para>
            <para>
            The collection of extensions is the same for a parent transactions and all of its (direct and indirect) substransactions.
            </para>
            </remarks>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransaction.QueryManager">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.IQueryManager"/> of the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransaction.ListenerManager">
            <summary>
            Gets the transaction event sink for this transaction.
            </summary>
            <value>The transaction event sink for this transaction.</value>
            <remarks>
            Objects such as <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.DataManager"/>, changes to which logically represent changes to the transaction, can use the object returned by
            this property in order to inform the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> and its listeners of events.
            </remarks>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransaction.EnlistedDomainObjectCount">
            <summary>
            Gets the number of domain objects enlisted in this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
            <value>The number of domain objects enlisted in this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransaction.DataManager">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManager"/> of this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransaction.ApplicationData">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> to store application specific objects 
            within the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> hierarchy.
            </summary>
            <remarks>
            <para>
            To store and access values create project specific <see cref="T:System.Enum"/>(s) which ensure namespace separation of keys in the dictionary.
            </para>
            <para>
            Note that the application data collection is not managed in a transactional way. Also, it is the same for a parent transactions and all of
            its (direct and indirect) substransactions.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.BindingClientTransaction.CreateRootTransaction">
            <summary>
            Do not use this method, use <see>ClientTransaction.CreateRootTransaction</see> instead.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper"/> provides a wrapper for ClientTransactions that implements the <see cref="T:Remotion.Data.ITransaction"/> interface.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.To``1">
            <summary> Gets the native transaction.</summary>
            <typeparam name="TTransaction">The type of the transaction abstracted by this instance.</typeparam>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.Commit">
            <summary> Commits the transaction. </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.Rollback">
            <summary> Rolls the transaction back. </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.CreateChild">
            <summary> Creates a new child transaction for the current transaction. </summary>
            <returns> 
              A new instance of the of a type implementing <see cref="T:Remotion.Data.ITransaction"/> that has the creating transaction
              as a parent.
            </returns>
            <exception cref="T:System.NotSupportedException"> 
              Thrown if the method is invoked while <see cref="P:Remotion.Data.ITransaction.CanCreateChild"/> is <see langword="false"/>.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.Release">
            <summary> Allows the transaction to implement clean up logic. </summary>
            <remarks> This method is called when the transaction is no longer needed. </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.EnterScope">
            <summary>
            Enters a new scope for the given transaction, making it the active transaction while the scope exists.
            </summary>
            <returns>The scope keeping the transaction active.</returns>
            <remarks>The scope must not discard the transaction when it is left.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.RegisterObjects(System.Collections.IEnumerable)">
            <summary>Registers the <paramref name="objects"/> with the transaction.</summary>
            <param name="objects">The objects to be registered. Must not be <see langword="null" />.</param>
            <remarks>If the type of of of the objects is not supported by the transaction, the object must be ignored.</remarks>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.CanCreateChild">
            <summary> 
              Gets a flag that describes whether the transaction supports creating child transactions by invoking
              <see cref="M:Remotion.Data.ITransaction.CreateChild"/>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.Parent">
            <summary> Gets the transaction's parent transaction. </summary>
            <value> 
              An instance of the of a type implementing <see cref="T:Remotion.Data.ITransaction"/> or <see langword="null"/> if the
              transaction is a root transaction.
            </value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.IsChild">
            <summary>Gets a flag describing whether the transaction is a child transaction.</summary>
            <value> <see langword="true"/> if the transaction is a child transaction. </value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.HasUncommittedChanges">
            <summary>Gets a flag describing whether the transaction has been changed since the last commit or rollback.</summary>
            <value> <see langword="true"/> if the transaction has uncommitted changes. </value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.IsReadOnly">
            <summary>Gets a flag describing whether the transaction is in a read-only state.</summary>
            <value> <see langword="true"/> if the transaction cannot be modified. </value>
            <remarks>Implementations that do not support read-only transactions should always return false.</remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.DomainObjectTransactionContextIndexer">
            <summary>
            Provides an indexing property to access a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>'s transaction-dependent context for a specific <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.DomainObjectCheckUtility">
            <summary>
            Contains commonly used get and check methods dealing with <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.DomainObjectCheckUtility.EnsureNotInvalid(Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Checks if an object is invalid in the given <paramref name="clientTransaction"/>, and, if yes, throws an <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/>.
            </summary>
            <param name="domainObject">The domain object to check.</param>
            <param name="clientTransaction">The transaction to check the object against.</param>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in the given <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.DomainObjectCheckUtility.EnsureNotDeleted(Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Checks if an object has been deleted in the given <paramref name="clientTransaction"/>, and, if yes, throws an 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectDeletedException"/>.
            </summary>
            <param name="domainObject">The domain object to check.</param>
            <param name="clientTransaction">The transaction to check the object against.</param>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectDeletedException">The object has been deleted in the given <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.DomainObjectCheckUtility.CheckIfRightTransaction(Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Checks if the given <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> can be used in the given transaction, and, if not, throws a 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException"/>. If the method succeeds, <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.IsEnlisted(Remotion.Data.DomainObjects.DomainObject)"/> is guaranteed to be
            <see langword="true"/> for the given <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
            </summary>
            <param name="domainObject">The domain object to check.</param>
            <param name="clientTransaction">The transaction to check the object against.</param>
            <returns>Returns <see langword="true"/> if the method succeeds without throwing an exception. This return value is available so that the 
            method can be used from within an expression.</returns>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The object cannot be used in the given transaction.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.GetPropertyKind(Remotion.Data.DomainObjects.Mapping.ClassDefinition,System.String)">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyKind"/> for a given property identifier and class definition.
            </summary>
            <param name="classDefinition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/> object describing the property's declaring class.</param>
            <param name="propertyIdentifier">The property identifier.</param>
            <returns>The <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyKind"/> of the property.</returns>
            <exception cref="T:System.ArgumentNullException">One of the method's arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The domain object does not have a property with the given identifier.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.GetPropertyType(Remotion.Data.DomainObjects.Mapping.ClassDefinition,System.String)">
            <summary>
            Returns the value type of the given property.
            </summary>
            <param name="classDefinition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/> object describing the property's declaring class.</param>
            <param name="propertyIdentifier">The property identifier.</param>
            <returns>The property's value type.</returns>
            <remarks>For simple value properties, this returns the simple property type. For related objects, it
            returns the related object's type. For related object collections, it returns type <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/>, where "T" is the related
            objects' type.</remarks>
            <exception cref="T:System.ArgumentNullException">One of the method's arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The class definition does not have a property with the given identifier.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.GetPropertyDefinitionObjects(Remotion.Data.DomainObjects.Mapping.ClassDefinition,System.String)">
            <summary>
            Returns mapping objects for the given property.
            </summary>
            <param name="classDefinition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/> object describing the property's declaring class.</param>
            <param name="propertyIdentifier">The property identifier.</param>
            <returns>The property's <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition"/> and <see cref="T:Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition"/> objects.</returns>
            <exception cref="T:System.ArgumentNullException">One of the method's arguments is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The class definition does not have a property with the given identifier.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData"/> by comparing
            <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyIdentifier"/> and <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.ClassDefinition"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equivalent to the current <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData"/>, ie. it is another
            instance of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData"/> with equal <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyIdentifier"/> and <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.ClassDefinition"/>; otherwise, false.
            </returns>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.ClassDefinition">
            <summary>
            The definition object for the property's declaring class.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.Kind">
            <summary>
            Indicates which kind of property is encapsulated by this structure.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyIdentifier">
            <summary>
            The identifier for the property encapsulated by this structure.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyType">
            <summary>
            The property value type. For simple value properties, this is the simple property type. For related objects, this
            is the related object's type. For related object collections, this is <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/>, where "T" is the
            related objects' type.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyDefinition">
            <summary>
            The encapsulated object's property definition object (can be <see langword="null"/>).
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.RelationEndPointDefinition">
            <summary>
            The encapsulated object's relation end point definition object (can be <see langword="null"/>).
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.PropertyKind">
            <summary>
            Indicates the kind of a <see cref="T:Remotion.Data.DomainObjects.DomainObject">DomainObject's</see> property.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.Infrastructure.PropertyKind.PropertyValue">
            <summary>
            The property is a simple value.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.Infrastructure.PropertyKind.RelatedObject">
            <summary>
            The property is a single related domain object.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.Infrastructure.PropertyKind.RelatedObjectCollection">
            <summary>
            The property is a collection of related domain objects.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DomainImplementation.LifetimeService">
            <summary>
            Provides functionality to instantiate, get, and delete <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainImplementation.LifetimeService.NewObject(Remotion.Data.DomainObjects.ClientTransaction,System.Type,Remotion.Reflection.ParamList)">
            <summary>
            Returns a new instance of a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with the supplied constructor arguments in the given <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</param>
            <param name="domainObjectType">The <see cref="T:System.Type"/> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to be created.</param>
            <param name="constructorParameters">A <see cref="T:Remotion.Reflection.ParamList"/> encapsulating the parameters to be passed to the constructor. Instantiate this
            by using one of the <see cref="M:Remotion.Reflection.ParamList.Create``2(``0,``1)"/> methods.</param>
            <returns>A new domain object instance.</returns>
            <remarks>
            	<para>
            Objects created by this factory method are not directly instantiated; instead a proxy is dynamically created, which will assist in
            management tasks at runtime.
            </para>
            	<para>
            This method should only be used by infrastructure code, ordinary code should use <see cref="M:Remotion.Data.DomainObjects.DomainObject.NewObject``1(Remotion.Reflection.ParamList)"/>.
            </para>
            	<para>For more information, also see the constructor documentation (<see cref="T:Remotion.Data.DomainObjects.DomainObject"/>).</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">One of the parameters is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Mapping.MappingException">The <paramref name="domainObjectType"/> parameter does not specify a domain object type with mapping information.</exception>
            <exception cref="T:System.ArgumentException">The type <paramref name="domainObjectType"/> cannot be extended to a proxy, for example because it is sealed
            or abstract and non-instantiable.</exception>
            <exception cref="T:System.MissingMethodException">The <paramref name="domainObjectType"/> does not implement the required constructor (see Remarks
            section).
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainImplementation.LifetimeService.GetObject(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.ObjectID,System.Boolean)">
            <summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> that already exists or attempts to load it from the data source.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</param>
            <param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> that should be loaded. Must not be <see langword="null"/>.</param>
            <param name="includeDeleted">Indicates if the method should return <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s that are already deleted.</param>
            <returns>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with the specified <paramref name="objectID"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="clientTransaction"/> or <paramref name="objectID"/> are <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.ObjectsNotFoundException">The object could not be found in the data source.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in this transaction.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.StorageProviderException">
            The Mapping does not contain a class definition for the given <paramref name="objectID"/>.<br/> -or- <br/>
            An error occurred while reading a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/>.<br/> -or- <br/>
            An error occurred while accessing the data source.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectDeletedException">The object has already been deleted and the <paramref name="includeDeleted"/> flag is 
            <see langword="false"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainImplementation.LifetimeService.GetObjectReference(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Gets a reference to a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with the given <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> in a specific <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. If the
            transaction does not currently hold an object with this <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>, an object reference representing that <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>
            is created without calling a constructor and without loading the object's data from the data source. This method does not check whether an
            object with the given <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> actually exists in the data source.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> to get the reference from.</param>
            <param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> to get an object reference for.</param>
            <returns>
            An object with the given <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>, possibly in <see cref="F:Remotion.Data.DomainObjects.StateType.NotLoadedYet"/> state.
            </returns>
            <remarks>
            When an object with the given <paramref name="objectID"/> has already been enlisted in the transaction, that object is returned. Otherwise,
            an object in <see cref="F:Remotion.Data.DomainObjects.StateType.NotLoadedYet"/> state is created and enlisted without loading its data from the data source. In such a case,
            the object's data is loaded when it's first needed; e.g., when one of its properties is accessed or when
            <see cref="M:Remotion.Data.DomainObjects.DomainObject.EnsureDataAvailable"/> is called on it. At that point, an
            <see cref="T:Remotion.Data.DomainObjects.Persistence.ObjectsNotFoundException"/> may be triggered when the object's data cannot be found.
            </remarks>
            <exception cref="T:System.ArgumentNullException">One of the parameters passed to this method is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object with the given <paramref name="objectID"/> is invalid in the given 
            <paramref name="clientTransaction"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainImplementation.LifetimeService.DeleteObject(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Deletes the given <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
            </summary>
            <param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</param>
            <param name="objectToBeDeleted">The object to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">One of the parameters is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in the given <paramref name="clientTransaction"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The object cannot be used in the current transaction.</exception>
            <remarks>See also <see cref="M:Remotion.Data.DomainObjects.DomainObject.Delete"/>.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Linq.EagerFetchingExtensionMethods.FetchMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
            <summary>
            Specifies that, when the <paramref name="query"/> is executed, the relation indicated by <paramref name="relatedObjectSelector"/> should be eagerly
            fetched if supported by the query provider implementation. The relation must be a collection property.
            </summary>
            <typeparam name="TOriginating">The type of the originating query result objects.</typeparam>
            <typeparam name="TRelated">The type of the related objects to be eager-fetched.</typeparam>
            <param name="query">The query for which the fetch request should be made.</param>
            <param name="relatedObjectSelector">A lambda expression selecting the related objects to be eager-fetched.</param>
            <returns>A <see cref="T:Remotion.Linq.EagerFetching.FluentFetchRequest`2"/> object on which further fetch requests can be made. The subsequent fetches start from the 
            related objects fetched by the original request created by this method.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Linq.EagerFetchingExtensionMethods.FetchOne``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Specifies that, when the <paramref name="query"/> is executed, the relation indicated by <paramref name="relatedObjectSelector"/> should be eagerly
            fetched if supported by the query provider implementation. The relation must be of cardinality one.
            </summary>
            <typeparam name="TOriginating">The type of the originating query result objects.</typeparam>
            <typeparam name="TRelated">The type of the related objects to be eager-fetched.</typeparam>
            <param name="query">The query for which the fetch request should be made.</param>
            <param name="relatedObjectSelector">A lambda expression selecting the related object to be eager-fetched.</param>
            <returns>A <see cref="T:Remotion.Linq.EagerFetching.FluentFetchRequest`2"/> object on which further fetch requests can be made. The subsequent fetches start from the 
            related object fetched by the original request created by this method.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Linq.EagerFetchingExtensionMethods.ThenFetchMany``3(Remotion.Linq.EagerFetching.FluentFetchRequest{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2}}})">
            <summary>
            Specifies that, when the previous fetch request is executed, the relation indicated by <paramref name="relatedObjectSelector"/> should be 
            eagerly fetched, too, if supported by the query provider implementation. The relation must be a collection property.
            </summary>
            <typeparam name="TRelated">The type of the next related objects to be eager-fetched.</typeparam>
            <typeparam name="TQueried">The type of the objects returned by the query.</typeparam>
            <typeparam name="TFetch">The type of object from which the recursive fetch operation should be made.</typeparam>
            <param name="query">The query for which the fetch request should be made.</param>
            <param name="relatedObjectSelector">A lambda expression selecting the next related objects to be eager-fetched.</param>
            <returns>A <see cref="T:Remotion.Linq.EagerFetching.FluentFetchRequest`2"/> object on which further recursive fetch requests can be made. The subsequent fetches start 
            from the related objects fetched by the fetch request created by this method.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Linq.EagerFetchingExtensionMethods.ThenFetchOne``3(Remotion.Linq.EagerFetching.FluentFetchRequest{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Specifies that, when the previous fetch request is executed, the relation indicated by <paramref name="relatedObjectSelector"/> should be 
            eagerly fetched, too, if supported by the query provider implementation. The relation must be a collection property.
            </summary>
            <typeparam name="TRelated">The type of the next related objects to be eager-fetched.</typeparam>
            <typeparam name="TQueried">The type of the objects returned by the query.</typeparam>
            <typeparam name="TFetch">The type of object from which the recursive fetch operation should be made.</typeparam>
            <param name="query">The query for which the fetch request should be made.</param>
            <param name="relatedObjectSelector">A lambda expression selecting the next related objects to be eager-fetched.</param>
            <returns>A <see cref="T:Remotion.Linq.EagerFetching.FluentFetchRequest`2"/> object on which further recursive fetch requests can be made. The subsequent fetches start 
            from the related objects fetched by the fetch request created by this method.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Mapping.IMappingNameResolver.GetPropertyName(Remotion.Reflection.IPropertyInformation)">
            <summary>
            Returns the mapping name for the given <paramref name="propertyInformation"/>.
            </summary>
            <param name="propertyInformation">The property whose mapping name should be retrieved.</param>
            <returns>The name of the given <paramref name="propertyInformation"/> as used internally by the mapping.</returns>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.ReflectionBasedNameResolver">
            <summary>
            Resolves <see cref="T:System.Reflection.PropertyInfo"/> objects into property names and the other way around.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Mapping.ReflectionBasedNameResolver.GetPropertyName(Remotion.Reflection.IPropertyInformation)">
            <summary>
            Returns the mapping name for the given <paramref name="propertyInformation"/>.
            </summary>
            <param name="propertyInformation">The property whose mapping name should be retrieved.</param>
            <returns>The name of the given <paramref name="propertyInformation"/> as used internally by the mapping.</returns>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.RelationEndPointDefinitionExtensions">
            <summary>
            Provides extension methods for <see cref="T:Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.RelationKindType">
            <summary>
            Defines the kind of a given <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationDefinition"/>.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.Mapping.RelationKindType.OneToOne">
            <summary>
            There is a one-to-one relationship between referenced objects.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.Mapping.RelationKindType.OneToMany">
            <summary>
            There is a one-to-many (or many-to-one) relationship between referenced objects.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.Mapping.RelationKindType.Unidirectional">
            <summary>
            There is a one-to-many relationship between referenced objects, but only the "many" side has a reference to its one related object; there
            is no back-reference to the many objects from the "one" side.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObject">
            <summary>
            Provides a base class for bindable <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> classes.
            </summary>
            <remarks>
            Deriving from this base class is equivalent to deriving from the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> class and applying the
            <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectAttribute"/> to the derived class.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DomainObject">
            <summary>
            Base class for all objects that are persisted by the framework.
            </summary>
            <remarks>
            <para>
            If a class implementing <see cref="T:System.Runtime.Serialization.ISerializable"/> is derived from this base class, it must provide a deserialization constructor invoking
            this class' deserialization constructor, and it must call <see cref="M:Remotion.Data.DomainObjects.DomainObject.BaseGetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> from the <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            implementation.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.NewObject``1">
            <summary>
            Returns a new instance of a concrete domain object for the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. The object is constructed
            using the default constructor in the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/> <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
            <typeparam name="T">The concrete type to be implemented by the object.</typeparam>
            <returns>A new domain object instance.</returns>
            <remarks>
            <para>
            Objects created by this factory method are not directly instantiated; instead a proxy is dynamically created, which will assist in 
            management tasks at runtime.
            </para>
            <para>This method should not be directly invoked by a user, but instead by static factory methods of classes derived from
            <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.</para>
            <para>For more information, also see the constructor documentation (<see cref="M:Remotion.Data.DomainObjects.DomainObject.#ctor"/>).</para>
            </remarks>
            <seealso cref="M:Remotion.Data.DomainObjects.DomainObject.#ctor"/>
            <exception cref="T:System.ArgumentException">The type <typeparamref name="T"/> cannot be extended to a proxy, for example because it is sealed
            or abstract and non-instantiable.</exception>
            <exception cref="T:System.MissingMethodException">The given type <typeparamref name="T"/> does not implement the required protected
            constructor (see Remarks section).
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.NewObject``1(Remotion.Reflection.ParamList)">
            <summary>
            Returns a new instance of a concrete domain object for the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. The object is constructed
            using the supplied constructor arguments in the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/> <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
            <typeparam name="T">The concrete type to be implemented by the object.</typeparam>
            <param name="constructorParameters">A <see cref="T:Remotion.Reflection.ParamList"/> encapsulating the parameters to be passed to the constructor. Instantiate this
            by using one of the <see cref="M:Remotion.Reflection.ParamList.Create``2(``0,``1)"/> methods.</param>
            <returns>A new domain object instance.</returns>
            <remarks>
            <para>
            Objects created by this factory method are not directly instantiated; instead a proxy is dynamically created, which will assist in 
            management tasks at runtime.
            </para>
            <para>This method should not be directly invoked by a user, but instead by static factory methods of classes derived from
            <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.</para>
            <para>For more information, also see the constructor documentation (<see cref="M:Remotion.Data.DomainObjects.DomainObject.#ctor"/>).</para>
            </remarks>
            <seealso cref="M:Remotion.Data.DomainObjects.DomainObject.#ctor"/>
            <exception cref="T:System.ArgumentException">The type <typeparamref name="T"/> cannot be extended to a proxy, for example because it is sealed
            or abstract and non-instantiable.</exception>
            <exception cref="T:System.MissingMethodException">The given type <typeparamref name="T"/> does not implement the required protected
            constructor (see Remarks section).
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.GetObject``1(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> that is already loaded or attempts to load it from the data source.
            </summary>
            <param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> that should be loaded. Must not be <see langword="null"/>.</param>
            <typeparam name="T">The expected type of the concrete <see cref="T:Remotion.Data.DomainObjects.DomainObject"/></typeparam>
            <returns>The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with the specified <paramref name="id"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.StorageProviderException">
              The Mapping does not contain a class definition for the given <paramref name="id"/>.<br/> -or- <br/>
              An error occurred while reading a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/>.<br/> -or- <br/>
              An error occurred while accessing the data source.
            </exception>
            <exception cref="T:System.MissingMethodException">The concrete <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> doesn't implement the required constructor.</exception>
            <exception cref="T:System.InvalidCastException">The loaded <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is not of the expected type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.GetObject``1(Remotion.Data.DomainObjects.ObjectID,System.Boolean)">
            <summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> that is already loaded or attempts to load it from the data source.
            </summary>
            <param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> that should be loaded. Must not be <see langword="null"/>.</param>
            <param name="includeDeleted">Indicates if the method should return <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s that are already deleted.</param>
            <typeparam name="T">The expected type of the concrete <see cref="T:Remotion.Data.DomainObjects.DomainObject"/></typeparam>
            <returns>The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with the specified <paramref name="id"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.StorageProviderException">
              The Mapping does not contain a class definition for the given <paramref name="id"/>.<br/> -or- <br/>
              An error occurred while reading a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/>.<br/> -or- <br/>
              An error occurred while accessing the data source.
            </exception>
            <exception cref="T:System.MissingMethodException">The concrete <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> doesn't implement the required constructor.</exception>
            <exception cref="T:System.InvalidCastException">The loaded <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is not of the expected type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.#ctor">
            <summary>
            Initializes a new <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
            <remarks>
            <para>
            Any constructors implemented on concrete domain objects should delegate to this base constructor. As domain objects generally should 
            not be constructed via the
            <c>new</c> operator, these constructors must remain protected, and the concrete domain objects should have a static "NewObject" method,
            which delegates to <see cref="M:Remotion.Data.DomainObjects.DomainObject.NewObject``1(Remotion.Reflection.ParamList)"/>, passing it the required constructor arguments.
            </para>
            <para>
            It is safe to access virtual properties that are automatically implemented by the framework from constructors because this base constructor
            prepares everything necessary for them to work.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> class in the process of deserialization.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> coming from the .NET serialization infrastructure.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> coming from the .NET serialization infrastructure.</param>
            <remarks>Be sure to call this base constructor from the deserialization constructor of any concrete <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> type
            implementing the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.GetBindingTransaction">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> this <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instance was bound to. If the object has not been 
            bound, this method throws an exception. Use <see cref="P:Remotion.Data.DomainObjects.DomainObject.HasBindingTransaction"/> to check whether the object has been boung to a 
            <see cref="T:Remotion.Data.DomainObjects.Infrastructure.BindingClientTransaction"/> or not.
            </summary>
            <value>The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> this object was bound to, or <see langword="null"/>.</value>
            <exception cref="T:System.InvalidOperationException">The object has not been bound.</exception>
            <remarks>
            If a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> has been bound to a <see cref="T:Remotion.Data.DomainObjects.Infrastructure.BindingClientTransaction"/>, its properties are always accessed in the context of that
            <see cref="T:Remotion.Data.DomainObjects.Infrastructure.BindingClientTransaction"/> instead of the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/> transaction. See 
            <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.CreateBindingTransaction"/> for more information.
            </remarks>
            <seealso cref="M:Remotion.Data.DomainObjects.ClientTransaction.CreateBindingTransaction"/>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.PerformConstructorCheck">
            <summary>
            Ensures that <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances are not created via constructor checks.
            </summary>
            <remarks>
            The default implementation of this method throws an exception. When the runtime code generation invoked via <see cref="M:Remotion.Data.DomainObjects.DomainObject.NewObject``1"/>
            generates a concrete <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> type, it overrides this method to disable the exception. This ensures that 
            <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances cannot be created simply by calling the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>'s constructor.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.BaseGetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the base data needed to deserialize a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instance.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> coming from the .NET serialization infrastructure.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> coming from the .NET serialization infrastructure.</param>
            <remarks>Be sure to call this method from the <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> implementation of any concrete
            <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> type implementing the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.Initialize(Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Initializes a new <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> during a call to <see cref="M:Remotion.Data.DomainObjects.DomainObject.NewObject``1"/> or <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetObject``1(Remotion.Data.DomainObjects.ObjectID)"/>. This method
            is automatically called by the framework and should not normally be invoked by user code.
            </summary>
            <param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> to associate the new <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with.</param>
            <param name="bindingTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> to bind the new <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to, or 
            <see langword="null"/> if the object should not be bound.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="id"/> or <paramref name="bindingTransaction"/> parameter is null.</exception>
            <exception cref="T:System.InvalidOperationException">This <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> has already been initialized.</exception>
            <remarks>This method is always called exactly once per <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instance by the framework. It sets the object's 
            <see cref="P:Remotion.Data.DomainObjects.DomainObject.ID"/> and enlists it with the given <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.GetType">
            <summary>
            GetType might return a <see cref="T:System.Type"/> object for a generated class, which is usually not what is expected.
            <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetPublicDomainObjectType"/> can be used to get the Type object of the original underlying domain object type. If
            the <see cref="T:System.Type"/> object for the generated class is explicitly required, this object can be cast to 'object' before calling GetType.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.GetPublicDomainObjectType">
            <summary>
            Returns the public type representation of this domain object, i.e. the type object visible to mappings, database, etc.
            </summary>
            <returns>The public type representation of this domain object.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.GetPublicDomainObjectTypeImplementation">
            <summary>
            Implements the functionality required by <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetPublicDomainObjectType"/>. This is a separate method to avoid having to make the 
            virtual call in the constructor. The implementation of this class must expect calls from the constructor of a base class.
            </summary>
            <returns>The public type representation of this domain object.</returns>
            <remarks>A domain object should override this method if it wants to impersonate one of its base types. The framework will handle this object
            as if it was of the type returned by this method and ignore its actual type.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.ToString">
            <summary>
            Returns a textual representation of this object's <see cref="P:Remotion.Data.DomainObjects.DomainObject.ID"/>.
            </summary>
            <returns>
            A textual representation of <see cref="P:Remotion.Data.DomainObjects.DomainObject.ID"/>.
            </returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.MarkAsChanged">
            <summary>
            Marks the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> as changed in the default transaction, ie. in its binding transaction or - if
            none - <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/>. If the object's previous <see cref="P:Remotion.Data.DomainObjects.DomainObject.State"/> was <see cref="F:Remotion.Data.DomainObjects.StateType.Unchanged"/>, it
            will be <see cref="F:Remotion.Data.DomainObjects.StateType.Changed"/> after this method has been called.
            </summary>
            <exception cref="T:System.InvalidOperationException">This object is not in state <see cref="F:Remotion.Data.DomainObjects.StateType.Changed"/> or <see cref="F:Remotion.Data.DomainObjects.StateType.Unchanged"/>.
            New or deleted objects cannot be marked as changed.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in the transaction.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The object cannot be used in the current transaction.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.EnsureDataAvailable">
            <summary>
            Ensures that this <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>'s data has been loaded into the default transaction, ie. in its binding transaction or - if
            none - <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/>. If it hasn't, this method causes the object's data to be loaded.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in the transaction.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The object cannot be used in the current transaction.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.ObjectsNotFoundException">No data could be loaded for this <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> because the object was not
            found in the data source.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.Delete">
            <summary>
            Deletes the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> in the default transaction, ie. in its binding transaction or - if
            none - <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/>.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in the transaction.</exception>
            <remarks>To perform custom actions when a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is deleted <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnDeleting(System.EventArgs)"/> and <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnDeleted(System.EventArgs)"/> should be overridden.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.RaiseReferenceInitializatingEvent">
            <summary>
            Calls the <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnReferenceInitializing"/> method, setting a flag indicating that no mapped properties must be used.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.OnLoaded">
            <summary>
            Calls the <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnLoaded(Remotion.Data.DomainObjects.LoadMode)"/> method with the right <see cref="T:Remotion.Data.DomainObjects.LoadMode"/> parameter.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.OnReferenceInitializing">
            <summary>
            This method is invoked while this <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is being initialized. This occurs whenever a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> 
            is initialized, no matter whether the object is created, loaded, transported, cloned, or somehow else instantiated, and it occurs as early 
            as possible, after the object was enlisted with a transaction and at a point of time where it is safe to access the <see cref="P:Remotion.Data.DomainObjects.DomainObject.ID"/> of the 
            object. The <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnReferenceInitializing"/> notification occurs exactly once per DomainObject, and its purpose is the initialization of 
            DomainObject fields that do not depend on the object's mapped data properties. 
            See restrictions in the Remarks section.
            </summary>
            <remarks>
            <para>
            Override this method to initialize fields and properties of a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> that do not depend on the object's mapped data
            properties, no matter how the object is created. Object deserialization is not regarded as the initialization of a reference. Use the 
            deserialization hooks provided by the .NET framework (deserialization constructor, <see cref="T:System.Runtime.Serialization.IDeserializationCallback"/>) to react on the 
            deserialization of an object, or simply include the fields in the serialization process. 
            </para>
            <para>
            While this method is being executed, it is not possible to access any properties or methods of the DomainObject that read or modify the state 
            or data of the object in a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. All automatically implemented properties, <see cref="P:Remotion.Data.DomainObjects.DomainObject.CurrentProperty"/>, 
            <see cref="P:Remotion.Data.DomainObjects.DomainObject.Properties"/>, <see cref="P:Remotion.Data.DomainObjects.DomainObject.State"/>, <see cref="P:Remotion.Data.DomainObjects.DomainObject.Timestamp"/>, <see cref="M:Remotion.Data.DomainObjects.DomainObject.MarkAsChanged"/>, <see cref="M:Remotion.Data.DomainObjects.DomainObject.EnsureDataAvailable"/>, etc. 
            will throw <see cref="T:System.InvalidOperationException"/>. It is possible to call <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetBindingTransaction"/> on the object (if the object 
            is bound), and the object is guaranteed to be enlisted in the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/> transaction.
            </para>
            <para>The reason why it is explicitly disallowed to access mapped properties from the notification method is that 
            <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnReferenceInitializing"/> is usually called when no data has yet been loaded for the object. Accessing a property would cause the 
            data to be loaded, defeating lazy loading via object references.
            </para>
            <para>
            To initialize an object based on its data, use the constructor, <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnLoaded(Remotion.Data.DomainObjects.LoadMode)"/>, or the facility 
            callbacks. <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnLoaded(Remotion.Data.DomainObjects.LoadMode)"/> might be called more than once per object.
            </para>
            <para>
            When a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is newly created (usually via <see cref="M:Remotion.Data.DomainObjects.DomainObject.NewObject``1"/>), this method is called while the base 
            <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is executing. Fields initialized by a derived constructor will not be set yet.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.OnLoaded(Remotion.Data.DomainObjects.LoadMode)">
            <summary>
            This method is invoked after the loading process of the object is completed.
            </summary>
            <param name="loadMode">Specifies whether the whole domain object or only the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> has been
            newly loaded.</param>
            <remarks>
            <para>
            Override this method to initialize <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s that are loaded from the underlying storage.
            </para>
            <para>
            When a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is loaded for the first time, a new <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> reference will be created for it. In this
            case, the <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnLoaded(Remotion.Data.DomainObjects.LoadMode)"/> method will be called with <see cref="F:Remotion.Data.DomainObjects.LoadMode.WholeDomainObjectInitialized"/> being passed to the
            method. When, however, an additional <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> is loaded for an existing <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> reference - 
            in reaction to an existing <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> being loaded into another transaction (eg. a subtransaction), 
            <see cref="F:Remotion.Data.DomainObjects.LoadMode.DataContainerLoadedOnly"/> is passed to the method.
            </para>
            <para>
            Even when an object is first loaded in a subtransaction, this method is called once with <see cref="F:Remotion.Data.DomainObjects.LoadMode.WholeDomainObjectInitialized"/>,
            and then once with <see cref="F:Remotion.Data.DomainObjects.LoadMode.DataContainerLoadedOnly"/>. <see cref="F:Remotion.Data.DomainObjects.LoadMode.WholeDomainObjectInitialized"/> can thus be used to
            identify when the object was actually loaded from the underlying storage.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.OnUnloading">
            <summary>
            This method is invoked before an object's data is unloaded from the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/> transaction.
            </summary>
            <remarks>
            <note type="inotes">Overrides of this method can throw an exception in order to stop the operation.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.OnUnloaded">
            <summary>
            This method is invoked after an object's data has been unloaded from the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/> transaction.
            </summary>
            <remarks>
            <note type="inotes">Overrides of this method must not throw an exception; the operation has already been performed here.</note>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.OnCommitting(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.Committing"/> event.
            </summary>
            <param name="args">A <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.OnCommitted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.Committed"/> event.
            </summary>
            <param name="args">A <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.OnRollingBack(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.RollingBack"/> event.
            </summary>
            <param name="args">A <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.OnRolledBack(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.RolledBack"/> event.
            </summary>
            <param name="args">A <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.OnRelationChanging(Remotion.Data.DomainObjects.RelationChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.RelationChanging"/> event.
            This method is invoked once per involved operation and thus might be raised more often than <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnRelationChanged(Remotion.Data.DomainObjects.RelationChangedEventArgs)"/>. For example,
            when a whole related object collection is replaced in one go, this method is invoked once for each old object that is not in the new collection
            and once for each new object not in the old collection.
            </summary>
            <param name="args">A <see cref="T:Remotion.Data.DomainObjects.RelationChangingEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.OnRelationChanged(Remotion.Data.DomainObjects.RelationChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.RelationChanged"/> event.
            This method is only invoked once per relation change and thus might be invoked less often than <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnRelationChanging(Remotion.Data.DomainObjects.RelationChangingEventArgs)"/>.
            </summary>
            <param name="args">A <see cref="T:Remotion.Data.DomainObjects.RelationChangedEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.OnPropertyChanging(Remotion.Data.DomainObjects.PropertyChangeEventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.PropertyChanging"/> event.
            </summary>
            <param name="args">A <see cref="T:Remotion.Data.DomainObjects.PropertyChangeEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.OnPropertyChanged(Remotion.Data.DomainObjects.PropertyChangeEventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.PropertyChanged"/> event.
            </summary>
            <param name="args">A <see cref="T:Remotion.Data.DomainObjects.PropertyChangeEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.OnDeleting(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.Deleting"/> event.
            </summary>
            <param name="args">A <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObject.OnDeleted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.Deleted"/> event.
            </summary>
            <param name="args">A <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="E:Remotion.Data.DomainObjects.DomainObject.PropertyChanging">
            <summary>
            Occurs before a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is changed.
            </summary>
            <remarks>
            This event does not fire when a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> has been changed due to a relation change.
            </remarks>
        </member>
        <member name="E:Remotion.Data.DomainObjects.DomainObject.PropertyChanged">
            <summary>
            Occurs after a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is changed.
            </summary>
            <remarks>
            This event does not fire when a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> has been changed due to a relation change.
            </remarks>
        </member>
        <member name="E:Remotion.Data.DomainObjects.DomainObject.RelationChanging">
            <summary>
            Occurs before a Relation of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is changed.
            This event might be raised more than once for a given relation change operation. For example, when a whole related object collection is 
            replaced in one go, this event is raised once for each old object that is not in the new collection and once for each new object not in the 
            old collection.
            </summary>
        </member>
        <member name="E:Remotion.Data.DomainObjects.DomainObject.RelationChanged">
            <summary>
            Occurs after a Relation of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> has been changed.
            This event might be raised more than once for a given relation change operation. For example, when a whole related object collection is 
            replaced in one go, this event is raised once for each old object that is not in the new collection and once for each new object not in the 
            old collection.
            </summary>
        </member>
        <member name="E:Remotion.Data.DomainObjects.DomainObject.Deleting">
            <summary>
            Occurs before the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is deleted.
            </summary>
        </member>
        <member name="E:Remotion.Data.DomainObjects.DomainObject.Deleted">
            <summary>
            Occurs after the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> has been deleted.
            </summary>
        </member>
        <member name="E:Remotion.Data.DomainObjects.DomainObject.Committing">
            <summary>
            Occurs before the changes of a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> are committed.
            </summary>
        </member>
        <member name="E:Remotion.Data.DomainObjects.DomainObject.Committed">
            <summary>
            Occurs after the changes of a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> are successfully committed.
            </summary>
        </member>
        <member name="E:Remotion.Data.DomainObjects.DomainObject.RollingBack">
            <summary>
            Occurs before the changes of a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> are rolled back.
            </summary>
        </member>
        <member name="E:Remotion.Data.DomainObjects.DomainObject.RolledBack">
            <summary>
            Occurs after the changes of a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> are successfully rolled back.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObject.ID">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObject.HasBindingTransaction">
            <summary>
            Gets a value indicating whether this instance is bound to specific transaction. If it is, it will always use that transaction, otherwise,
            it will always use <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/> when it is accessed.
            </summary>
            <value>
            	<see langword="true"/> if this instance has binding transaction; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
            To bind a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> to a transaction, instantiate or load it in the scope of a transaction created via
            <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.CreateBindingTransaction"/>. Such a transaction will automatically bind all objects created or loaded
            in its scope to itself.
            </para>
            <para>
            To retrieve the transaction the object is bound to, use the <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetBindingTransaction"/> method.
            </para>
            <seealso cref="M:Remotion.Data.DomainObjects.ClientTransaction.CreateBindingTransaction"/>
            </remarks>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObject.TransactionContext">
            <summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.Infrastructure.DomainObjectTransactionContextIndexer"/> object that can be used to select an <see cref="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext"/>
            for a specific <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. To obtain the default context, use <see cref="P:Remotion.Data.DomainObjects.DomainObject.DefaultTransactionContext"/>.
            </summary>
            <value>The transaction context.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObject.DefaultTransactionContext">
            <summary>
            Gets the default <see cref="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext"/>, i.e. the transaction context that is used when this 
            <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>'s properties are accessed without specifying a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
            <value>The default transaction context.</value>
            <remarks>
            When an object is bound to a <see cref="T:Remotion.Data.DomainObjects.Infrastructure.BindingClientTransaction"/>, the <see cref="P:Remotion.Data.DomainObjects.DomainObject.DefaultTransactionContext"/> represents that transaction.
            Otherwise, it represents the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/> transaction.
            </remarks>
            <exception cref="T:System.InvalidOperationException">No <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> has been associated with the current thread or 
            this <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObject.State">
            <summary>
            Gets the current state of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> in the <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.CurrentTransaction"/>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObject.IsInvalid">
            <summary>
            Gets a value indicating whther the object is invalid in the default transaction, ie. in its binding transaction or - if
            none - <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/>.
            </summary>
            <remarks>
            For more information why and when an object becomes invalid see <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/>.
            </remarks>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The object cannot be used in the given transaction.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObject.Timestamp">
            <summary>
            Gets the timestamp used for optimistic locking when the object is committed to the database in the default transaction, ie. in 
            its binding transaction or - if none - <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/>.
            </summary>
            <value>The timestamp of the object.</value>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The object cannot be used in the current transaction.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in the transaction.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObject.CurrentProperty">
            <summary>
            Provides simple, encapsulated access to the current property.
            </summary>
            <value>A <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor"/> object encapsulating the current property.</value>
            <remarks>
            The structure returned by this method allows simple access to the property's value and mapping definition objects regardless of
            whether it is a simple value property, a related object property, or a related object collection property.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The current property hasn't been initialized or there is no current property. Perhaps the domain 
            object was created with the <c>new</c> operator instead of using the <see cref="M:Remotion.Data.DomainObjects.DomainObject.NewObject``1"/> method, or the property is not virtual.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObject.Properties">
            <summary>
            Provides simple, encapsulated access to the properties of this <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
            </summary>
            <returns>A <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer"/> object which can be used to select a specific property of this <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.</returns>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectMixin">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectMixin"/> applies the <see cref="T:Remotion.ObjectBinding.IBusinessObjectWithIdentity"/> implementation for bindable types derived 
            from <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
            </summary>
            <remarks>
            If you do not wish to cast to <see cref="T:Remotion.ObjectBinding.IBusinessObject"/> and <see cref="T:Remotion.ObjectBinding.IBusinessObjectWithIdentity"/>, you can use the default 
            implementation provided by <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObject"/> type. This type exposes the aforementioned interfaces and delegates their 
            implementation to the mixin.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObject"/> class.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObject"/> class in the process of deserialization.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> coming from the .NET serialization infrastructure.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> coming from the .NET serialization infrastructure.</param>
            <remarks>Be sure to call this base constructor from the deserialization constructor of any concrete <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObject"/> type
            implementing the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface.</remarks>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObject.DisplayName">
            <summary>
            Provides a possibility to override the display name of the bindable domain object.
            </summary>
            <value>The display name.</value>
            <remarks>Override this property to replace the default display name provided by the <see cref="T:Remotion.ObjectBinding.BindableObject.BindableObjectClass"/> with a custom one.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectMetadataFactory">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectMetadataFactory"/> implements the <see cref="T:Remotion.ObjectBinding.BindableObject.IMetadataFactory"/> interface for domain objects.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectPropertyReflector">
            <summary>
            Use the <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectPropertyReflector"/> to create <see cref="T:Remotion.ObjectBinding.IBusinessObjectProperty"/> implementations for the 
            bindable domain object extension of the business object interfaces.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectProvider">
            <summary>
            The implementation of  <see cref="T:Remotion.ObjectBinding.IBusinessObjectProvider"/> to be used with the <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectMixin"/>.
            </summary>
            <remarks>
            This provider is associated with the <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectMixin"/> via the <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectProviderAttribute"/>.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectProviderAttribute">
            <summary>
            Apply this attribute to your BindableDomainObject-type to classify the this type as using the DomainObject-specific implementation of object binding.
            </summary>
            <remarks>
            The <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectMixin"/> already applies this attribute.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectServiceFactoryMixin">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectServiceFactoryMixin"/> is an extension of the <see cref="T:Remotion.ObjectBinding.BindableObject.BindableObjectServiceFactory"/> used by
            the <see cref="T:Remotion.ObjectBinding.BindableObject.BindableObjectProvider"/> and provides default service instances for bindable domain object implementations.
            </summary>
            <remarks>
            The following <see cref="T:Remotion.ObjectBinding.IBusinessObjectService"/> interfaces are supported.
            <list type="bullet">
              <listheader>
                <term>Service Interface</term>
                <description>Service creates instance of type</description>
              </listheader>
              <item>
                <term><see cref="T:Remotion.ObjectBinding.BindableObject.IGetObjectService"/></term>
                <description><see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectGetObjectService"/></description>
              </item>
              <item>
                <term><see cref="T:Remotion.ObjectBinding.BindableObject.ISearchAvailableObjectsService"/></term>
                <description><see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectCompoundSearchService"/></description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.BulkLoadException">
            <summary>
            Thrown when the process of loading multiple objects at the same time fails.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.Persistence.BulkLoadException._exceptions">
            <summary>
            The exceptions that occurred while the objects were loaded.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Persistence.BulkLoadException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Persistence.BulkLoadException"/> class.
            </summary>
            <param name="exceptions">The exceptions thrown while the objects were loaded.</param>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Persistence.BulkLoadException.Exceptions">
            <summary>
            The exceptions that occurred while the objects were loaded.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.RelationChangedEventArgs">
            <summary>
            Provides data for a <b>RelationChanged</b> event.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.RelationChangedEventArgs.#ctor(Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Initializes a new instance of the <b>RelationChangingEventArgs</b> class.
            </summary>
            <param name="relationEndPointDefinition">The relation endpoint defintion. Must not be <see langword="null"/>.</param>
            <param name="oldRelatedObject">The related object that is removed from the relation, or <see langword="null"/> if a new item is added without 
            replacing an old one.</param>
            <param name="newRelatedObject">The related object that is added to the relation, or <see langword="null"/> if an old item is removed without 
            being replaced by a new one.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="relationEndPointDefinition"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.RelationChangedEventArgs.OldRelatedObject">
            <summary>
            Gets the related object that is removed from the relation, or <see langword="null" /> if a new item is added without 
            replacing an old one.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.RelationChangedEventArgs.NewRelatedObject">
            <summary>
            Gets the related object that is added to the relation, or <see langword="null" /> if an old item is removed without 
            being replaced by a new one.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.RelationChangedEventArgs.RelationEndPointDefinition">
            <summary>
            Gets the relation endpoint defintion of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> that has been changed due to the relation change.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.RelationChangingEventArgs">
            <summary>
            Provides data for a <b>RelationChanging</b> event.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.RelationChangingEventArgs.#ctor(Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Initializes a new instance of the <b>RelationChangingEventArgs</b> class.
            </summary>
            <param name="relationEndPointDefinition">The relation endpoint definition. Must not be <see langword="null"/>.</param>
            <param name="oldRelatedObject">The related object that is removed from the relation, or <see langword="null"/> if a new item is added without 
            replacing an old one.</param>
            <param name="newRelatedObject">The related object that is added to the relation, or <see langword="null"/> if an old item is removed without 
            being replaced by a new one.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="relationEndPointDefinition"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.RelationChangingEventArgs.OldRelatedObject">
            <summary>
            Gets the related object that is removed from the relation, or <see langword="null" /> if a new item is added without 
            replacing an old one.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.RelationChangingEventArgs.NewRelatedObject">
            <summary>
            Gets the related object that is added to the relation, or <see langword="null" /> if an old item is removed without 
            being replaced by a new one.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.RelationChangingEventArgs.RelationEndPointDefinition">
            <summary>
            Gets the relation endpoint defintion of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> that has been changed due to the relation change.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.SubTransactionCreatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.SubTransactionCreated"/> event.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.SubTransactionCreatedEventArgs.#ctor(Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.SubTransactionCreatedEventArgs"/> class.
            </summary>
            <param name="subTransaction">The subtransaction created.</param>
        </member>
        <member name="P:Remotion.Data.DomainObjects.SubTransactionCreatedEventArgs.SubTransaction">
            <summary>
            Gets the subtransaction created.
            </summary>
            <value>The new subtransaction for which the event was raised.</value>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Tracing.IPersistenceExtension">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Tracing.IPersistenceExtension"/> defines the API for tracing database access.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Tracing.IPersistenceExtension.ConnectionOpened(System.Guid)">
            <summary>
            Invoking this method signals that a database connection has been established.
            </summary>
            <param name="connectionID">An ID unique to all operations traced for this database connection.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Tracing.IPersistenceExtension.ConnectionClosed(System.Guid)">
            <summary>
            Invoking this method signals that a database connection has been closed.
            </summary>
            <param name="connectionID">An ID unique to all operations traced for this database connection.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Tracing.IPersistenceExtension.TransactionBegan(System.Guid,System.Data.IsolationLevel)">
            <summary>
            Invoking this method signals the begin of a database transaction.
            </summary>
            <param name="connectionID">An ID unique to all operations traced for this database connection.</param>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> used for this transaction</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Tracing.IPersistenceExtension.TransactionCommitted(System.Guid)">
            <summary>
            Invoking this method signals that a database transaction was committed.
            </summary>
            <param name="connectionID">An ID unique to all operations traced for this database connection.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Tracing.IPersistenceExtension.TransactionRolledBack(System.Guid)">
            <summary>
            Invoking this method signals that a database transaction was rolled-back.
            </summary>
            <param name="connectionID">An ID unique to all operations traced for this database connection.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Tracing.IPersistenceExtension.TransactionDisposed(System.Guid)">
            <summary>
            Invoking this method signals that a database transaction was disposed.
            </summary>
            <param name="connectionID">An ID unique to all operations traced for this database connection.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Tracing.IPersistenceExtension.QueryExecuting(System.Guid,System.Guid,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Invoking this method signals the begin of a database query.
            </summary>
            <param name="connectionID">An ID unique to all operations traced for this database connection.</param>
            <param name="queryID">An ID unique to this specific database query.</param>
            <param name="commandText">The command-text of the query.</param>
            <param name="parameters">The parameters of the query.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Tracing.IPersistenceExtension.QueryExecuted(System.Guid,System.Guid,System.TimeSpan)">
            <summary>
            Invoking this method signals the return of the executing database query.
            </summary>
            <param name="connectionID">An ID unique to all operations traced for this database connection.</param>
            <param name="queryID">An ID unique to this specific database query.</param>
            <param name="durationOfQueryExecution">The time taken for exeucting the query against the database.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Tracing.IPersistenceExtension.QueryCompleted(System.Guid,System.Guid,System.TimeSpan,System.Int32)">
            <summary>
            Invoking this method signals that the application has finished processing the query result.
            </summary>
            <param name="connectionID">An ID unique to all operations traced for this database connection.</param>
            <param name="queryID">An ID unique to this specific database query.</param>
            <param name="durationOfDataRead">The time taken for processing the query result.</param>
            <param name="rowCount">The number of rows processed.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Tracing.IPersistenceExtension.QueryError(System.Guid,System.Guid,System.Exception)">
            <summary>
            Invoking this method signals that the executing query has generated an error.
            </summary>
            <param name="connectionID">An ID unique to all operations traced for this database connection.</param>
            <param name="queryID">An ID unique to this specific database query.</param>
            <param name="e">The exection thrown becasue of the error.</param>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Tracing.IPersistenceExtensionFactory">
            <summary>
            Defines the API for creating the listeners used by the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> and the peristence layer.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Tracing.NullPersistenceExtension">
            <summary>
            <see cref="T:Remotion.INullObject"/> implementation of <see cref="T:Remotion.Data.DomainObjects.Tracing.IPersistenceExtension"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Tracing.CompoundPersistenceExtension">
            <summary>
            Implements a collection of <see cref="T:Remotion.Data.DomainObjects.Tracing.IPersistenceExtension"/> objects.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Tracing.TracingDataReader">
            <summary>
            Provides a wrapper for implementations of <see cref="T:System.Data.IDataReader"/>. The number of records read and the lifetime of the reader 
            are traced using <see cref="T:Remotion.Data.DomainObjects.Tracing.IPersistenceExtension"/> passed during the instantiation.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Tracing.TracingDbCommand">
            <summary>
            Provides a wrapper for implementations of <see cref="T:System.Data.IDbCommand"/>. Execution of the query is traced using the 
            <see cref="T:Remotion.Data.DomainObjects.Tracing.IPersistenceExtension"/> passed during the instantiation.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.EagerFetching.EagerFetchingObjectLoaderDecorator">
            <summary>
            Decorates <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IObjectLoader"/> to include eager fetching when executing <see cref="M:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IObjectLoader.GetOrLoadCollectionQueryResult(Remotion.Data.DomainObjects.Queries.IQuery)"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.EagerFetching.EagerFetchQueryCollection">
            <summary>
            Holds the eager fetch queries for a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> instance. See <see cref="P:Remotion.Data.DomainObjects.Queries.IQuery.EagerFetchQueries"/> for more information about
            eager fetch queries.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.UnexpectedQueryResultException">
            <summary>
            Thrown when a query yields a result unexpected in the context of the parameters given by the user.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.QueryResult`1">
            <summary>
            Represents a typed result of a collection query.
            </summary>
            <typeparam name="T">A common type of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances returned by the query. This is the same as the type parameter
            supplied to <see cref="M:Remotion.Data.DomainObjects.Queries.IQueryManager.GetCollection``1(Remotion.Data.DomainObjects.Queries.IQuery)"/>.</typeparam>
            <seealso cref="M:Remotion.Data.DomainObjects.Queries.IQueryManager.GetCollection(Remotion.Data.DomainObjects.Queries.IQuery)"/>
            <remarks>
            <para>
            The result might contain duplicates or <see langword="null"/> values when calling <see cref="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.AsEnumerable"/> or <see cref="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.ToArray"/>. To filter
            them out, use the <see cref="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})"/> and 
            <see cref="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/> methods.
            </para>
            <para>
            This class implements the <see cref="T:Remotion.Data.DomainObjects.Queries.IQueryResult"/> interface, which can be used if the <typeparamref name="T">T</typeparamref> type
            parameter is not known at compile time.
            </para>
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.IQueryResult">
            <summary>
            Represents an untyped result of a collection query.
            </summary>
            <seealso cref="M:Remotion.Data.DomainObjects.Queries.IQueryManager.GetCollection(Remotion.Data.DomainObjects.Queries.IQuery)"/>
            <remarks>
            <para>
            The result might contain duplicates or <see langword="null"/> values when calling <see cref="M:Remotion.Data.DomainObjects.Queries.IQueryResult.AsEnumerable"/> or <see cref="M:Remotion.Data.DomainObjects.Queries.IQueryResult.ToArray"/>. To filter
            them out, use the <see cref="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})"/> and 
            <see cref="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/> methods.
            </para>
            <para>
            <see cref="T:Remotion.Data.DomainObjects.Queries.QueryResult`1"/> implements this interface, but represents a typed result of a collection query.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.IQueryResult.ContainsDuplicates">
            <summary>
            Determines whether the result set contains duplicates.
            </summary>
            <returns>
            	<see langword="true" /> if result set contains duplicates; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.IQueryResult.ContainsNulls">
            <summary>
            Determines whether result set contains <see langword="null"/> values.
            </summary>
            <returns>
            	<see langword="true" /> if result set contains <see langword="null"/> values; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.IQueryResult.AsEnumerable">
            <summary>
            Returns the query result set as an enumerable object. Might contain duplicates or <see langword="null"/> values.
            </summary>
            <returns>An instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances yielded by the query.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.IQueryResult.ToArray">
            <summary>
            Returns the query result set as an array. Might contain duplicates or <see langword="null"/> values.
            </summary>
            <returns>An array containing the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances yielded by the query.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.IQueryResult.ToObjectList">
            <summary>
            Returns the query result set as an <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/>. If the result set contains duplicates or <see langword="null"/> values, this
            method throws an exception.
            </summary>
            <returns>An instance of <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/> containing the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances yielded by the query.</returns>
            <exception cref="T:Remotion.Data.DomainObjects.Queries.UnexpectedQueryResultException">The query contains <see langword="null"/> values or duplicates.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.IQueryResult.ToCustomCollection">
            <summary>
            Returns the query result set as the custom collection specified by the query <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/>. If the result set contains
            duplicates or <see langword="null"/> values, this method throws an exception. If no custom collection was specified, a standard 
            <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> is returned.
            </summary>
            <returns>An instance of <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> containing the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances yielded by the query. The 
            concrete type of this collection is determined by the <see cref="P:Remotion.Data.DomainObjects.Queries.IQuery.CollectionType"/> property of the query used.</returns>
            <exception cref="T:Remotion.Data.DomainObjects.Queries.UnexpectedQueryResultException">The query contains <see langword="null"/> values or duplicates.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.IQueryResult.Count">
            <summary>
            Gets the number of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances returned by the query.
            </summary>
            <value>The result count.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.IQueryResult.Query">
            <summary>
            Gets the query used to construct this result.
            </summary>
            <value>The query that yielded the result.</value>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.#ctor(Remotion.Data.DomainObjects.Queries.IQuery,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryResult`1"/> class.
            </summary>
            <param name="query">The query that yielded the <paramref name="queryResult"/></param>.
            <param name="queryResult">The elements making up the query result. The <see cref="T:System.Collections.Generic.IEnumerable`1"/> is enumerated exactly once by this class.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.ContainsDuplicates">
            <summary>
            Determines whether the result set contains duplicates.
            </summary>
            <returns>
            	<see langword="true"/> if result set contains duplicates; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method needs additional memory to hold up to <see cref="P:Remotion.Data.DomainObjects.Queries.QueryResult`1.Count"/> elements to check for duplicates, and it iterates over the result 
            elements, visiting each at most once.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.ContainsNulls">
            <summary>
            Determines whether result set contains <see langword="null"/> values.
            </summary>
            <returns>
            	<see langword="true" /> if result set contains <see langword="null"/> values; otherwise, <see langword="false" />.
            </returns>
            <remarks>
            This method iterates over the result elements, visiting each at most once.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.AsEnumerable">
            <summary>
            Returns the query result set as an enumerable object. Might contain duplicates or <see langword="null"/> values.
            </summary>
            <returns>
            An instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances yielded by the query.
            </returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.ToArray">
            <summary>
            Returns the query result set as an array. Might contain duplicates or <see langword="null"/> values.
            </summary>
            <returns>
            An array containing the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances yielded by the query.
            </returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.ToObjectList">
            <summary>
            Returns the query result set as an <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/>. If the result set contains duplicates or <see langword="null"/> values, this
            method throws an exception.
            </summary>
            <returns>
            An instance of <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/> containing the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances yielded by the query.
            </returns>
            <exception cref="T:Remotion.Data.DomainObjects.Queries.UnexpectedQueryResultException">The query contains <see langword="null"/> values or duplicates.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.ToCustomCollection">
            <summary>
            Returns the query result set as the custom collection as specified by <see cref="P:Remotion.Data.DomainObjects.Queries.IQuery.CollectionType"/>. If the result set contains
            duplicates or <see langword="null"/> values, this method throws an exception. If no custom collection was specified, a standard
            <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> is returned.
            </summary>
            <returns>
            An instance of <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> containing the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances yielded by the query. The
            concrete type of this collection is determined by the <see cref="P:Remotion.Data.DomainObjects.Queries.IQuery.CollectionType"/> property of the query used.
            </returns>
            <exception cref="T:Remotion.Data.DomainObjects.Queries.UnexpectedQueryResultException">The query contains <see langword="null"/> values or duplicates.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.QueryResult`1.Count">
            <summary>
            Gets the number of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances returned by the query.
            </summary>
            <value>The result count.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.QueryResult`1.Query">
            <summary>
            Gets the query used to construct this result.
            </summary>
            <value>The query that yielded the result.</value>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.QueryCache">
            <summary>
            Provides a thread-safe way to cache LINQ queries by a unique identifier.
            </summary>
            <remarks>
            While LINQ queries are convenient, flexible, and maintainable, parsing them and converting them to SQL is an expensive operation. Therefore,
            it is usually not a good idea to re-parse the same query over and over again. To foster reuse of the parsed query data, instances of this class 
            provide a thread-safe caching mechanism. The cache keys are supplied by the user, because LINQ queries cannot be used as cache keys with 
            reasonable performance.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryCache.GetQuery``1(System.String,System.Func{Remotion.Data.DomainObjects.Linq.DomainObjectQueryable{``0},System.Linq.IQueryable})">
            <summary>
            Gets a query for the given LINQ query, returning it from the cache if possible.
            </summary>
            <typeparam name="T">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> type to start the query with.</typeparam>
            <param name="id">The ID to associate with the LINQ queryable. This ID is used as the cache key of the parsed query.</param>
            <param name="queryGenerator">A delegate returning the LINQ queryable. The argument of this delegate is a <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1"/>
            to start the LINQ query with.</param>
            <returns>An <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> implementation corresponding to the LINQ query returned by <paramref name="queryGenerator"/>.</returns>
            <remarks>
            The <paramref name="queryGenerator"/> delegate is only evaluated if no query with the given <paramref name="id"/> is found in the cache.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryCache.ExecuteCollectionQuery``1(Remotion.Data.DomainObjects.ClientTransaction,System.String,System.Func{Remotion.Data.DomainObjects.Linq.DomainObjectQueryable{``0},System.Linq.IQueryable})">
            <summary>
            Gets a query for the given LINQ query and executes it in the given <paramref name="transaction"/>. The query is taken from the cache if 
            possible.
            </summary>
            <typeparam name="T">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> type to start the query with.</typeparam>
            <param name="transaction">The transaction whose <see cref="T:Remotion.Data.DomainObjects.Queries.IQueryManager"/> is used to execute the query.</param>
            <param name="id">The ID to associate with the LINQ queryable. This ID is used as the cache key of the parsed query.</param>
            <param name="queryGenerator">A delegate returning the LINQ queryable. The argument of this delegate is a <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1"/>
            to start the LINQ query with.</param>
            <returns>An <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/> holding the query results.</returns>
            <remarks>
            The <paramref name="queryGenerator"/> delegate is only evaluated if no query with the given <paramref name="id"/> is found in the cache. However,
            the query is always executed.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.QueryFactory">
            <summary>
            Provides a central entry point to get instances of <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> and <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1"/> query objects. Use this 
            factory to create LINQ queries or to read queries from the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfiguration"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateLinqQuery``1">
            <summary>
            Creates a <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1"/> used as the entry point to a LINQ query with the default implementation of the SQL 
            generation.
            </summary>
            <typeparam name="T">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> type to be queried.</typeparam>
            <returns>A <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1"/> object as an entry point to a LINQ query.</returns>
            <example>
            The following example used <see cref="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateLinqQuery``1"/> to retrieve 
            an entry point for a query that selects a number of <c>Order</c> objects, filters them by <c>OrderNumber</c>, and orders them by name of
            customer (which includes an implicit join between <c>Order</c> and <c>Customer</c> objects).
            <code>
            var query =
                from o in QueryFactory.CreateLinqQuery&lt;Order&gt; ()
                where o.OrderNumber &lt;= 4
                orderby o.Customer.Name
                select o;
            var result = query.ToArray();
            </code>
            </example>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateLinqQuery``1(Remotion.Linq.Parsing.Structure.IQueryParser,Remotion.Linq.IQueryExecutor)">
            <summary>
            Creates a <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1"/> used as the entry point to a LINQ query 
            with user defined query analysis or SQL generation.
            </summary>
            <typeparam name="T">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> type to be queried.</typeparam>
            <param name="queryParser">The <see cref="T:Remotion.Linq.Parsing.Structure.IQueryParser"/> used to parse queries. Specify an instance of <see cref="T:Remotion.Linq.Parsing.Structure.QueryParser"/>
              for default behavior. See <see cref="M:Remotion.Linq.Parsing.Structure.QueryParser.CreateDefault"/></param>
            <param name="executor">The <see cref="T:Remotion.Linq.IQueryExecutor"/> that is used for the query. Specify an instance of 
              <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor"/> for default behavior.</param>
            <returns>A <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1"/> object as an entry point to a LINQ query.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQuery(Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition)">
            <summary>
            Creates a new query object from a given <paramref name="queryDefinition"/>.
            </summary>
            <param name="queryDefinition">The query definition to construct a query from.</param>
            <returns>An implementation of <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> corresponding to <paramref name="queryDefinition"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQuery(Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition,Remotion.Data.DomainObjects.Queries.QueryParameterCollection)">
            <summary>
            Creates a new query object from a given <paramref name="queryDefinition"/>.
            </summary>
            <param name="queryDefinition">The query definition to construct a query from.</param>
            <param name="queryParameterCollection">The parameter collection to use for the query.</param>
            <returns>An implementation of <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> corresponding to <paramref name="queryDefinition"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQuery(System.String,System.Linq.IQueryable)">
            <summary>
            Creates a new query object from a given LINQ query.
            </summary>
            <param name="id">The ID to assign to the query.</param>
            <param name="queryable">The queryable constituting the LINQ query. This must be obtained by forming a LINQ query starting with an instance of 
            <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1"/>. Use <see cref="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateLinqQuery``1"/> to create such a query source.</param>
            <returns>An implementation of <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> holding the parsed LINQ query data.</returns>
            <remarks>
            <para>
            Note that parts of the <paramref name="queryable"/> might not be represented in the returned <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/>. For example,
            query methods such as <see cref="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})"/> 
            need some code to be executed in memory in order to throw the right exception if too many items are returned by the query, or to return a 
            default value if no item is returned. The <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> will not know about those in-memory parts.
            </para>
            <para>
            In addition, scalar queries cannot be created using this method because they cannot be represented as a <see cref="T:System.Linq.IQueryable"/>.
            (The methods that generate scalar queries, such as <see cref="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})"/>, alsways
            execute the query immediately instead of returning an <see cref="T:System.Linq.IQueryable"/>.)
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQueryFromConfiguration(System.String)">
            <summary>
            Creates a new query object, loading its data from the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfiguration"/>.
            </summary>
            <param name="id">The id of the query to load.</param>
            <returns>An implementation of <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> corresponding to the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> with the given <paramref name="id"/>
            held by the current <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfiguration"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQueryFromConfiguration(System.String,Remotion.Data.DomainObjects.Queries.QueryParameterCollection)">
            <summary>
            Creates a new query object, loading its data from the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfiguration"/>.
            </summary>
            <param name="id">The id of the query to load.</param>
            <param name="queryParameterCollection">The parameter collection to use for the query.</param>
            <returns>An implementation of <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> corresponding to the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> with the given <paramref name="id"/>
            held by the current <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfiguration"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateScalarQuery(System.String,Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition,System.String,Remotion.Data.DomainObjects.Queries.QueryParameterCollection)">
            <summary>
            Creates a new scalar query with the given statement, parameters, and metadata.
            Note that creating queries with a hard-coded SQL statement is not very flexible and not portable at all.
            Therefore, the <see cref="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateLinqQuery``1"/> and <see cref="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQueryFromConfiguration(System.String)"/>
            methods should usually be preferred to this method.
            </summary>
            <param name="id">A string identifying the query.</param>
            <param name="storageProviderDefinition">The <see cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition"/> used to execute the query.</param>
            <param name="statement">The scalar query statement.</param>
            <param name="queryParameterCollection">The parameter collection to be used for the query.</param>
            <returns>An implementation of <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> with the given statement, parameters, and metadata.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateCollectionQuery(System.String,Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition,System.String,Remotion.Data.DomainObjects.Queries.QueryParameterCollection,System.Type)">
            <summary>
            Creates a new collection query with the given statement, parameters, and metadata.
            Note that creating queries with a hard-coded SQL statement is not very flexible and not portable at all.
            Therefore, the <see cref="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateLinqQuery``1"/> and <see cref="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQueryFromConfiguration(System.String)"/>
            methods should usually be preferred to this method.
            </summary>
            <param name="id">A string identifying the query.</param>
            <param name="storageProviderDefinition">The <see cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition"/> of the storage provider used to execute the query.</param>
            <param name="statement">The scalar query statement.</param>
            <param name="queryParameterCollection">The parameter collection to be used for the query.</param>
            <param name="collectionType">The collection type to be returned from the query. Pass <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> if you don't care
            about the collection type. The type passed here is used by <see cref="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.ToCustomCollection"/>.</param>
            <returns>An implementation of <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> with the given statement, parameters, and metadata.</returns>
        </member>
        <member name="T:Remotion.Data.DomainObjects.SimpleDomainObject`1">
            <summary>
            Represents a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> that can be instantiated (via <see cref="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.NewObject"/>), retrieved (via
            <see cref="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.GetObject(Remotion.Data.DomainObjects.ObjectID)"/>), and deleted via public methods.
            </summary>
            <typeparam name="TDomainObject">The type derived from <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1"/>.</typeparam>
            <remarks>
            The only difference between this class and <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is that <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1"/> has public
            methods for instantiation, retrieval, and deletion, whereas these methods are protected on <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>. Derive
            from <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> if you need to hide these methods from the public; derive from <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1"/>
            if you don't.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.NewObject">
            <summary>
            Returns a new instance of a concrete domain object for the current<see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. The instance is constructed
            with the default constructor.
            </summary>
            <returns>A new <typeparamref name="TDomainObject"/> instance.</returns>
            <remarks>
            <para>
            This method is identical to <see cref="M:Remotion.Data.DomainObjects.DomainObject.NewObject``1"/>, but it can be called from any other class whereas
            <see cref="M:Remotion.Data.DomainObjects.DomainObject.NewObject``1"/> can only be called from classes derived from <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
            </para>
            </remarks>
            <seealso cref="M:Remotion.Data.DomainObjects.DomainObject.NewObject``1"/>
            <exception cref="T:System.ArgumentException">The type <typeparamref name="TDomainObject"/> cannot be extended to a proxy, for example because it is sealed
            or abstract and non-instantiable.</exception>
            <exception cref="T:System.MissingMethodException">The given type <typeparamref name="TDomainObject"/> does not implement the required protected
            constructor.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.NewObject(Remotion.Reflection.ParamList)">
            <summary>
            Returns a new instance of a concrete domain object for the current<see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. The instance is constructed
            with a constructor accepting the given parameter list.
            </summary>
            <param name="constructorParameters">A <see cref="T:Remotion.Reflection.ParamList"/> object holding the parameters to be passed to the constructor. Instantiate this
            by using one of the <see cref="M:Remotion.Reflection.ParamList.Create``2(``0,``1)"/> methods.</param>
            <returns>A new <typeparamref name="TDomainObject"/> instance.</returns>
            <remarks>
            <para>
            This method is identical to <see cref="M:Remotion.Data.DomainObjects.DomainObject.NewObject``1(Remotion.Reflection.ParamList)"/>, but it can be called from any other class whereas
            <see cref="M:Remotion.Data.DomainObjects.DomainObject.NewObject``1(Remotion.Reflection.ParamList)"/> can only be called from classes derived from <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
            </para>
            </remarks>
            <seealso cref="M:Remotion.Data.DomainObjects.DomainObject.NewObject``1(Remotion.Reflection.ParamList)"/>
            <exception cref="T:System.ArgumentException">The type <typeparamref name="TDomainObject"/> cannot be extended to a proxy, for example because it is sealed
            or abstract and non-instantiable.</exception>
            <exception cref="T:System.MissingMethodException">The given type <typeparamref name="TDomainObject"/> does not implement the required protected
            constructor.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.GetObject(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1"/> that is already loaded or attempts to load it from the data source.
            </summary>
            <param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of the <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1"/> that should be loaded. Must not be 
            <see langword="null"/>.</param>
            <returns>The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> with the specified <paramref name="id"/>.</returns>
            <remarks>
            <para>
            This method is identical to <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetObject``1(Remotion.Data.DomainObjects.ObjectID)"/>, but can be called from any other class, whereas
            <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetObject``1(Remotion.Data.DomainObjects.ObjectID)"/> can only be called from classes derived from <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
            </para>
            </remarks>
            <seealso cref="M:Remotion.Data.DomainObjects.DomainObject.GetObject``1(Remotion.Data.DomainObjects.ObjectID)"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.StorageProviderException">
              The Mapping does not contain a class definition for the given <paramref name="id"/>.<br/> -or- <br/>
              An error occurred while reading a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/>.<br/> -or- <br/>
              An error occurred while accessing the data source.
            </exception>
            <exception cref="T:System.MissingMethodException">The concrete <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> doesn't implement the required constructor.</exception>
            <exception cref="T:System.InvalidCastException">The loaded <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is not of the expected type <typeparamref name="TDomainObject"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.GetObject(Remotion.Data.DomainObjects.ObjectID,System.Boolean)">
            <summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1"/> that is already loaded or attempts to load it from the data source.
            </summary>
            <param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of the <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1"/> that should be loaded. Must not be <see langword="null"/>.</param>
            <param name="includeDeleted">Indicates if the method should return <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1"/>s that are already deleted.</param>
            <returns>The <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1"/> with the specified <paramref name="id"/>.</returns>
            <remarks>
            <para>
            This method is identical to <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetObject``1(Remotion.Data.DomainObjects.ObjectID,System.Boolean)"/>, but can be called from any other class, whereas
            <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetObject``1(Remotion.Data.DomainObjects.ObjectID,System.Boolean)"/> can only be called from classes derived from <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
            </para>
            </remarks>
            <seealso cref="M:Remotion.Data.DomainObjects.DomainObject.GetObject``1(Remotion.Data.DomainObjects.ObjectID,System.Boolean)"/>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.StorageProviderException">
              The Mapping does not contain a class definition for the given <paramref name="id"/>.<br/> -or- <br/>
              An error occurred while reading a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/>.<br/> -or- <br/>
              An error occurred while accessing the data source.
            </exception>
            <exception cref="T:System.MissingMethodException">The concrete <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> doesn't implement the required constructor.</exception>
            <exception cref="T:System.InvalidCastException">The loaded <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is not of the expected type <typeparamref name="TDomainObject"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1"/> class in the process of deserialization.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> coming from the .NET serialization infrastructure.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> coming from the .NET serialization infrastructure.</param>
            <remarks>Be sure to call this base constructor from the deserialization constructor of any concrete <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1"/> type
            implementing the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.Delete">
            <summary>
            Deletes the <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1"/>.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid. See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
            <remarks>To perform custom actions when a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is deleted <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnDeleting(System.EventArgs)"/> and <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnDeleted(System.EventArgs)"/> should be overridden.</remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Tracing.TracingDbConnection">
            <summary>
            Provides a wrapper for implementations of <see cref="T:System.Data.IDbConnection"/>. The lifetime of the connection is traced using the
            <see cref="T:Remotion.Data.DomainObjects.Tracing.IPersistenceExtension"/> passed during the instantiation.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Tracing.TracingDbTransaction">
            <summary>
            Provides a wrapper for implementations of <see cref="T:System.Data.IDbTransaction"/>. The lifetime of the transaction is traced using the
            <see cref="T:Remotion.Data.DomainObjects.Tracing.IPersistenceExtension"/> passed during the instantiation.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Transport.BinaryExportStrategy">
            <summary>
            Represents an export strategy for <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances using binary serialization. This matches <see cref="T:Remotion.Data.DomainObjects.Transport.BinaryImportStrategy"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Transport.IExportStrategy">
            <summary>
            Implements a strategy to export a set of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances to a <see cref="T:System.IO.Stream"/>. The exported objects are
            wrapped as <see cref="T:Remotion.Data.DomainObjects.Transport.TransportItem"/> property holders by the <see cref="T:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter"/> class.
            </summary>
            <remarks>
            Supply an implementation of this interface to 
            <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Export(System.IO.Stream,Remotion.Data.DomainObjects.Transport.IExportStrategy)"/>. The strategy
            must match the <see cref="T:Remotion.Data.DomainObjects.Transport.IImportStrategy"/> supplied to <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.IO.Stream,Remotion.Data.DomainObjects.Transport.IImportStrategy)"/>.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.IExportStrategy.Export(System.IO.Stream,Remotion.Data.DomainObjects.Transport.TransportItem[])">
            <summary>
            Exports the specified transported objects.
            </summary>
            <param name="transportedObjects">The objects to be exported.</param>
            <param name="outputStream">The <see cref="T:System.IO.Stream"/> to which the data should be exported.</param>
            <returns>A byte array representing the transported objects.</returns>
            <exception cref="T:Remotion.Data.DomainObjects.Transport.TransportationException">The objects could not be exported using this strategy.</exception>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Transport.DomainObjectImporter">
            <summary>
            Assists in importing data exported by a <see cref="T:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter"/> object. This class is used by
            <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.IO.Stream,Remotion.Data.DomainObjects.Transport.IImportStrategy)"/> and is usually 
            not instantiated by users.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter">
            <summary>
            Collects domain objects to be transported to another system.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.IO.Stream)">
            <summary>
            Loads the data transported from another system into a <see cref="T:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects"/> container using the <see cref="T:Remotion.Data.DomainObjects.Transport.BinaryImportStrategy"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which to load the data.</param>
            <returns>A container holding the objects loaded from the given data.</returns>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.ObjectsNotFoundException">A referenced related object is not part of the transported data and does not exist on the
            target system.</exception>
            <remarks>
            Given a <see cref="T:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter"/>, the binary data can be retrieved from <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Export(System.IO.Stream)"/>.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.IO.Stream,Remotion.Data.DomainObjects.Transport.IImportStrategy)">
            <summary>
            Loads the data transported from another system into a <see cref="T:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects"/> container.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which to load the data.</param>
            <param name="strategy">The strategy to use when importing data. This must match the strategy being used with <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Export(System.IO.Stream,Remotion.Data.DomainObjects.Transport.IExportStrategy)"/>.</param>
            <returns>A container holding the objects loaded from the given data.</returns>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.ObjectsNotFoundException">A referenced related object is not part of the transported data and does not exist on the
            target system.</exception>
            <remarks>
            Given a <see cref="T:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter"/>, the binary data can be retrieved from <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Export(System.IO.Stream,Remotion.Data.DomainObjects.Transport.IExportStrategy)"/>.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.IsLoaded(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Determines whether the specified <paramref name="objectID"/> has been loaded for transportation.
            </summary>
            <param name="objectID">The object ID to check.</param>
            <returns>
            True if the specified object ID has been loaded; otherwise, false.
            </returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadNew(System.Type,Remotion.Reflection.ParamList)">
            <summary>
            Loads a new instance of a domain object for transportation.
            </summary>
            <param name="type">The domain object type to instantiate.</param>
            <param name="constructorParameters">A <see cref="T:Remotion.Reflection.ParamList"/> encapsulating the parameters to be passed to the constructor. Instantiate this
            by using one of the <see cref="M:Remotion.Reflection.ParamList.Create``2(``0,``1)"/> methods.</param>
            <returns>A new instance of <paramref name="type"/> prepared for transport.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Load(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Loads the object with the specified <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> into the transporter.
            </summary>
            <param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of the object to load.</param>
            <returns>The loaded object, whose properties can be manipulated before it is transported.</returns>
            <remarks>
            <para>
            This method loads exactly the object with the given ID, it will not load any related objects.
            </para>
            <para>
            If an object has the foreign key side of a relationship and the related object is not loaded into this transporter, the relationship
            will still be transported. The related object must exist at the target system, otherwise an exception is thrown in
            <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.IO.Stream)"/>.
            </para>
            <para>
            If an object has the virtual side of a relationship and the related object is not loaded into this transporter, the relationship
            will not be transported. Its status after <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.IO.Stream)"/> depends on the objects at the target system. This
            also applies to the 1-side of a 1-to-n relationship because the n-side is the foreign key side.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadWithRelatedObjects(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Loads the object with the specified <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> plus all objects directly referenced by it into the transporter.
            Each object behaves as if it were loaded via <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Load(Remotion.Data.DomainObjects.ObjectID)"/>.
            </summary>
            <param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of the object which is to be loaded together with its related objects.</param>
            <returns>The loaded objects, whose properties can be manipulated before they are transported.</returns>
            <seealso cref="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.GetAllRelatedObjects"/>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadRecursive(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Loads the object with the specified <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> plus all objects directly or indirectly referenced by it into the
            transporter. Each object behaves as if it were loaded via <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Load(Remotion.Data.DomainObjects.ObjectID)"/>.
            </summary>
            <param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of the object which is to be loaded together with its related objects.</param>
            <returns>The loaded objects, whose properties can be manipulated before they are transported.</returns>
            <seealso cref="M:Remotion.Data.DomainObjects.DomainObjectGraphTraverser.GetFlattenedRelatedObjectGraph"/>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadRecursive(Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.IGraphTraversalStrategy)">
            <summary>
            Loads the object with the specified <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> plus all objects directly or indirectly referenced by it into the
            transporter, as specified by the <see cref="T:Remotion.Data.DomainObjects.IGraphTraversalStrategy"/>. Each object behaves as if it were loaded via <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Load(Remotion.Data.DomainObjects.ObjectID)"/>.
            </summary>
            <param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of the object which is to be loaded together with its related objects.</param>
            <param name="strategy">An <see cref="T:Remotion.Data.DomainObjects.IGraphTraversalStrategy"/> instance defining which related object links to follow and which
            objects to include in the set of transported objects.</param>
            <returns>The loaded objects, whose properties can be manipulated before they are transported.</returns>
            <seealso cref="M:Remotion.Data.DomainObjects.DomainObjectGraphTraverser.GetFlattenedRelatedObjectGraph"/>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.GetTransportedObject(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Retrieves a loaded object so that it can be manipulated prior to it being transported.
            </summary>
            <param name="loadedObjectID">The object ID of the object to be retrieved.</param>
            <returns>A <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> representing an object to be transported. Properties of this object can be manipulated.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Export(System.IO.Stream)">
            <summary>
            Exports the objects loaded into this transporter (including their contents) in a binary format for transport to another system using 
            <see cref="T:Remotion.Data.DomainObjects.Transport.BinaryExportStrategy"/>. At the target system, the data can be loaded via <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.IO.Stream)"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to which to export the loaded objects.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Export(System.IO.Stream,Remotion.Data.DomainObjects.Transport.IExportStrategy)">
            <summary>
            Exports the objects loaded into this transporter (including their contents) in a custom format for transport to another system.
            At the target system, the data can be loaded via <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.IO.Stream,Remotion.Data.DomainObjects.Transport.IImportStrategy)"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to which to export the loaded objects.</param>
            <param name="strategy">The strategy to be used for exporting data. This must match the strategy used with 
            <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.IO.Stream,Remotion.Data.DomainObjects.Transport.IImportStrategy)"/>.</param>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.ObjectIDs">
            <summary>
            Gets the IDs of the objects loaded into this transporter.
            </summary>
            <value>The IDs of the loaded objects.</value>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionReadOnlyException">
            <summary>
            Thrown when a client transaction's state is tried to be modified and the ClientTransaction's internal state is set to read-only,
            usually because there is an active nested transaction.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionReadOnlyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionReadOnlyException"/> class, specifying an exception message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.DomainObjectMixinCodeGenerationBridge">
            <summary>
            Forms a bridge between domain objects and mixins by supporting generation and deserialization of mixed domain objects.
            </summary>
            <remarks>All of the methods in this class are tolerant agains non-mixed types, i.e. they will perform default/no-op actions if a non-mixed
            type (or object) is passed to them rather than throwing exceptions.</remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ExtensionClientTransactionListener">
            <summary>
            A <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener"/> implementation that notifies <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/> instances
            about transaction events.
            </summary>
            <remarks>
            The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> class uses this listener to implement its extension mechanism.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory">
            <summary>
            Provides functionality for creating instances of DomainObjects which intercept property calls.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.#ctor(System.String,Remotion.Utilities.TypeConversionProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory"/> class.
            </summary>
            <param name="assemblyDirectory">The directory to save the generated assemblies to. This directory is only used when
            <see cref="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.SaveGeneratedAssemblies"/> is used.</param>
            <param name="typeConversionProvider"></param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.SaveGeneratedAssemblies">
            <summary>
            Saves the assemblies generated by the factory and returns the paths of the saved manifest modules.
            </summary>
            <returns>The paths of the manifest modules of the saved assemblies.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.GetConcreteDomainObjectType(System.Type)">
            <summary>
            Gets a domain object type assignable to the given base type which intercepts property calls.
            </summary>
            <param name="baseType">The base domain object type whose properties should be intercepted.</param>
            <returns>A domain object type which intercepts property calls.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseType"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Utilities.ArgumentTypeException"><paramref name="baseType"/> cannot be assigned to <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="baseType"/> is an abstract, non-instantiable type.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Mapping.MappingException">The given <paramref name="baseType"/> is not part of the mapping.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.GetConcreteDomainObjectType(Remotion.Data.DomainObjects.Mapping.ClassDefinition,System.Type)">
            <summary>
            Gets a domain object type assignable to the given base type which intercepts property calls.
            </summary>
            <param name="baseTypeClassDefinition">The base domain object type whose properties should be intercepted.</param>
            <param name="concreteBaseType">The base domain object type whose properties should be intercepted.</param>
            <returns>A domain object type which intercepts property calls.</returns>
            <exception cref="T:System.ArgumentNullException">One of the parameters passed to this method is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Utilities.ArgumentTypeException"><paramref name="concreteBaseType"/> cannot be assigned to the type specified by <paramref name="baseTypeClassDefinition"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="baseTypeClassDefinition"/> denotes an abstract, non-instantiable type.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.WasCreatedByFactory(System.Type)">
            <summary>
            Checkes whether a given domain object type was created by this factory implementation (but not necessarily the same factory instance).
            </summary>
            <param name="type">The type to be checked.</param>
            <returns>True if <paramref name="type"/> was created by an instance of the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory"/>; false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> parameter was null.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.PrepareUnconstructedInstance(Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Prepares an instance which has not been created via an ordinary constructor callfor use.
            </summary>
            <param name="instance">The instance to be prepared</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> argument is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="instance"/> is not of a type created by this kind of factory.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.Scope">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.Interception.ModuleManager"/> scope used by this factory.
            </summary>
            <value>The scope used by this factory to generate code.</value>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.Interception.IInterceptedDomainObject">
            <summary>
            Marker interface indicating that a domain object type was generated by <see cref="T:Remotion.Data.DomainObjects.Infrastructure.Interception.TypeGenerator"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.LoggingClientTransactionListener">
            <summary>
            A listener implementation logging all transaction events.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ReadOnlyClientTransactionListener">
            <summary>
            An implementation of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener"/> which throws an exception if the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> is about
            to be modified while in a read-only state.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer">
            <summary>
            Provides an indexer to access a specific property of a domain object. Instances of this value type are returned by
            <see cref="P:Remotion.Data.DomainObjects.DomainObject.Properties"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.#ctor(Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Initializes a new <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer"/> instance. This is usually not called from the outside; instead, <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer"/>
            instances are returned by <see cref="P:Remotion.Data.DomainObjects.DomainObject.Properties"/>.
            </summary>
            <param name="domainObject">The domain object whose properties should be accessed with this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="domainObject"/> parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.GetPropertyCount">
            <summary>
            Gets the number of properties defined by the domain object. This corresponds to the number of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor"/> objects
            indexable by this structure and enumerated by <see cref="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.AsEnumerable"/>.
            </summary>
            <returns>The number of properties defined by the domain object.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.AsEnumerable">
            <summary>
            Returns an implementation of <see cref="T:System.Collections.Generic.IEnumerable`1"/> that enumerates over all the properties indexed by this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer"/>
            in the <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject"/>'s <see cref="P:Remotion.Data.DomainObjects.DomainObject.DefaultTransactionContext"/>.
            </summary>
            <returns>A sequence containing <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor"/> objects for each property of this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer"/>'s 
            <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.AsEnumerable(Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Returns an implementation of <see cref="T:System.Collections.Generic.IEnumerable`1"/> that enumerates over all the properties indexed by this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer"/>
            in the given <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
            <param name="transaction">The transaction to be used to enumerate the properties.</param>
            <returns>A sequence containing <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor"/> objects for each property of this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer"/>'s 
            <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Contains(System.String)">
            <summary>
            Determines whether the domain object contains a property with the specified identifier.
            </summary>
            <param name="propertyIdentifier">The long property identifier to check for.</param>
            <returns>
            True if the domain object contains a property named as specified by <paramref name="propertyIdentifier"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Contains(System.Type,System.String)">
            <summary>
            Determines whether the domain object contains a property with the specified short name and declaring type.
            </summary>
            <param name="domainObjectType">The type declaring the property with the given <paramref name="shortPropertyName"/>.</param>
            <param name="shortPropertyName">The short property name to check for.</param>
            <returns>
            True if the domain object contains a property named as specified by <paramref name="shortPropertyName"/> declared on
            <paramref name="domainObjectType"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Find(System.Type,System.String)">
            <summary>
            Finds a property with the specified short name, starting its search at a given declaring type upwards the inheritance hierarchy.
            </summary>
            <param name="typeToStartSearch">The type to start searching from.</param>
            <param name="shortPropertyName">The short name of the property to find.</param>
            <returns>A <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor"/> encapsulating the first property with the given <paramref name="shortPropertyName"/>
            found when traversing upwards through the inheritance hierarchy, starting from <paramref name="typeToStartSearch"/>.</returns>
            <exception cref="T:System.ArgumentNullException">One or more of the arguments passed to this method are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">No matching property could be found.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Find``1(``0,System.String)">
            <summary>
            Finds a property with the specified short name, starting its search at the type of the given <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject"/> argument.
            </summary>
            <typeparam name="TDomainObject">The type to start searching from.</typeparam>
            <param name="thisDomainObject">The domain object parameter used for inference of type <typeparamref name="TDomainObject"/>.</param>
            <param name="shortPropertyName">The short name of the property to find.</param>
            <returns>A <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor"/> encapsulating the first property with the given <paramref name="shortPropertyName"/>
            found when traversing upwards through the inheritance hierarchy, starting from <typeparamref name="TDomainObject"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="shortPropertyName"/>parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">No matching property could be found.</exception>
            <remarks>
            This method exists as a convenience overload of <see cref="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Find(System.Type,System.String)"/>. Instead of needing to specify a lengthy <c>typeof(...)</c>
            expression, this method can usually infer the type to search from the <c>this</c> parameter passed as the first argument.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Find(System.String)">
            <summary>
            Finds a property with the specified short name, starting its search at the type of the <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject"/> whose properties
            are represented by this indexer.
            </summary>
            <param name="shortPropertyName">The short name of the property to find.</param>
            <returns>A <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor"/> encapsulating the first property with the given <paramref name="shortPropertyName"/>
            found when traversing upwards through the inheritance hierarchy</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="shortPropertyName"/>parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">No matching property could be found.</exception>
            <remarks>
            This method exists as a convenience overload of <see cref="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Find(System.Type,System.String)"/>. Instead of needing to specify a starting type for the search, 
            this method assumes that it should start at the actual type of the current <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject"/>.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.GetAllRelatedObjects">
            <summary>
            Gets all related objects of the associated <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject"/>.
            </summary>
            <returns>An enumeration of all <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject"/> directly referenced by the associated <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject"/> in the form of
            <see cref="F:Remotion.Data.DomainObjects.Infrastructure.PropertyKind.RelatedObject"/> and <see cref="F:Remotion.Data.DomainObjects.Infrastructure.PropertyKind.RelatedObjectCollection"/> properties.</returns>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject">
            <summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject"/> associated with this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer"/>.
            </summary>
            <value>The domain object associated with this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer"/>.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Item(System.String)">
            <summary>
            Selects the property of the domain object with the given name.
            </summary>
            <param name="propertyName">The name of the property to be accessed.</param>
            <returns>A <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor"/> instance encapsulating the requested property.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="propertyName"/> parameter does not denote a valid mapping property of the domain object.
            </exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Item(System.Type,System.String)">
            <summary>
            Selects the property of the domain object with the given short name and declaring type.
            </summary>
            <param name="shortPropertyName">The short name of the property to be accessed.</param>
            <param name="domainObjectType">The type declaring the property.</param>
            <returns>A <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor"/> instance encapsulating the requested property.</returns>
            <exception cref="T:System.ArgumentNullException">One or more of the parameters passed to this indexer are null.</exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="shortPropertyName"/> parameter does not denote a valid mapping property declared on the <paramref name="domainObjectType"/>.
            </exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Item(System.String,Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Selects the property of the domain object with the given name.
            </summary>
            <param name="propertyName">The name of the property to be accessed.</param>
            <param name="transaction">The transaction to use for accessing the property.</param>
            <returns>A <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor"/> instance encapsulating the requested property.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="propertyName"/> parameter does not denote a valid mapping property of the domain object.
            </exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Item(System.Type,System.String,Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Selects the property of the domain object with the given short name and declaring type.
            </summary>
            <param name="shortPropertyName">The short name of the property to be accessed.</param>
            <param name="domainObjectType">The type declaring the property.</param>
            <param name="transaction">The transaction to use for accessing the property.</param>
            <returns>A <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor"/> instance encapsulating the requested property.</returns>
            <exception cref="T:System.ArgumentNullException">One or more of the parameters passed to this indexer are null.</exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="shortPropertyName"/> parameter does not denote a valid mapping property declared on the <paramref name="domainObjectType"/>.
            </exception>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.RootPersistenceStrategy">
            <summary>
            Represents a top-level <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>, which does not have a parent transaction.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.TransactionUnlocker">
            <summary>
            Temporarily makes a read-only transaction writeable.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.LoadMode">
            <summary>
            Indicates whether a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> was loaded as a whole or if only its <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> was loaded.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.LoadMode.WholeDomainObjectInitialized">
            <summary>
            The whole object has been loaded, e.g. as a reaction to <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetObject``1(Remotion.Data.DomainObjects.ObjectID)"/>.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.LoadMode.DataContainerLoadedOnly">
            <summary>
            Only the object's <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> has been loaded, e.g. as a reaction to <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)"/> or
            in a substransaction.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.InstantiableAttribute">
            <summary>
            When the <see cref="T:Remotion.Data.DomainObjects.InstantiableAttribute"/> is defined on a type, it signals that this type can be instantiated by the
            <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> infrastructure even though it declared as <see langword="abstract"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.InstantiableAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.InstantiableAttribute"/> class.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.MemberReflectorBase">
            <summary>Base class for reflecting on the properties and relations of a class.</summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.BidirectionalRelationAttribute">
            <summary>
            Declares a relation as bidirectional.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.BidirectionalRelationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.BidirectionalRelationAttribute"/> class with the name of the oppsite property.
            </summary>
            <param name="oppositeProperty">The name of the opposite property. Must not be <see langword="null"/> or empty.</param>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.BidirectionalRelationAttribute.SortExpression">
            <summary>
            Gets or sets an expression used to sort the relation when it is loaded from the data source. This is only valid on collection-valued properties.
            </summary>
            <remarks>The <see cref="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.BidirectionalRelationAttribute.SortExpression"/> consists of a comma-separated list of property names, each optionally followed by a direction 
            specification ("asc" or "desc"; the default is "asc"). The property name should be the ordinary .NET property name. To resolve ambiguities or 
            to sort by properties declared by subclasses of the related class, the unique re-store property identifier can be used instead.</remarks>
            <example>
            <para>
            On an OrderItems property: <c>Position</c>&gt;
            </para>
            <para>
            On an OrderItems property: <c>Product asc, Quantity desc</c>
            </para>
            <para>
            On a Persons property, where some Persons are Customers which have a CustomerType property: <c>TestDomain.Customer.CustomerType</c>
            </para>
            <para>
            In the last example, the unique re-store property identifier was used because the CustomerType property is only available on a subclass 
            (Customer) of the related class (Person).
            </para>
            </example>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.ClassReflector">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.ClassReflector"/> is used to build a <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/>.
            </summary>
            <remarks>Derived classes must have a cosntructor with a matching the <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.ClassReflector"/>'s constructor signature. </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.BinaryPropertyAttribute">
            <summary>
            Apply the <see cref="T:Remotion.Data.DomainObjects.BinaryPropertyAttribute"/> to properties of type <see cref="T:System.Byte"/> array.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationReflector">
            <summary>Used to create the <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationDefinition"/> from a <see cref="T:Remotion.Reflection.IPropertyInformation"/>.</summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationReflectorBase`1">
            <summary>Base class for reflecting on the relations of a class.</summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute">
            <summary>
            Declares a relation as bidirectional. Use <see cref="P:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute.ContainsForeignKey"/> to indicate the the foreign key side in a one-to-one relation
            and the <see cref="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.BidirectionalRelationAttribute.SortExpression"/> to specify the <b>Order By</b>-clause.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute"/> class with the name of the oppsite property
            and the <see cref="P:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute.ContainsForeignKey"/> value.
            </summary>
            <param name="oppositeProperty">The name of the opposite property. Must not be <see langword="null"/> or empty.</param>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute.ContainsForeignKey">
            <summary>Gets or sets a flag that indicates the foreign key side in a one-to-one relation.</summary>
            <remarks>The <see cref="P:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute.ContainsForeignKey"/> property may only be specified on one side of a one-to-one-relaiton.</remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RdbmsRelationEndPointReflector">
            <summary>
            Used to create the <see cref="T:Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition"/> from a <see cref="T:Remotion.Reflection.IPropertyInformation"/> for types persisted in an <b>RDBMS</b>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationEndPointReflector`1">
            <summary>Used to create the <see cref="T:Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition"/> from a <see cref="T:Remotion.Reflection.IPropertyInformation"/>.</summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationEndPointReflector">
            <summary>Used to create the <see cref="T:Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition"/> from a <see cref="T:Remotion.Reflection.IPropertyInformation"/>.</summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.PropertyReflector">
            <summary>Used to create the <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition"/> from a <see cref="T:System.Reflection.PropertyInfo"/>.</summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.StorageClass">
            <summary>The storage class options available in the persistence framework.</summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.Mapping.StorageClass.Persistent">
            <summary>The property is persistet into the data store.</summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.Mapping.StorageClass.Transaction">
            <summary>The property is managed by the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>, but not persistet.</summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.Mapping.StorageClass.None">
            <summary>The property is ignored by the persistence framework.</summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.StorageClassAttribute">
            <summary>Defines if and how a property is managed by the persistence framework.</summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IStorageSpecificIdentifierAttribute">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IStorageSpecificIdentifierAttribute"/> interface is used as a storage provider indifferent marker interface for more 
            conrete attributes such as the <see cref="T:Remotion.Data.DomainObjects.DBColumnAttribute"/>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IStorageSpecificIdentifierAttribute.Identifier">
            <summary>
            Gets the <see cref="T:System.String"/> used as the identifier.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.MandatoryAttribute">
            <summary>
            Apply the <see cref="T:Remotion.Data.DomainObjects.MandatoryAttribute"/> to properties of type <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DBColumnAttribute">
            <summary>Overrides the name used as the column name in the <b>RDBMS</b>.</summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DBColumnAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.DBColumnAttribute"/> class.</summary>
            <param name="name">The name. Must not be <see langword="null"/> or empty.</param>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DBColumnAttribute.Name">
            <summary>
            Gets the column name defined by this <see cref="T:Remotion.Data.DomainObjects.DBColumnAttribute"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DBTableAttribute">
            <summary>
            Use the <see cref="T:Remotion.Data.DomainObjects.DBTableAttribute"/> to define the distribution of the types within a persistence hierarchy into one or more database tables.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DBTableAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.DBTableAttribute"/> class.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DBTableAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.DBTableAttribute"/> class with a custom table name.</summary>
            <param name="name">The name of the table. Must not be <see langword="null"/> or empty.</param>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DBTableAttribute.Name">
            <summary>
            Gets the table name defined by this <see cref="T:Remotion.Data.DomainObjects.DBTableAttribute"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor">
            <summary>
            Provides an encapsulation of a <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.DomainObject">DomainObject's</see> property for simple access as well as static methods
            supporting working with properties.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.#ctor(Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData,Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Initializes the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor"/> object.
            </summary>
            <param name="domainObject">The domain object whose property is to be encapsulated.</param>
            <param name="propertyData">a <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData"/> object describing the property to be accessed.</param>
            <param name="clientTransaction">The transaction to be used for accessing the property.</param>
            <exception cref="T:System.ArgumentNullException">One of the parameters passed to the constructor is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The domain object does not have a property with the given identifier.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetValue``1">
            <summary>
            Gets the property's value.
            </summary>
            <typeparam name="T">
            The property value type. This must be the same as the type returned by <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyType"/>: For simple value properties,
            this is the simple property type. For related objects, this is the related object's type. For related object collections,
            this is <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/>, where "T" is the related objects' type.
            </typeparam>
            <returns>The value of the encapsulated property. For simple value properties,
            this is the property value. For related objects, this is the related object. For related object collections,
            this is an <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/>, where "T" is the related objects' type.</returns>
            <exception cref="T:Remotion.Data.DomainObjects.InvalidTypeException">
            The type requested via <typeparamref name="T"/> is not the same as the property's type indicated by <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyType"/>.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.DomainObject"/> cannot be used in the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in the associated <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.ClientTransaction"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetValueWithoutTypeCheck">
            <summary>
            Gets the property's value without performing a type check.
            </summary>
            <returns>The value of the encapsulated property. For simple value properties,
            this is the property value. For related objects, this is the related object. For related object collections,
            this is an <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/>, where "T" is the related objects' type.</returns>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.DomainObject"/> cannot be used in the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in the associated <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.ClientTransaction"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetRelatedObjectID">
            <summary>
            Gets the ID of the related object for related object properties.
            </summary>
            <returns>The ID of the related object stored in the encapsulated property.</returns>
            <exception cref="T:System.InvalidOperationException">The property type is not <see cref="F:Remotion.Data.DomainObjects.Infrastructure.PropertyKind.RelatedObject"/> or the property is a virtual
            relation end point (i.e. the other side of the relation holds the foreign key).</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.DomainObject"/> cannot be used in the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in the associated <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.ClientTransaction"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetOriginalValue``1">
            <summary>
            Gets the property's value from that moment when the property's domain object was enlisted in the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
            <typeparam name="T">
            The property value type. This must be the same as the type returned by <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyType"/>: For simple value properties,
            this is the simple property type. For related objects, this is the related object's type. For related object collections,
            this is <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/>, where "T" is the related objects' type. The type parameter can usually be inferred and needn't be
            specified in such cases.
            </typeparam>
            <returns>The original value of the encapsulated property in the current transaction.</returns>
            <exception cref="T:Remotion.Data.DomainObjects.InvalidTypeException">
            The type requested via <typeparamref name="T"/> is not the same as the property's type indicated by <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyType"/>.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.DomainObject"/> cannot be used in the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in the associated <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.ClientTransaction"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetOriginalValueWithoutTypeCheck">
            <summary>
            Gets the property's original value without performing a type check.
            </summary>
            <returns>The original value of the encapsulated property in the current transaction.</returns>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.DomainObject"/> cannot be used in the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in the associated <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.ClientTransaction"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetOriginalRelatedObjectID">
            <summary>
            Gets the original ID of the related object for related object properties.
            </summary>
            <returns>The ID of the related object originally stored in the encapsulated property.</returns>
            <exception cref="T:System.InvalidOperationException">The property type is not <see cref="F:Remotion.Data.DomainObjects.Infrastructure.PropertyKind.RelatedObject"/> or the property is a virtual
            relation end point (i.e. the other side of the relation holds the foreign key).</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.DomainObject"/> cannot be used in the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in the associated <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.ClientTransaction"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.SetValue``1(``0)">
            <summary>
            Sets the property's value.
            </summary>
            <typeparam name="T">
            The property value type. This must be the same as the type returned by <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyType"/>: For simple value properties,
            this is the simple property type. For related objects, this is the related object's type. For related object collections,
            this is <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/>, where "T" is the related objects' type. The type parameter can usually be inferred and needn't be
            specified in such cases.
            </typeparam>
            <param name="value">The value to be set. For simple value properties,
            this is the value to be set. For related objects, this is the related object. For related object collections,
            this is an <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/>, where "T" is the related objects' type.</param>
            <exception cref="T:Remotion.Data.DomainObjects.InvalidTypeException">
            The type <typeparamref name="T"/> is not the same as the property's type indicated by <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyType"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">The property is a related object collection; such properties cannot be set.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.DomainObject"/> cannot be used in the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in the associated <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.ClientTransaction"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.SetValueWithoutTypeCheck(System.Object)">
            <summary>
            Sets the property's value without performing an exact type check on the given value. The value must still be asssignable to
            <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyType"/>, though.
            </summary>
            <param name="value">The value to be set. For simple value properties,
            this is the value to be set. For related objects, this is the related object. For related object collections,
            this is an <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/>, where "T" is the related objects' type.</param>
            <exception cref="T:Remotion.Data.DomainObjects.InvalidTypeException">
            The given <paramref name="value"/> is not assignable to the property because of its type.
            </exception>
            <exception cref="T:System.InvalidOperationException">The property is a related object collection; such properties cannot be set.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.DomainObject"/> cannot be used in the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in the associated <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.ClientTransaction"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.ToString">
            <summary>
            Returns the full property name of the property represented by this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor"/>.
            </summary>
            <returns>
            The same value as in <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyIdentifier"/>.
            </returns>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.DomainObject">
            <summary>
            Gets the domain object of this property.
            </summary>
            <value>The domain object this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor"/> is associated with.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.PropertyData">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData"/> object describing the property to be accessed.
            </summary>
            <value>The property data to be accessed.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.ClientTransaction">
            <summary>
            Gets the client transaction used to access this property.
            </summary>
            <value>The client transaction.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.HasChanged">
            <summary>
            Indicates whether the property's value has been changed in its current transaction.
            </summary>
            <value>True if the property's value has changed; false otherwise.</value>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.DomainObject"/> cannot be used in the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in the associated <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.ClientTransaction"/>.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.HasBeenTouched">
            <summary>
            Indicates whether  the property's value (for simple and related object properties) or one of its elements (for related object collection
            properties) has been assigned since instantiation, loading, commit or rollback, regardless of whether the current value differs from the
            original value.
            </summary>
            <remarks>This property differs from <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.HasChanged"/> in that for <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.HasChanged"/> to be true, the property's value (or its
            elements) actually must have changed in an assignment operation. <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.HasBeenTouched"/> is true also if a property gets assigned the
            same value it originally had. This can be useful to determine whether the property has been written once since the last load, commit, or
            rollback operation.
            </remarks>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.IsNull">
            <summary>
            Gets a value indicating whether the property's value is <see langword="null"/>.
            </summary>
            <value>True if this instance is null; otherwise, false.</value>
            <remarks>This can be used to efficiently check whether a related object property has a value without actually loading the related
            object.</remarks>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException">The <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.DomainObject"/> cannot be used in the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is invalid in the associated <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.ClientTransaction"/>.</exception>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.IQueryManager">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Queries.IQueryManager"/> provides an interface for methods to execute queries within a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.IQueryManager.GetScalar(Remotion.Data.DomainObjects.Queries.IQuery)">
            <summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> and returns the scalar value.
            </summary>
            <param name="query">The query to execute. Must not be <see langword="null"/>.</param>
            <returns>The scalar value that is returned by the query.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="query"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="query"/> does not have a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryType"/> of <see cref="F:Remotion.Data.DomainObjects.Queries.Configuration.QueryType.Scalar"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderConfigurationException">
              The <see cref="P:Remotion.Data.DomainObjects.Queries.IQuery.StorageProviderDefinition"/> of <paramref name="query"/> could not be found.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.PersistenceException">
              The <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"/> for the given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> could not be instantiated.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.StorageProviderException">
              An error occurred while executing the query.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.IQueryManager.GetCollection(Remotion.Data.DomainObjects.Queries.IQuery)">
            <summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> and returns a collection of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s returned by the query.
            </summary>
            <param name="query">The query to execute. Must not be <see langword="null"/>.</param>
            <returns>An <see cref="T:Remotion.Data.DomainObjects.Queries.IQueryResult"/> containing the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s returned by the query.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="query"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="query"/> does not have a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryType"/> of <see cref="F:Remotion.Data.DomainObjects.Queries.Configuration.QueryType.Collection"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderConfigurationException">
              The <see cref="P:Remotion.Data.DomainObjects.Queries.IQuery.StorageProviderDefinition"/> of <paramref name="query"/> could not be found.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.PersistenceException">
              The <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"/> for the given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> could not be instantiated.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.StorageProviderException">
              An error occurred while executing the query.
            </exception>
            <remarks>
            The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryResult`1"/> can contain <see langword="null"/> values and deleted items. To check whether an item has been deleted,
            compare its <see cref="P:Remotion.Data.DomainObjects.DomainObject.State"/> property to <see cref="F:Remotion.Data.DomainObjects.StateType.Deleted"/>.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.IQueryManager.GetCollection``1(Remotion.Data.DomainObjects.Queries.IQuery)">
            <summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> and returns a collection of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s returned by the query.
            </summary>
            <param name="query">The query to execute. Must not be <see langword="null"/>.</param>
            <typeparam name="T">The type of <see cref="N:Remotion.Data.DomainObjects"/> to be returned from the query.</typeparam>
            <returns>A <see cref="T:Remotion.Data.DomainObjects.Queries.QueryResult`1"/> containing the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s returned by the query.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="query"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.InvalidTypeException">The objects returned by the <paramref name="query"/> do not match the expected type
              <typeparamref name="T"/> or the configured collection type is not assignable to <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/> with the given <typeparamref name="T"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="query"/> does not have a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryType"/> of <see cref="F:Remotion.Data.DomainObjects.Queries.Configuration.QueryType.Collection"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderConfigurationException">
              The <see cref="P:Remotion.Data.DomainObjects.Queries.IQuery.StorageProviderDefinition"/> of <paramref name="query"/> could not be found.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.PersistenceException">
              The <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"/> for the given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> could not be instantiated.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.StorageProviderException">
              An error occurred while executing the query.
            </exception>
            <remarks>
            The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryResult`1"/> can contain <see langword="null"/> values and deleted items. To check whether an item has been deleted,
            compare its <see cref="P:Remotion.Data.DomainObjects.DomainObject.State"/> property to <see cref="F:Remotion.Data.DomainObjects.StateType.Deleted"/>.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.StorageClassNoneAttribute">
            <summary>Defines the property as not managed by the persistence framework.</summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.StorageClassTransactionAttribute">
            <summary>Defines the property as managed in the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> but not-persisted in the underlying data store.</summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.StringPropertyAttribute">
            <summary>
            Apply the <see cref="T:Remotion.Data.DomainObjects.StringPropertyAttribute"/> to properties of type <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Configuration.IDomainObjectsConfiguration">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.Configuration.IDomainObjectsConfiguration"/> interface is an abstraction for the <see cref="T:System.Configuration.ConfigurationSectionGroup"/> and the fake 
            implementation of the domain objects configuration.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.Interception.NonInterceptableTypeException">
            <summary>
            This exception is thrown when the property interception mechanism cannot be applied to a specific <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> type
            because of problems with that type's declaration.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.Interception.NonInterceptableTypeException.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.Interception.NonInterceptableTypeException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="type">The type that cannot be intercepted.</param>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.Interception.NonInterceptableTypeException.Type">
            <summary>
            The type that cannot be intercepted.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager">
            <summary>
            Manages a stack of property names per thread.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager.GetAndCheckCurrentPropertyName">
            <summary>
            Retrieves the current property name and throws an exception if there is no property name on this thread's property name stack.
            </summary>
            <returns>The current property name.</returns>
            <remarks>Retrieves the current property name previously initialized via. Domain objects created with 
            interception support automatically initialize their virtual properties without needing any further work.</remarks>
            <exception cref="T:System.InvalidOperationException">There is no current property or it hasn't been properly initialized.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager.PreparePropertyAccess(System.String)">
            <summary>
            Prepares access to the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> of the given name by pushing its name on top of the current thread's stack of property 
            names.
            </summary>
            <param name="propertyName">The name of the property to be accessed.</param>
            <remarks>This method prepares the given property for access via <see cref="P:Remotion.Data.DomainObjects.DomainObject.CurrentProperty"/>.
            It is automatically invoked for virtual properties in domain objects created with interception support and thus doesn't
            have to be called manually for these objects. If you choose to invoke <see cref="M:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager.PreparePropertyAccess(System.String)"/> and
            <see cref="M:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager.PropertyAccessFinished"/> yourself, be sure to finish the property access with exactly one call to 
            <see cref="M:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager.PropertyAccessFinished"/> from a finally-block.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Utilities.ArgumentEmptyException"><paramref name="propertyName"/> is an empty string.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> parameter does not denote a valid property.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager.PropertyAccessFinished">
            <summary>
            Indicates that access to the property of the given name is finished by removing it from the current thread's stack of property names.
            </summary>
            <remarks>This method must be executed after a property previously prepared via <see cref="M:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager.PreparePropertyAccess(System.String)"/> has been accessed as needed.
            It is automatically invoked for virtual properties in domain objects created with interception suppport and thus doesn't
            have to be called manually for these objects. If you choose to invoke <see cref="M:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager.PreparePropertyAccess(System.String)"/> and
            <see cref="M:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager.PropertyAccessFinished"/> yourself, be sure to invoke this method in a finally-block in order to guarantee its execution.</remarks>
            <exception cref="T:System.InvalidOperationException">There is no property to be finished. There is likely a mismatched number of calls to
            <see cref="M:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager.PreparePropertyAccess(System.String)"/> and <see cref="M:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager.PropertyAccessFinished"/>.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager.CurrentPropertyName">
            <summary>
            Returns the property name last put on this thread's stack, or null if the stack is empty.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Development.FakeDomainObjectsConfiguration">
            <summary>
            Fake implementation of the <see cref="T:Remotion.Data.DomainObjects.Configuration.IDomainObjectsConfiguration"/> interface. Use this class for programmatically setting up the configuration 
            in unit test scenarios.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Configuration.DomainObjectsConfiguration">
            <summary>
            <see cref="T:System.Configuration.ConfigurationSectionGroup"/> for grouping the <see cref="T:System.Configuration.ConfigurationSection"/> in the <b>Remotion.Data.DomainObjects</b> namespace.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ObjectList`1.#ctor(Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> class with a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/>
            data storage strategy. The <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/>'s <see cref="P:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData.RequiredItemType"/>
            must be set to <typeparamref name="T"/>.
            </summary>
            <param name="dataStrategy">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionData.IDomainObjectCollectionData"/> instance to use as the data storage strategy.</param>
            <remarks>
            <para>
            Derived classes must provide a constructor with the same signature. (The constructor is used for cloning as well as by relation end points.)
            </para>
            <para>
            Most members of <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> directly delegate to the given <paramref name="dataStrategy"/>, so it should 
            any special argument checks and event raising must be performed by the <paramref name="dataStrategy"/> itself.
            </para>
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ObjectList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/> class with a given initial contents.
            </summary>
            <param name="domainObjects">The domain objects to use as the initial contents of the <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/>.</param>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.IDomainObjectCreator">
            <summary>
            Provides a common interface for classes creating new instances of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> types.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.IDomainObjectCreator.CreateObjectReference(Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.ClientTransaction)">
            <summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instance and initializes it with the given <paramref name="objectID"/> and 
            <paramref name="clientTransaction"/>. The object is enlisted with the transaction, but no <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> is created for it.
            The instance is created without a constructor being called.
            </summary>
            <param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> to assign to the object.</param>
            <param name="clientTransaction">The transaction to create the object reference with. The reference is automatically enlisted in the given
            transaction. If the transaction is a binding transaction, the reference is automatically bound to it.</param>
            <returns>A <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instance with the given <paramref name="objectID"/> that is enlisted in the given transaction.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Infrastructure.IDomainObjectCreator.GetConstructorLookupInfo(System.Type)">
            <summary>
            Gets a <see cref="T:Remotion.Reflection.ConstructorLookupInfo"/> that can be used to construct a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> of the given 
            <paramref name="domainObjectType"/>.
            </summary>
            <param name="domainObjectType">Type of the domain object.</param>
            <returns>A <see cref="T:Remotion.Reflection.ConstructorLookupInfo"/> that can be used to instantiate a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> of the given type.</returns>
            <remarks>
            The <see cref="T:Remotion.Reflection.ConstructorLookupInfo"/> returned by this method might not directly represent the given type; instead, it might represent a 
            proxy type compatible with <paramref name="domainObjectType"/>.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectCreator">
            <summary>
            Creates new domain object instances via the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection">
            <summary>
            A collection of <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/>s.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection.Add(Remotion.Data.DomainObjects.IClientTransactionExtension)">
            <summary>
            Adds an <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/> to the collection.
            </summary>
            <param name="clientTransactionExtension">The extension to add. Must not be <see langword="null"/>.</param>
            <exception cref="T:System.InvalidOperationException">An extension with the same <see cref="P:Remotion.Data.DomainObjects.IClientTransactionExtension.Key"/> as the given 
            <paramref name="clientTransactionExtension"/> is already part of the collection.</exception>
            <remarks>The order of the extensions in the collection is the order in which they are notified.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection.Remove(System.String)">
            <summary>
            Removes an <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/> from the collection.
            </summary>
            <param name="key">The name of the extension. Must not be <see langword="null"/> or <see cref="F:System.String.Empty"/>.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection.IndexOf(System.String)">
            <summary>
            Gets the index of an <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/> with a given <paramref name="key"/>.
            </summary>
            <param name="key">The name of the extension. Must not be <see langword="null"/> or <see cref="F:System.String.Empty"/>.</param>
            <returns>The index of the extension, or -1 if <paramref name="key"/> is not found.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection.Insert(System.Int32,Remotion.Data.DomainObjects.IClientTransactionExtension)">
            <summary>
            Inserts an <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/> intto the collection at a specified index.
            </summary>
            <param name="clientTransactionExtension">The extension to insert. Must not be <see langword="null"/>.</param>
            <param name="index">The index where the extension should be inserted.</param>
            <exception cref="T:System.ArgumentException">An extension with the same <see cref="P:Remotion.Data.DomainObjects.IClientTransactionExtension.Key"/> as the given 
            <paramref name="clientTransactionExtension"/> is already part of the collection.</exception>
            <remarks>The order of the extensions in the collection is the order in which they are notified.</remarks>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection.Item(System.String)">
            <summary>
            Gets an <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/> by the extension name.
            </summary>
            <param name="key">The <see cref="P:Remotion.Data.DomainObjects.IClientTransactionExtension.Key"/> of the extension. Must not be <see langword="null"/> or 
            <see cref="F:System.String.Empty"/>.</param>
            <returns>The <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/> of the given <paramref name="key"/> or <see langword="null"/> if the name was not found.</returns>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/> of a given <paramref name="index"/>.
            </summary>
            <param name="index">The index of the extension to be retrieved.</param>
            <returns>The <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension"/> of the given <paramref name="index"/>.</returns>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationBase">
            <summary>
            Represents the common information all configuration classes provide.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ConfigurationBase.#ctor(Remotion.Data.DomainObjects.ConfigurationLoader.XmlBasedConfigurationLoader.BaseFileLoader)">
            <summary>
            Initializes a new instance of the <b>ConfigurationBase</b> class from the specified <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.XmlBasedConfigurationLoader.BaseFileLoader"/>.
            </summary>
            <param name="loader">The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.XmlBasedConfigurationLoader.BaseFileLoader"/> to be used for reading the configuration. Must not be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="loader"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ConfigurationBase.ResolveTypes">
            <summary>
            Gets a flag whether type names in the configuration file should be resolved to their corresponding .NET <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ConfigurationException">
            <summary>
            BaseClass for exceptions that are related to the configuraton of the persistence framework.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.DataContainer">
            <summary>
            Represents a container for the persisted properties of a DomainObject.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.CreateNew(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Creates an empty <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> for a new <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>. The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>
            contains a new <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> object for every <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition"/> in the respective <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.ClassDefinition"/>.
            The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> has be to <see cref="M:Remotion.Data.DomainObjects.DataManagement.DataManager.RegisterDataContainer(Remotion.Data.DomainObjects.DataManagement.DataContainer)">registered</see> with a 
            <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.ClientTransaction"/> and its <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject"/> must <see cref="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.SetDomainObject(Remotion.Data.DomainObjects.DomainObject)">be set</see> before it can be used.
            </summary>
            <remarks>
            The new <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> has a <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.State"/> of <see cref="F:Remotion.Data.DomainObjects.StateType.New"/>. All <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/>s for the class specified by <see cref="P:Remotion.Data.DomainObjects.ObjectID.ClassID"/> are created.
            </remarks>
            <param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of the new <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> to create. Must not be <see langword="null"/>.</param>
            <returns>The new <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.CreateForExisting(Remotion.Data.DomainObjects.ObjectID,System.Object,System.Func{Remotion.Data.DomainObjects.Mapping.PropertyDefinition,System.Object})">
            <summary>
            Creates an empty <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> for an existing <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>. The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>
            contain all <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> objects, just as if it had been created with <see cref="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.CreateNew(Remotion.Data.DomainObjects.ObjectID)"/>, but the values for its 
            properties are set as returned by a lookup method.
            The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> has be to registered with a <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.ClientTransaction"/> via <see cref="M:Remotion.Data.DomainObjects.DataManagement.DataManager.RegisterDataContainer(Remotion.Data.DomainObjects.DataManagement.DataContainer)"/> 
            and <see cref="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.SetDomainObject(Remotion.Data.DomainObjects.DomainObject)"/> must be called before it can be used.
            </summary>
            <remarks>
            The new <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> has a <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.State"/> of <see cref="F:Remotion.Data.DomainObjects.StateType.Unchanged"/>. All <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/>s for the 
            class specified by <see cref="P:Remotion.Data.DomainObjects.ObjectID.ClassID"/> are created.
            </remarks>
            <param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of the new <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> to create. Must not be <see langword="null"/>.</param>
            <param name="timestamp">The timestamp value of the existing object in the data source.</param>
            <param name="valueLookup">A function object returning the value of a given property for the existing object.</param>
            <returns>The new <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Mapping.MappingException">ClassDefinition of <paramref name="id"/> does not exist in mapping.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.GetValue(System.String)">
            <summary>
            Gets the value of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> specified by <paramref name="propertyName"/>.
            </summary>
            <param name="propertyName">The name of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/>. Must not be <see langword="null"/>.</param>
            <returns>The value of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Utilities.ArgumentEmptyException"><paramref name="propertyName"/> is an empty string.</exception>
            <exception cref="T:System.ArgumentException">The given <paramref name="propertyName"/> does not exist in the data container.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> has been discarded. 
            See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.SetValue(System.String,System.Object)">
            <summary>
            Sets the value of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> specified by <paramref name="propertyName"/>.
            </summary>
            <param name="propertyName">The name of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/>. Must not be <see langword="null"/>.</param>
            <param name="value">The value the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> is set to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Utilities.ArgumentEmptyException"><paramref name="propertyName"/> is an empty string.</exception>
            <exception cref="T:System.ArgumentException">The given <paramref name="propertyName"/> does not exist in the data container.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> has been discarded. 
            See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.MarkAsChanged">
            <summary>
            Marks an existing <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> as changed. <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.State"/> will return <see cref="F:Remotion.Data.DomainObjects.StateType.Changed"/> after this method
            has been called.
            </summary>
            <exception cref="T:System.InvalidOperationException">This <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> is not in state <see cref="F:Remotion.Data.DomainObjects.DataManagement.DataContainer.DataContainerStateType.Existing"/>.
            New or deleted objects cannot be marked as changed.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> has been discarded. 
            See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.Clone(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Creates a copy of this data container and its state.
            </summary>
            <returns>A copy of this data container with the same <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> and the same property values. The copy's
            <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.ClientTransaction"/> and <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject"/> are not set, so the returned <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> cannot be 
            used until it is registered with a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. Its <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject"/> is set via the
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.SetDomainObject(Remotion.Data.DomainObjects.DomainObject)"/> method.</returns>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.Item(System.String)">
            <summary>
            Gets the value of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> specified by <paramref name="propertyName"/>.
            </summary>
            <param name="propertyName">The name of the property. Must not be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Utilities.ArgumentEmptyException"><paramref name="propertyName"/> is an empty string.</exception>
            <exception cref="T:System.ArgumentException">The given <paramref name="propertyName"/> does not exist in the data container.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The object is already discarded. See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.ClientTransaction">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> which the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> is part of.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> has been discarded. 
            See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.IsRegistered">
            <summary>
            Gets a value indicating whether this instance has been registered with a <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.ClientTransaction"/>.
            </summary>
            <value>
            	<see langword="true"/> if this instance has been registered; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.EventListener">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataContainerEventListener"/> registered for this <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>, returning <see langword="null"/> if this 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> doesn't yet have one.
            </summary>
            <value>The <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataContainerEventListener"/> registered for this <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>, or <see langword="null"/> if no
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataContainerEventListener"/> has been registered.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> associated with the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">This instance has not been associated with a <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject"/> yet.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.HasDomainObject">
            <summary>
            Gets a value indicating whether this instance has been associated with a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
            </summary>
            <value>
            	<see langword="true"/> if this instance has a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.ID">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>.
            </summary>
            <remarks>
            This property can also be used when the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> has been discarded.
            </remarks>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.ClassDefinition">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> has been discarded. 
            See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObjectType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> has been discarded. 
            See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.PropertyValues">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> of all <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/>s that are part of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> has been discarded. 
            See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.State">
            <summary>
            Gets the state of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.Timestamp">
            <summary>
            Gets the timestamp of the last committed change of the data in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> has been discarded. 
            See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.IsDiscarded">
            <summary>
            Gets a value indicating the discarded status of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>.
            </summary>
            <remarks>
            For more information why and when a <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> is discarded see <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/>.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.CollectionEndPoint">
            <summary>
            Represents a collection-valued relation end-point in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointManager"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.DataManager">
            <summary>
            Manages the data (<see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> instances, <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPoint"/> instances, and invalid objects) for a 
            <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataManager.ClientTransaction"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Validation.IPersistableDataValidator">
            <summary>
            Provides an interface for validation of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.PersistableData"/> instances.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.NullCollectionEndPoint">
            <summary>
            Represents an <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.ICollectionEndPoint"/> (with a specific <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationEndPointDefinition"/>) for a <see langword="null"/> object.
            This is used by the different end point modification commands - when a bidirectional relation modification extends to a <see langword="null"/> 
            object, this end point (or <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.NullObjectEndPoint"/>) is used to represent the object's part in the relation, and a 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.NullEndPointModificationCommand"/> is used to represent the modification. The end point is created on the fly by 
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointManager.GetRelationEndPointWithLazyLoad(Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID)"/> and is usually discarded after it's used.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">
            <summary>
            The exception that is thrown when properties or methods of an object are accessed in a transaction where that object is invalid.
            </summary>
            <remarks>
            A <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is invalid in the following situations:
            <list type="buttons">
              <description>
                A new <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> has been created and the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> has been rolled back.
              </description>
              <description>
                A new <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> has been created and deleted.
              </description>
              <description>
                An existing <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> has been deleted and the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> has been committed.
              </description>
              <description>
                A new <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> has been created in a sub-transaction of the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> and the sub-transaction
                has not yet been committed. When the sub-transaction is committed, the object becomes valid in the parent, but not in the parent's parent and
                above.
              </description>
            </list>
            All objects that were associated with the invalid <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> are discarded. These objects are:
            <list type="buttons">
              <description>
                The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> associated with the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
              </description>
              <description>
                The <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> holding the properties of of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
              </description>
              <description>
                Each <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
              </description>
            </list>
            </remarks>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException.ID">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of the object that caused the exception.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID">
            <summary>
            Identifies a relation end point on a given object (<see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID.ObjectID"/>) of a given kind (<see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointID.Definition"/>).
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointManager">
            <summary>
            Manages the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.IRelationEndPoint"/> instances loaded into a <see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPoints.RelationEndPointManager.ClientTransaction"/>, encapsulating the details of registration
            and loading.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Adding"/>, <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Added"/>, 
            <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removed"/> and <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removing"/> events of a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs">
            <summary>
            Provides data for the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Adding"/>, <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Added"/>, 
            <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removing"/> and <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removed"/> event of a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs.#ctor(Remotion.Data.DomainObjects.DomainObject)">
            <summary>
            Initializes a new instance of the <b>DomainObjectCollectionChangingEventArgs</b> class.
            </summary>
            <param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> that is being added or removed to the collection. Must not be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="domainObject"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs.DomainObject">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> that is being added or removed.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.InvalidTypeException">
            <summary>
            The exception that is thrown when a PropertyValue is set to a value of wrong type.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.InvalidTypeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo object with the parameter name and additional exception information.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:Remotion.Data.DomainObjects.InvalidTypeException.PropertyName">
            <summary>
            The name of the property that caused the exception.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.InvalidTypeException.ExpectedType">
            <summary>
            The type that was expected for the property value.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.InvalidTypeException.ActualType">
            <summary>
            The type that was provided for the property value.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Mapping.MappingConfiguration.ResolveTypes">
            <summary>
            Gets a flag whether type names in the configuration file should be resolved to their corresponding .NET <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.AnonymousRelationEndPointDefinition">
            <summary>
            Represents the non-existing side of a unidirectional relationship.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.RelationEndPointDefinition">
            <summary>
            Represents the non-anonymous, foreign-key side of a bidirectional or unidirectional relationship.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Mapping.VirtualRelationEndPointDefinition">
            <summary>
            Represents the non-foreign-key side of a unidirectional relationship.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ObjectID">
            <summary>
            Uniquely identifies a domain object.
            </summary>
            <remarks>
            <b>ObjectID</b> supports values of type <see cref="T:System.Guid"/>, <see cref="T:System.Int32"/> and <see cref="T:System.String"/>.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ObjectID.op_Equality(Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Tests whether two specified <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> objects are equivalent.
            </summary>
            <param name="id1">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> object that is to the left of the equality operator.</param>
            <param name="id2">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> object that is to the right of the equality operator.</param>
            <returns></returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ObjectID.op_Inequality(Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Tests whether two specified <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> objects are different.
            </summary>
            <param name="id1">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> object that is to the left of the inequality operator.</param>
            <param name="id2">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> object that is to the right of the inequality operator.</param>
            <returns></returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ObjectID.Equals(Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Determines whether the specified <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> instances are considered equal.
            </summary>
            <param name="id1">The first <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> to compare.</param>
            <param name="id2">The second <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> to compare.</param>
            <returns><see langword="true"/> if the both <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>s are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ObjectID.Parse(System.String)">
            <summary>
            Converts the string representation of the ID to an <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> instance. If the operation fails, an exception is thrown.
            </summary>
            <param name="objectIDString">A string containing the object ID to convert.</param>
            <returns>
              An <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> instance equivalent to the object ID contained in <paramref name="objectIDString"/>. Must not be <see langword="null"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="objectIDString"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Utilities.ArgumentEmptyException"><paramref name="objectIDString"/> is an empty string.</exception>
            <exception cref="T:System.FormatException">
              <paramref name="objectIDString"/> does not contain the string representation of an object ID.
            </exception>
            <remarks>
            If the probability that parsing fails is high, consider using <see cref="M:Remotion.Data.DomainObjects.ObjectID.TryParse(System.String,Remotion.Data.DomainObjects.ObjectID@)"/> instead, as it is more performant in the error case.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ObjectID.TryParse(System.String,Remotion.Data.DomainObjects.ObjectID@)">
            <summary>
            Converts the string representation of the ID to an <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> instance. A return value indicates whether the operation succeeded.
            </summary>
            <param name="objectIDString">A string containing the object ID to convert.</param>
            <param name="result">If the conversion completes successfully, this parameter is set to an <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> instance equivalent to the 
            object ID contained in <paramref name="objectIDString"/>. Otherwise, it is set to <see langword="null"/>.</param>
            <returns>
            <see langword="true"/> if the conversion completed successfully, <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="objectIDString"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Utilities.ArgumentEmptyException"><paramref name="objectIDString"/> is an empty string.</exception>
            <remarks>
            If you expect <paramref name="objectIDString"/> to always hold a valid <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> string, use <see cref="M:Remotion.Data.DomainObjects.ObjectID.Parse(System.String)"/> instead. Use
            this method only if an invalid string constitutes a supported use case.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ObjectID.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <b>ObjectID</b> class with the specified class ID and ID value.
            </summary>
            <param name="classID">The ID of the class of the object. Must not be <see langword="null"/>.</param>
            <param name="value">The ID value used to identify the object in the storage provider. Must not be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="classID"/> is <see langword="null"/>.<br/> -or- <br/>
              <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:Remotion.Utilities.ArgumentEmptyException">
              <paramref name="classID"/> is an empty <see cref="T:System.String"/>.<br/> -or- <br/>
              <paramref name="value"/> is an empty <see cref="T:System.String"/>.<br/> -or- <br/>
              <paramref name="value"/> is an empty <see cref="T:System.Guid"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="value"/> has an unsupported type or is a string and contains invalid characters. Supported types are <see cref="T:System.Guid"/>, <see cref="T:System.Int32"/> and <see cref="T:System.String"/>.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.IdentityTypeNotSupportedException">
              The type of <paramref name="value"/> is not supported by the underlying <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"/>.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Mapping.MappingException"/>The specified <paramref name="classID"/> could not be found in the mapping configuration.
        </member>
        <member name="M:Remotion.Data.DomainObjects.ObjectID.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <b>ObjectID</b> class with the specified class type and ID value.
            </summary>
            <param name="classType">The <see cref="T:System.Type"/> of the class of the object. Must not be <see langword="null"/>.</param>
            <param name="value">The ID value used to identify the object in the storage provider. Must not be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="classType"/> is <see langword="null"/>.<br/> -or- <br/>
              <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:Remotion.Utilities.ArgumentEmptyException">
              <paramref name="value"/> is an empty <see cref="T:System.String"/>.<br/> -or- <br/>
              <paramref name="value"/> is an empty <see cref="T:System.Guid"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="value"/> has an unsupported type or is a string and contains invalid characters. Supported types are <see cref="T:System.Guid"/>, <see cref="T:System.Int32"/> and <see cref="T:System.String"/>.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.IdentityTypeNotSupportedException">
              The type of <paramref name="value"/> is not supported by the underlying <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"/>.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Mapping.MappingException"/>The specified <paramref name="classType"/> could not be found in the mapping configuration.
        </member>
        <member name="M:Remotion.Data.DomainObjects.ObjectID.#ctor(Remotion.Data.DomainObjects.Mapping.ClassDefinition,System.Object)">
            <summary>
            Initializes a new instance of the <b>ObjectID</b> class with the specified <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/> and ID value.
            </summary>
            <param name="classDefinition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/> of the object. Must not be <see langword="null"/>.</param>
            <param name="value">The ID value used to identify the object in the storage provider. Must not be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="classDefinition"/> is <see langword="null"/>.<br/> -or- <br/>
              <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:Remotion.Utilities.ArgumentEmptyException">
              <paramref name="value"/> is an empty <see cref="T:System.String"/>.<br/> -or- <br/>
              <paramref name="value"/> is an empty <see cref="T:System.Guid"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="value"/> has an unsupported type or is a string and contains invalid characters. Supported types are <see cref="T:System.Guid"/>, <see cref="T:System.Int32"/> and <see cref="T:System.String"/>.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.IdentityTypeNotSupportedException">
              The type of <paramref name="value"/> is not supported by the underlying <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"/>.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Mapping.MappingException"/>The specified <paramref name="classDefinition"/> could not be found in the mapping configuration.
        </member>
        <member name="M:Remotion.Data.DomainObjects.ObjectID.ToString">
            <summary>
            Returns the string representation of the current <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ObjectID.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ObjectID.CompareTo(System.Object)">
            <summary>
            Compares this <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> with another <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>and returns an integer that indicates whether the current instance 
            precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> to compare with this instance.</param>
            <returns>
            Less than zero if this instance is less than <paramref name="obj"/>; zero if this instance is equal to <paramref name="obj"/>; greater than 
            zero if this instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not an <see cref="T:Remotion.Data.DomainObjects.ObjectID"/>.
            </exception>
            <remarks>
            If two <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> instances are compared that have different <see cref="P:Remotion.Data.DomainObjects.ObjectID.Value"/> types, their <see cref="P:Remotion.Data.DomainObjects.ObjectID.ClassID"/>s are compared
            instead.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ObjectID.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> is equal to the current <b>ObjectID</b>.
            </summary>
            <param name="obj">The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> to compare with the current <b>ObjectID</b>. </param>
            <returns><see langword="true"/> if the specified <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> is equal to the current <b>ObjectID</b>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ObjectID.StorageProviderDefinition">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition"/> of the <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"/> which stores the object.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ObjectID.Value">
            <summary>
            Gets the ID value used to identify the object in the storage provider.
            </summary>
            <remarks>
            <b>Value</b> can be of type <see cref="T:System.Guid"/>, <see cref="T:System.Int32"/> or <see cref="T:System.String"/>.
            </remarks>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ObjectID.ClassID">
            <summary>
            The class ID of the object class.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ObjectID.ClassDefinition">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/> associated with this <b>ObjectID</b>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition">
            <summary>
            Defines the configuration for a specific <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"/>. Subclasses of <see cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition"/> can be 
            instantiated from a config file entry.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.ObjectsNotFoundException">
            <summary>
            Thrown when one or multiple objects can't be found in the underlying data source.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.DbCommandBuilders.QueryDbCommandBuilder">
            <summary>
            Builds an <see cref="T:System.Data.IDbCommand"/> for a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Persistence.StorageProvider">
            <summary>
            Provides an abstract base implementation for classes encapsulating persistence-related functionality. Subclasses of <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"/> 
            are used by <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.RootPersistenceStrategy"/> to load and store <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> 
            instances and execute queries.
            </summary>
            <remarks>
            Implementers must ensure that calls to the storage provider do not modify the internal state of the calling 
            <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.RootPersistenceStrategy"/>. They cannot use <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current"/> to 
            determine the calling <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.RootPersistenceStrategy"/> as that property is not guaranteed to be 
            set by the caller.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue">
            <summary>
            Represents a property of a domain object that is persisted by the framework.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValue.#ctor(Remotion.Data.DomainObjects.Mapping.PropertyDefinition)">
            <summary>
            Initializes a new <b>PropertyValue</b> with a given <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition"/>.
            </summary>
            <param name="definition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition"/> to use for initializing the <b>PropertyValue</b>. Must not be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="definition"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValue.#ctor(Remotion.Data.DomainObjects.Mapping.PropertyDefinition,System.Object)">
            <summary>
            Initializes a new <b>PropertyValue</b> with a given <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition"/> and an initial <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value"/>.
            </summary>
            <param name="definition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition"/> to use for initializing the <b>PropertyValue</b>. Must not be <see langword="null"/>.</param>
            <param name="value">The initial <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value"/> for the <b>PropertyValue</b>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="definition"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.InvalidTypeException"><paramref name="value"/> does not match the required type specified in <paramref name="definition"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.ValueTooLongException"><paramref name="value"/> is longer than the maximum length specified in <paramref name="definition"/>.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Definition">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition"/> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/>.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> has been discarded. 
            See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Name">
            <summary>
            Gets the name of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/>.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> has been discarded. 
            See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value">
            <summary>
            Gets or sets the value of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/>.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> has been discarded. 
            See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.InvalidTypeException"><paramref name="value"/> does not match the required type specified in <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Definition"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.ValueTooLongException"><paramref name="value"/> is longer than the maximum length specified in <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Definition"/>.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.OriginalValue">
            <summary>
            Gets the original <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value"/> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> at the point of instantiation, loading, commit or rollback.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> has been discarded. 
            See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.HasChanged">
            <summary>
            Indicates if the <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value"/> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> has changed since instantiation, loading, commit or rollback.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> has been discarded. 
            See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.HasBeenTouched">
            <summary>
            Indicates if the <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value"/> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> has been assigned since instantiation, loading, commit or rollback,
            regardless of whether the current value differs from the <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.OriginalValue"/>.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> has been discarded. 
            See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.IsDiscarded">
            <summary>
            Gets a value indicating the discarded status of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/>.
            </summary>
            <remarks>
            For more information why and when a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> is discarded see <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/>.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection">
            <summary>
            A typed collection for <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> objects.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.#ctor">
            <summary>
            Initializes a new <b>PropertyValueCollection</b> object.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.#ctor(Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection,System.Boolean)">
            <summary>
            Initializes a new <b>PropertyValueCollection</b> as a shallow copy of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/>.
            </summary>
            <remarks>
            The new <b>PropertyValueCollection</b> has the same items as the given <paramref name="collection"/>.
            </remarks>
            <param name="collection">The <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> to copy. Must not be <see langword="null"/>.</param>
            <param name="makeCollectionReadOnly">Indicates whether the new collection should be read-only.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.Contains(Remotion.Data.DomainObjects.DataManagement.PropertyValue)">
            <summary>
            Determines whether the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> contains a specific <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/>.
            </summary>
            <param name="propertyValue">The object to locate in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/>. Must not be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> contains the <paramref name="propertyValue"/>; otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyValue"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> has been 
            discarded. See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
            <remarks>This method only returns true, if the same reference is found in the collection.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> contains a specific property name.
            </summary>
            <param name="propertyName">The name of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> to locate in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/>. Must not be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> contains the key; otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> has been 
            discarded. See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.Add(Remotion.Data.DomainObjects.DataManagement.PropertyValue)">
            <summary>
            Adds a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> to the collection.
            </summary>
            <param name="value">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> to add. Must not be <see langword="null"/>.</param>
            <returns>The position into which the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> was inserted.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is already part of the collection.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> has been 
            discarded. See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the items of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> to an array, starting at a particular array index.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the items copied from <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/>. The array must have zero-based indexing. Must not be <see langword="null"/>.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is smaller than 0.</exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="array"/> is not a one-dimensional array.<br/> -or- <br/>
              <paramref name="index"/> is greater than the current length of the array.<br/> -or- <br/>
              The number of items is greater than the available space from <paramref name="index"/> to the end of <paramref name="array"/>.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> has been 
            discarded. See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the entire <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/>.</returns>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> has been 
            discarded. See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.OnPropertyChanging(Remotion.Data.DomainObjects.PropertyChangeEventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.PropertyChanging"/> event.
            </summary>
            <param name="args">A <see cref="T:Remotion.Data.DomainObjects.PropertyChangeEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.OnPropertyChanged(Remotion.Data.DomainObjects.PropertyChangeEventArgs)">
            <summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.PropertyChanged"/> event.
            </summary>
            <param name="args">A <see cref="T:Remotion.Data.DomainObjects.PropertyChangeEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="E:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.PropertyChanging">
            <summary>
            Occurs before the <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value"/> of a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> is changed.
            </summary>
        </member>
        <member name="E:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.PropertyChanged">
            <summary>
            Occurs after the <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value"/> of a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> is changed.
            </summary>
            <remarks>
            When this event is raised, the associated <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/>'s <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.State"/> has not yet been updated.
            </remarks>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> with a given <paramref name="index"/> in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/>.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> has been 
            discarded. See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> with a given <paramref name="propertyName"/> in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/>.
            </summary>
            <param name="propertyName">The name of the property. Must not be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Utilities.ArgumentEmptyException"><paramref name="propertyName"/> is an empty string.</exception>
            <exception cref="T:System.ArgumentException">The given <paramref name="propertyName"/> does not exist in the collection.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> has been 
            discarded. See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.Count">
            <summary>
            Gets the number of items contained in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/>.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> has been 
            discarded. See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Remotion.Data.DomainObjects.CommonCollection"/> is read-only.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> has been 
            discarded. See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> is synchronized (thread-safe).
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> has been 
            discarded. See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/>.
            </summary>
            <exception cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException">The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> is invalid and its <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> has been 
            discarded. See <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/> for further information.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.IsDiscarded">
            <summary>
            Gets a value indicating the discarded status of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/>.
            </summary>
            <remarks>
            For more information why and when a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"/> is discarded see <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"/>.
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfiguration">
            <summary>
            Represents the current query configuration.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfigurationException">
            <summary>
            The exception that is thrown when a problem occurs while constructing a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfiguration"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition">
            <summary>
            Represents the definition of a query.
            </summary>
            <remarks>
            During the serialization process the object determines if it is part of <see cref="T:Remotion.Data.DomainObjects.Queries.Query"/> 
            and serializes this information. If it was then the deserialized object will be the reference from 
            <see cref="T:Remotion.Data.DomainObjects.Queries.Query"/> with the same <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.ID"/> again. Otherwise, a new object will be instantiated.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.#ctor(System.String,Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition,System.String,Remotion.Data.DomainObjects.Queries.Configuration.QueryType)">
            <summary>
            Initializes a new instance of the <b>QueryDefinition</b> class.
            </summary>
            <param name="queryID">The <paramref name="queryID"/> to be associated with this <b>QueryDefinition</b>. Must not be <see langword="null"/>.</param>
            <param name="storageProviderDefinition">The <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.StorageProviderDefinition"/> used for executing instances of this <b>QueryDefinition</b>. Must not be <see langword="null"/>.</param>
            <param name="statement">The <paramref name="statement"/> of the <b>QueryDefinition</b>. The <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"/> specified through <paramref name="storageProviderDefinition"/> must understand the syntax of the <paramref name="statement"/>. Must not be <see langword="null"/>.</param>
            <param name="queryType">One of the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.QueryType"/> enumeration constants.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="queryID"/> is <see langword="null"/>.<br/> -or- <br/>
              <paramref name="storageProviderDefinition"/> is <see langword="null"/>.<br/> -or- <br/>
              <paramref name="statement"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:Remotion.Utilities.ArgumentEmptyException">
              <paramref name="queryID"/> is an empty string.<br/> -or- <br/>
              <paramref name="statement"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="queryType"/> is not a valid enum value.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.#ctor(System.String,Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition,System.String,Remotion.Data.DomainObjects.Queries.Configuration.QueryType,System.Type)">
            <summary>
            Initializes a new instance of the <b>QueryDefinition</b> class.
            </summary>
            <param name="queryID">The <paramref name="queryID"/> to be associated with this <b>QueryDefinition</b>. Must not be <see langword="null"/>.</param>
            <param name="storageProviderDefinition">The <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.StorageProviderDefinition"/> used for executing instances of this <b>QueryDefinition</b>. Must not be <see langword="null"/>.</param>
            <param name="statement">The <paramref name="statement"/> of the <b>QueryDefinition</b>. The <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"/> specified through <paramref name="storageProviderDefinition"/> must understand the syntax of the <paramref name="statement"/>. Must not be <see langword="null"/>.</param>
            <param name="queryType">One of the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.QueryType"/> enumeration constants.</param>
            <param name="collectionType">If <paramref name="queryType"/> specifies a collection to be returned, <paramref name="collectionType"/> specifies the type of the collection. If <paramref name="queryType"/> is <see langword="null"/>, <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/> is used.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="queryID"/> is <see langword="null"/>.<br/> -or- <br/>
              <paramref name="storageProviderDefinition"/> is <see langword="null"/>.<br/> -or- <br/>
              <paramref name="statement"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:Remotion.Utilities.ArgumentEmptyException">
              <paramref name="queryID"/> is an empty string.<br/> -or- <br/>
              <paramref name="statement"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="queryType"/> is not a valid enum value.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This constructor is used for deserializing the object and is not intended to be used directly from code.
            </summary>
            <param name="info">The data needed to serialize or deserialize an object. </param>
            <param name="context">The source and destination of a given serialized stream.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the 
            data needed to serialize the current <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> instance. See remarks 
            on <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> for further details.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The contextual information about the source or destination of the serialization.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the 
            data needed to serialize the current <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> instance. See remarks 
            on <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> for further details.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The contextual information about the source or destination of the serialization.</param>
            <note type="inheritinfo">Overwrite this method to support serialization of derived classes.</note>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.System#Runtime#Serialization#IObjectReference#GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Returns a reference to the real object that should be deserialized. See remarks 
            on <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> for further details.
            </summary>
            <param name="context">The source and destination of a given serialized stream.</param>
            <returns>Returns the actual <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/>.</returns>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.ID">
            <summary>
            Gets the unique ID for this <b>QueryDefinition</b>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.StorageProviderDefinition">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition"/> used for executing instances of this <b>QueryDefinition</b>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.Statement">
            <summary>
            Gets the statement-text of the <b>QueryDefinition</b>. The <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"/> specified through <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.StorageProviderDefinition"/> must understand the syntax of the <b>Statement</b>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.QueryType">
            <summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.QueryType"/> of this <b>QueryDefinition</b>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.CollectionType">
            <summary>
            If <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.QueryType"/> specifies a collection to be returned, <b>CollectionType</b> specifies the type of the collection. The default is <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection"/>. 
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection">
            <summary>
            Represents a collection of <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/>s.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.#ctor">
            <summary>
            Initializes a new instance of the <b>QueryDefinitionCollection</b> class.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.#ctor(Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection,System.Boolean)">
            <summary>
            Initializes a new <b>QueryDefinitionCollection</b> as a shallow copy of a given <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection"/>.
            </summary>
            <remarks>The new <b>QueryDefinitionCollection</b> has the same items as the given <paramref name="collection"/>.</remarks>
            <param name="collection">The <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection"/> to copy. Must not be <see langword="null"/>.</param>
            <param name="makeCollectionReadOnly">Indicates whether the new collection should be read-only.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.GetMandatory(System.String)">
            <summary>
            Returns the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> identified through <paramref name="queryID"/>. If no <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> can be found an exception is thrown.
            </summary>
            <param name="queryID">The <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.ID"/> of the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> to be found.</param>
            <returns>The <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> identified through <paramref name="queryID"/>.</returns>
            <exception cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfigurationException">The <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> identified through <paramref name="queryID"/> could not be found.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.Contains(Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition)">
            <summary>
            Determines whether an item is in the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection"/>.
            </summary>
            <param name="queryDefinition">The <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> to locate in the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection"/>. Must not be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="queryDefinition"/> is found in the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection"/>; otherwise, false;</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="queryDefinition"/> is <see langword="null"/></exception>
            <remarks>This method only returns true, if the same reference is found in the collection.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.Contains(System.String)">
            <summary>
            Determines whether an item is in the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection"/>.
            </summary>
            <param name="queryID">The <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.ID"/> of the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> to locate in the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection"/>. Must not be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> with the <paramref name="queryID"/> is found in the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection"/>; otherwise, false;</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="queryID"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.Add(Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition)">
            <summary>
            Adds a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> to the collection.
            </summary>
            <param name="queryDefinition">The <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> to add. Must not be <see langword="null"/>.</param>
            <returns>The zero-based index where the <paramref name="queryDefinition"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="queryDefinition"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> with a given <paramref name="index"/> in the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is less than zero.<br/> -or- <br/>
              <paramref name="index"/> is equal to or greater than the number of items in the collection.
            </exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> with a given <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.ID"/> from the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection"/>.
            </summary>
            <remarks>The indexer returns <see langword="null"/> if the given <paramref name="queryID"/> was not found.</remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryType">
            <summary>
            Indicates the type of a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/>.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.Queries.Configuration.QueryType.Collection">
            <summary>
            Instances of a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> return a collection of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.Queries.Configuration.QueryType.Scalar">
            <summary>
            Instances of a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> return only a single value.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.IQuery">
            <summary>
            Represents an executable query.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.IQuery.ID">
            <summary>
            Gets a unique identifier for the query.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.IQuery.Statement">
            <summary>
            Gets the statement of the query.
            </summary>
            <remarks>The statement must be understood by the <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"/> responsible for executing the query.</remarks>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.IQuery.StorageProviderDefinition">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition"/> of the associated <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.IQuery.CollectionType">
            <summary>
            Gets the type of the collection if the query returns a collection of <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s.
            </summary> 
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.IQuery.QueryType">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryType"/> of the query.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.IQuery.Parameters">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/>s that are used to execute the query.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.IQuery.EagerFetchQueries">
            <summary>
            Gets the eager fetch queries associated with this <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> instance.
            </summary>
            <value>The eager fetch queries associated with this <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> instance by <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationEndPointDefinition"/>.</value>
            <remarks>
            <para>
            An eager fetch query is a query that can be used to obtain all related objects for all query result objects for a certain collection relation 
            end point. For example, if this <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> returns a set of <c>Order</c> objects order1, order2, and order3, the fetch query for 
            <c>Order.OrderItems</c> would return all order items for order1, order2, and order3.
            </para>
            <para>
            For efficiency, the fetch queries should ensure they have the required <c>WHERE</c> conditions so that they only return objects related to the 
            original query result. Usually, this means duplicating the <c>WHERE</c> conditions of the original <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> in the fetch queries.
            </para>
            <para>
            It is the responsibility of the supplier of a fetch query to ensure that it will actually return all related objects for the respective
            relation property of the objects returned by this <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/>. If the fetch query returns an incomplete (or empty) result set,
            the relation properties will be filled with incomplete (or empty) collections.
            </para>
            <para>
            On execution of this <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/>, the <see cref="T:Remotion.Data.DomainObjects.Queries.IQueryManager"/> will automatically execute the fetch queries, collate their results, 
            and register them with the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> executing the query. Later access to the respective relation properties will not 
            result in further database lookups for the objects returned by this <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/>.
            </para>
            <para>
            If a fetch query returns related objects for a relation property of an object which has already been loaded (e.g. by accessing the property
            before the fetch), those returned objects are ignored.
            </para>
            </remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.Query">
            <summary>
            Represents a default implementation of <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.Query.#ctor(Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition,Remotion.Data.DomainObjects.Queries.QueryParameterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Queries.Query"/> class using a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> and a given collection of <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/>s.
            </summary>
            <param name="definition">The <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> to use for the query.</param>
            <param name="parameters">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/>s to use for executing the query.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="definition"/> is <see langword="null"/>.<br/> -or- <br/>
              <paramref name="parameters"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.Query.Definition">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/> that is associated with the query.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.Query.ID">
            <summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.ID"/> of the associated <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.Query.StorageProviderDefinition">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition"/> of the associated <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.Query.CollectionType">
            <summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.CollectionType"/> of the associated <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.Query.QueryType">
            <summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.QueryType"/> of the associated <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.Query.Statement">
            <summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.Statement"/> of the associated <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"/>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.Query.Parameters">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/>s that are used to execute the <see cref="T:Remotion.Data.DomainObjects.Queries.Query"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.QueryManager">
            <summary>
            <see cref="T:Remotion.Data.DomainObjects.Queries.QueryManager"/> provides methods to execute queries within a <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.RootPersistenceStrategy"/>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryManager.#ctor(Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IPersistenceStrategy,Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IObjectLoader,Remotion.Data.DomainObjects.Infrastructure.IClientTransactionEventSink)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryManager"/> class.
            </summary>
            <param name="persistenceStrategy">The <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IPersistenceStrategy"/> used to load query results not involving <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances.</param>
            <param name="objectLoader">An <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.IObjectLoader"/> implementation that can be used to load objects. This parameter determines
              the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> housing the objects loaded by queries.</param>
            <param name="transactionEventSink">The transaction event sink to use for raising query-related notifications.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryManager.GetScalar(Remotion.Data.DomainObjects.Queries.IQuery)">
            <summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> and returns the scalar value.
            </summary>
            <param name="query">The query to execute. Must not be <see langword="null"/>.</param>
            <returns>The scalar value that is returned by the query.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="query"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="query"/> does not have a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryType"/> of <see cref="F:Remotion.Data.DomainObjects.Queries.Configuration.QueryType.Scalar"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderConfigurationException">
              The <see cref="P:Remotion.Data.DomainObjects.Queries.IQuery.StorageProviderDefinition"/> of <paramref name="query"/> could not be found.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.PersistenceException">
              The <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"/> for the given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> could not be instantiated.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.StorageProviderException">
              An error occurred while executing the query.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryManager.GetCollection(Remotion.Data.DomainObjects.Queries.IQuery)">
            <summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> and returns a collection of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s returned by the query.
            </summary>
            <param name="query">The query to execute. Must not be <see langword="null"/>.</param>
            <returns>A collection containing the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s returned by the query.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="query"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="query"/> does not have a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryType"/> of <see cref="F:Remotion.Data.DomainObjects.Queries.Configuration.QueryType.Collection"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderConfigurationException">
              The <see cref="P:Remotion.Data.DomainObjects.Queries.IQuery.StorageProviderDefinition"/> of <paramref name="query"/> could not be found.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.PersistenceException">
              The <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"/> for the given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> could not be instantiated.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.StorageProviderException">
              An error occurred while executing the query.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryManager.GetCollection``1(Remotion.Data.DomainObjects.Queries.IQuery)">
            <summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> and returns a collection of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s returned by the query.
            </summary>
            <typeparam name="T">The type of <see cref="N:Remotion.Data.DomainObjects"/> to be returned from the query.</typeparam>
            <param name="query">The query to execute. Must not be <see langword="null"/>.</param>
            <returns>
            A collection containing the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>s returned by the query.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="query"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Queries.UnexpectedQueryResultException">The objects returned by the <paramref name="query"/> do not match the expected type
            <typeparamref name="T"/> or the configured collection type is not assignable to <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/> with the given <typeparamref name="T"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="query"/> does not have a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryType"/> of <see cref="F:Remotion.Data.DomainObjects.Queries.Configuration.QueryType.Collection"/>.</exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderConfigurationException">
            The <see cref="P:Remotion.Data.DomainObjects.Queries.IQuery.StorageProviderDefinition"/> of <paramref name="query"/> could not be found.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.PersistenceException">
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"/> for the given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery"/> could not be instantiated.
            </exception>
            <exception cref="T:Remotion.Data.DomainObjects.Persistence.StorageProviderException">
            An error occurred while executing the query.
            </exception>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.QueryParameter">
            <summary>
            Represents a parameter that is used in a query.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/> class with a <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.ParameterType"/> of <see cref="F:Remotion.Data.DomainObjects.Queries.QueryParameterType.Value"/>.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryParameter.#ctor(System.String,System.Object,Remotion.Data.DomainObjects.Queries.QueryParameterType)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/> class.
            </summary>
            <param name="name">The name of the parameter. Must not be <see langword="null"/>.</param>
            <param name="value">The value of the parameter.</param>
            <param name="parameterType">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterType"/> of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Utilities.ArgumentEmptyException"><paramref name="name"/> is an empty string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="parameterType"/> is not a valid enum value.</exception>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Name">
            <summary>
            Gets the name of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Value">
            <summary>
            Gets or sets the value of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.QueryParameter.ParameterType">
            <summary>
            Gets or sets the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterType"/> of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection">
            <summary>
            Represents a collection of <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/> objects.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.#ctor">
            <summary>
            Initializes a new <b>QueryParameterCollection</b>.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.#ctor(Remotion.Data.DomainObjects.Queries.QueryParameterCollection,System.Boolean)">
            <summary>
            Initializes a new <b>QueryParameterCollection</b> as a shallow copy of a given <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection"/>.
            </summary>
            <remarks>
            The new <b>QueryParameterCollection</b> has the same items as the given <paramref name="collection"/>.
            </remarks>
            <param name="collection">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection"/> to copy. Must not be <see langword="null"/>.</param>
            <param name="makeCollectionReadOnly">Indicates whether the new collection should be read-only.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Add(System.String,System.Object)">
            <summary>
            Adds a new <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/> to the collection with <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.ParameterType"/> of Value.
            </summary>
            <param name="parameterName">The <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Name"/> of the new parameter. Must not be <see langword="null"/>.</param>
            <param name="parameterValue">The <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Value"/> of the new parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameterName"/> is <see langword="null"/>.</exception>
            <exception cref="T:Remotion.Utilities.ArgumentEmptyException"><paramref name="parameterName"/> is an empty string.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Add(System.String,System.Object,Remotion.Data.DomainObjects.Queries.QueryParameterType)">
            <summary>
            Adds a new <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/> to the collection.
            </summary>
            <param name="parameterName">The <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Name"/> of the new parameter. Must not be <see langword="null"/>.</param>
            <param name="parameterValue">The <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Value"/> of the new parameter.</param>
            <param name="parameterType">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterType"/> of the new parameter.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="parameterName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:Remotion.Utilities.ArgumentEmptyException"><paramref name="parameterName"/> is an empty string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="parameterType"/> is not a valid enum value.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Contains(Remotion.Data.DomainObjects.Queries.QueryParameter)">
            <summary>
            Determines whether an item is in the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection"/>.
            </summary>
            <param name="queryParameter">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/> to locate in the collection. Must not be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="queryParameter"/> is found in the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection"/>; otherwise, false;</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="queryParameter"/> is <see langword="null"/></exception>
            <remarks>This method only returns true, if the same reference is found in the collection.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Contains(System.String)">
            <summary>
            Determines whether an item is in the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection"/>.
            </summary>
            <param name="name">The <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Name"/> of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/> to locate in the collection. Must not be <see langword="null"/>.</param>
            <returns><see langword="true"/> if a <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/> with a <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Name"/> of <paramref name="name"/> is found in the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection"/>; otherwise, false;</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Add(Remotion.Data.DomainObjects.Queries.QueryParameter)">
            <summary>
            Adds a <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/> to the collection.
            </summary>
            <param name="parameter">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/> to add.</param>
            <returns>The zero-based index where <paramref name="parameter"/> has been added.</returns>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/> with a given <paramref name="index"/> in the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection"/>.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/> with a given <paramref name="name"/> in the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection"/>.
            </summary>
            <remarks>The indexer returns <see langword="null"/> if the given <paramref name="name"/> was not found.</remarks>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Queries.QueryParameterType">
            <summary>
            Indicates the type of a <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/>.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.Queries.QueryParameterType.Value">
            <summary>
            Instances of <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/> will be treated as parameters in the query.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.Queries.QueryParameterType.Text">
            <summary>
            Instances of <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter"/> will replaced inline into the query.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ReflectionUtility">
            <summary>
            Utility class for methods using reflection.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetConfigFileDirectory">
            <summary>
            Returns the directory of the current executing assembly.
            </summary>
            <returns>The path of the current executing assembly</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetAssemblyDirectory(System.Reflection.Assembly)">
            <summary>
            Gets the directory containing the given assembly.
            </summary>
            <param name="assembly">The assembly whose directory to retrieve.</param>
            <returns>The directory holding the given assembly as a local path. If the assembly has been shadow-copied, this returns the directory before the
            shadow-copying.</returns>
            <exception cref="T:System.InvalidOperationException">The assembly's code base is not a local path.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetAssemblyDirectory(System.Runtime.InteropServices._Assembly)">
            <summary>
            Gets the directory containing the given assembly.
            </summary>
            <param name="assembly">The assembly whose directory to retrieve.</param>
            <returns>The directory holding the given assembly as a local path. If the assembly has been shadow-copied, this returns the directory before the
            shadow-copying.</returns>
            <exception cref="T:System.InvalidOperationException">The assembly's code base is not a local path.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ReflectionUtility.CreateObject(System.Type,System.Object[])">
            <summary>
            Creates an object of a given type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the object to instantiate. Must not be <see langword="null"/>.</param>
            <param name="constructorParameters">The parameters for the constructor of the object.</param>
            <returns>The object that has been created.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Type <paramref name="type"/> has no suitable constructor for the given <paramref name="constructorParameters"/>.</exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetPropertyName(System.Reflection.PropertyInfo)">
            <summary>
            Returns the reflection based property identifier for a given property member.
            </summary>
            <param name="propertyInfo">The property whose identifier should be returned. Must not be <see langword="null" />.</param>
            <returns>The property identifier for the given property.</returns>
            <remarks>
            Currently, the identifier is defined to be the full name of the property's declaring type, suffixed with a dot (".") and the
            property's name (e.g. MyNamespace.MyType.MyProperty). However, this might change in the future, so this API should be used whenever the
            identifier must be retrieved programmatically.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetPropertyName(System.Type,System.String)">
            <summary>Returns the property name scoped for a specific <paramref name="originalDeclaringType"/>.</summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ReflectionUtility.IsObjectList(System.Type)">
            <summary>
            Evaluates whether the <paramref name="type"/> is an <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/> or derived from <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check. Must not be <see langword="null"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="type"/> is an <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/> or derived from <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/>.
            </returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ReflectionUtility.IsDomainObject(System.Type)">
            <summary>
            Checks if a property type is a domain object.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check. Must not be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the given type is a domain object.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ReflectionUtility.IsRelationType(System.Type)">
            <summary>
            Checks if a property type is a relation property.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check. Must not be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the given type is a relation property.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ReflectionUtility.IsBinaryPropertyValueType(System.Type)">
            <remarks>Only temporary solution until type resulition is refactored.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ReflectionUtility.IsStringPropertyValueType(System.Type)">
            <remarks>Only temporary solution until type resulition is refactored.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ReflectionUtility.IsExtensibleEnumPropertyValueType(System.Type)">
            <remarks>Only temporary solution until type resulition is refactored.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ReflectionUtility.IsObjectIDPropertyValueType(System.Type)">
            <remarks>Only temporary solution until type resulition is refactored.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ReflectionUtility.IsTypePropertyValueType(System.Type)">
            <remarks>Only temporary solution until type resulition is refactored.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetObjectListTypeParameter(System.Type)">
            <summary>
            Returns the type parameter of the <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to return the type parameter. Must not be <see langword="null"/>.</param>
            <returns>
            A <see cref="T:System.Type"/> if the <paramref name="type"/> is a closed <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/> or <see langword="null"/> if the generic 
            <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/> is open.
            </returns>
            <exception cref="T:Remotion.Utilities.ArgumentTypeException">
            Thrown if the type is not an <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/> or derived from <see cref="T:Remotion.Data.DomainObjects.ObjectList`1"/>.
            </exception>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetRelatedObjectTypeFromRelationProperty(Remotion.Reflection.IPropertyInformation)">
            <summary>
            Gets the type of the related object (the type of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>) for a relation <paramref name="propertyInfo"/>.
            </summary>
            <param name="propertyInfo">The <see cref="T:Remotion.Reflection.IPropertyInformation"/> to analyze.</param>
            <returns>the domain object type of the given property.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetDeclaringDomainObjectTypeForProperty(Remotion.Reflection.IPropertyInformation,Remotion.Data.DomainObjects.Mapping.ClassDefinition)">
            <summary>
            Gets the declaring domain object type for the given property.
            </summary>
            <param name="propertyInfo">The <see cref="T:Remotion.Reflection.IPropertyInformation"/> to analyze.</param>
            <param name="classDefinition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/> of the given <see cref="T:Remotion.Reflection.IPropertyInformation"/></param>
            <returns>the declaring domain object type for the given property.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ReflectionUtility.IsMixedProperty(Remotion.Reflection.IPropertyInformation,Remotion.Data.DomainObjects.Mapping.ClassDefinition)">
            <summary>
            Checks if the given <see cref="T:System.Reflection.PropertyInfo"/> on the given <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/> is a mixed property.
            </summary>
            <param name="propertyInfo">The <see cref="T:Remotion.Reflection.IPropertyInformation"/> to analyze.</param>
            <param name="classDefinition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition"/> of the given <see cref="T:Remotion.Reflection.IPropertyInformation"/></param>
            <returns><see langword="true"/> if the given <see cref="T:System.Reflection.PropertyInfo"/> is a mixed property.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ReflectionUtility.IsInheritanceRoot(System.Type)">
            <summary>
            Checks if the given type is the inheritance root. A type is the inheritance root if it is either the domain object base or if the
            type has the <see cref="T:Remotion.Data.DomainObjects.StorageGroupAttribute"/> applied.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to be analyzed</param>
            <returns><see langword="true"/> if the given type is the inheritance root.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ReflectionUtility.IsDomainObjectBase(System.Type)">
            <summary>
            Checks if the given type is the domain object base.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check. Must not be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the given type is the domain object base.</returns>
        </member>
        <member name="T:Remotion.Data.DomainObjects.StateType">
            <summary>
            Indicates the state of a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.StateType.Unchanged">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> has not changed since it was loaded.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.StateType.Changed">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> has been changed since it was loaded.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.StateType.New">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> has been instanciated and has not been committed.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.StateType.Deleted">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> has been deleted.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.StateType.Invalid">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> reference is no longer or not yet valid for use in this transaction.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.StateType.NotLoadedYet">
            <summary>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>'s data has not been loaded yet into the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/>. It will be loaded when needed,
            e.g. when a property value or relation is accessed, or when 
            <see cref="M:Remotion.Data.DomainObjects.DomainObject.EnsureDataAvailable"/> is called for the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectPersistence.SubPersistenceStrategy">
            <summary>
            Implements the persistence of a subtransaction. Data is loaded via and persisted into the parent transaction.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Transport.BinaryImportStrategy">
            <summary>
            Represents an import strategy for <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances using binary serialization. This matches <see cref="T:Remotion.Data.DomainObjects.Transport.BinaryExportStrategy"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Transport.IImportStrategy">
            <summary>
            Implements a strategy to import a set of transported <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances from a <see cref="T:System.IO.Stream"/>. The imported objects
            should be wrapped as <see cref="T:Remotion.Data.DomainObjects.Transport.TransportItem"/> property holders, the <see cref="T:Remotion.Data.DomainObjects.Transport.DomainObjectImporter"/> class creates 
            <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances from those holders and synchronizes them with the database.
            </summary>
            <remarks>
            Supply an implementation of this interface to <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.IO.Stream,Remotion.Data.DomainObjects.Transport.IImportStrategy)"/>. The strategy
            should match the <see cref="T:Remotion.Data.DomainObjects.Transport.IExportStrategy"/> supplied to 
            <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Export(System.IO.Stream,Remotion.Data.DomainObjects.Transport.IExportStrategy)"/>.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.IImportStrategy.Import(System.IO.Stream)">
            <summary>
            Imports the specified data.
            </summary>
            <param name="inputStream">A <see cref="T:System.IO.Stream"/> delivering the data to be imported.</param>
            <returns>A stream of <see cref="T:Remotion.Data.DomainObjects.Transport.TransportItem"/> values representing <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances.</returns>
            <exception cref="T:Remotion.Data.DomainObjects.Transport.TransportationException">The data could not be imported using this strategy.</exception>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Transport.TransportationException">
            <summary>
            Indicates a problem when exporting or importing <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances using <see cref="T:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter"/>. Usually,
            the data or objects either don't match the <see cref="T:Remotion.Data.DomainObjects.Transport.IImportStrategy"/> or <see cref="T:Remotion.Data.DomainObjects.Transport.IExportStrategy"/> being used, or the data has become
            corrupted.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.TransportationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Transport.TransportationException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.TransportationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Transport.TransportationException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects">
            <summary>
            Represents the data transported via a <see cref="T:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter"/> object on the target system.
            </summary>
            <remarks>
            Instantiate this class via <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.IO.Stream)"/> with the data obtained from
            <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Export(System.IO.Stream)"/>.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.#ctor(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.Generic.List{Remotion.Data.DomainObjects.DomainObject})">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects"/> class. This constructor is typically only used internally,
            use <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.IO.Stream)"/> to instantiate this class.
            </summary>
            <param name="dataTransaction">The transaction containing the transported objects' data.</param>
            <param name="transportedObjects">The transported objects.</param>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.FinishTransport">
            <summary>
            Finishes the transport by committing the <see cref="P:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.DataTransaction"/> to the database.
            </summary>
            <remarks>This method invalidated the <see cref="T:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects"/> object, setting <see cref="P:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.DataTransaction"/> and
            <see cref="P:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.TransportedObjects"/> to <see langword="null"/>. The transported object references
            cannot be used any longer after calling this method.</remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.FinishTransport(System.Func{Remotion.Data.DomainObjects.DomainObject,System.Boolean})">
            <summary>
            Finishes the transport by committing the <see cref="P:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.DataTransaction"/> to the database, providing a filter to exclude some objects
            from being committed.
            </summary>
            <param name="filter">A filter delegate called for each object that would be committed to the database. Return true to include the
            object in the commit, or false to leave its state in the database as is.</param>
            <remarks>This method invalidated the <see cref="T:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects"/> object, setting <see cref="P:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.DataTransaction"/> and
            <see cref="P:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.TransportedObjects"/> to <see langword="null"/> and discarding <see cref="P:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.DataTransaction"/>. The transported object references
            cannot be used any longer after calling this method.</remarks>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.DataTransaction">
            <summary>
            Gets the transaction holding the data of the transported objects. Use <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnterNonDiscardingScope"/> to
            inspect the data in an application.
            </summary>
            <value>The transaction holding the data of the transported objects.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.TransportedObjects">
            <summary>
            Gets the transported objects. Use <see cref="P:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.DataTransaction"/> to inspect or change their data before calling <see cref="M:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.FinishTransport"/>.
            </summary>
            <value>The transported objects.</value>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Transport.TransportItem">
            <summary>
            Represents a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instance when it is to be transported by <see cref="T:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter"/>.
            </summary>
            <remarks>
            Values of this type hold the data stored by a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> in the context of a certain <see cref="T:Remotion.Data.DomainObjects.ClientTransaction"/> without
            having a dependency on the transaction infrastructure, which makes it easier to manipulate, export, and import them.
            </remarks>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.TransportItem.PackageDataContainer(Remotion.Data.DomainObjects.DataManagement.DataContainer)">
            <summary>
            Packages the data held by a <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> into a <see cref="T:Remotion.Data.DomainObjects.Transport.TransportItem"/>. This method is only meant for internal purposes.
            </summary>
            <param name="container">The container to package.</param>
            <returns>A <see cref="T:Remotion.Data.DomainObjects.Transport.TransportItem"/> holding the same data as <paramref name="container"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.TransportItem.PackageDataContainers(System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DataManagement.DataContainer})">
            <summary>
            Packages the data held by a stream of <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"/> instances into a stream of <see cref="T:Remotion.Data.DomainObjects.Transport.TransportItem"/> values. This method 
            is only meant for internal purposes.
            </summary>
            <param name="containers">The containers to package.</param>
            <returns>A stream of <see cref="T:Remotion.Data.DomainObjects.Transport.TransportItem"/> instances holding the same data as <paramref name="containers"/>.</returns>
        </member>
        <member name="M:Remotion.Data.DomainObjects.Transport.TransportItem.#ctor(Remotion.Data.DomainObjects.ObjectID)">
            <summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Transport.TransportItem"/> class.
            </summary>
            <param name="id">The id of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> represented by this item.</param>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Transport.TransportItem.ID">
            <summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> represented by this item.
            </summary>
            <value>The <see cref="T:Remotion.Data.DomainObjects.ObjectID"/> of this item.</value>
        </member>
        <member name="P:Remotion.Data.DomainObjects.Transport.TransportItem.Properties">
            <summary>
            Gets the properties to be transported by this item.
            </summary>
            <value>The properties to be transported.</value>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Transport.XmlExportStrategy">
            <summary>
            Represents an export strategy for <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances using XML serialization. This matches <see cref="T:Remotion.Data.DomainObjects.Transport.XmlImportStrategy"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Transport.XmlImportStrategy">
            <summary>
            Represents an import strategy for <see cref="T:Remotion.Data.DomainObjects.DomainObject"/> instances using XML serialization. This matches <see cref="T:Remotion.Data.DomainObjects.Transport.XmlExportStrategy"/>.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.DataManagement.ValueAccess">
            <summary>
            An value indicating whether the original or current value of a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"/> is being accessed.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.DataManagement.ValueAccess.Original">
            <summary>
            The original value is being accessed.
            </summary>
        </member>
        <member name="F:Remotion.Data.DomainObjects.DataManagement.ValueAccess.Current">
            <summary>
            The current value is being accessed.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.Validation.MandatoryRelationValidator">
            <summary>
            Validates the mandatory relations of a <see cref="T:Remotion.Data.DomainObjects.DomainObject"/>, throwing a <see cref="T:Remotion.Data.DomainObjects.Validation.MandatoryRelationNotSetException"/> when a mandatory
            relation is not set. Only complete relations are validated, no data is loaded by the validation.
            </summary>
        </member>
        <member name="T:Remotion.Data.DomainObjects.ValueTooLongException">
            <summary>
            The exception that is thrown when a domain object property is set with a value that is exceeds the <see cref="P:Remotion.Data.DomainObjects.Mapping.PropertyDefinition.MaxLength"/> of 
            the property.
            </summary>
        </member>
        <member name="M:Remotion.Data.DomainObjects.ValueTooLongException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo object with the parameter name and additional exception information.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ValueTooLongException.PropertyName">
            <summary>
            Gets the PropertyName that was set with a value exceeding the maximum length.
            </summary>
        </member>
        <member name="P:Remotion.Data.DomainObjects.ValueTooLongException.MaxLength">
            <summary>
            Gets the maximum length of the property.
            </summary>
        </member>
    </members>
</doc>
