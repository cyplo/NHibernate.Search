//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 HqlSqlWalker.g 2012-03-26 18:20:51

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Text;
using NHibernate.Hql.Ast.ANTLR.Tree;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;
using System;



namespace  NHibernate.Hql.Ast.ANTLR 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class HqlSqlWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AGGREGATE", "ALIAS", "ALL", "AND", "ANY", "AS", "ASCENDING", "AVG", "BAND", "BETWEEN", "BNOT", "BOR", "BOTH", "BXOR", "CASE", "CASE2", "CLASS", "CLOSE", "CLOSE_BRACKET", "COLON", "COMMA", "CONCAT", "CONSTANT", "CONSTRUCTOR", "COUNT", "DELETE", "DESCENDING", "DISTINCT", "DIV", "DOT", "ELEMENTS", "ELSE", "EMPTY", "END", "EQ", "ESCAPE", "ESCqs", "EXISTS", "EXPONENT", "EXPR_LIST", "FALSE", "FETCH", "FILTER_ENTITY", "FLOAT_SUFFIX", "FROM", "FULL", "GE", "GROUP", "GT", "HAVING", "HEX_DIGIT", "IDENT", "ID_LETTER", "ID_START_LETTER", "IN", "INDEX_OP", "INDICES", "INNER", "INSERT", "INTO", "IN_LIST", "IS", "IS_NOT_NULL", "IS_NULL", "JAVA_CONSTANT", "JOIN", "LE", "LEADING", "LEFT", "LIKE", "LITERAL_by", "LT", "MAX", "MEMBER", "METHOD_CALL", "MIN", "MINUS", "NE", "NEW", "NOT", "NOT_BETWEEN", "NOT_IN", "NOT_LIKE", "NULL", "NUM_DECIMAL", "NUM_DOUBLE", "NUM_FLOAT", "NUM_INT", "NUM_LONG", "OBJECT", "OF", "ON", "OPEN", "OPEN_BRACKET", "OR", "ORDER", "ORDER_ELEMENT", "OUTER", "PARAM", "PLUS", "PROPERTIES", "QUERY", "QUOTED_String", "RANGE", "RIGHT", "ROW_STAR", "SELECT", "SELECT_FROM", "SET", "SKIP", "SOME", "SQL_NE", "STAR", "SUM", "TAKE", "THEN", "TRAILING", "TRUE", "UNARY_MINUS", "UNARY_PLUS", "UNION", "UPDATE", "VECTOR_EXPR", "VERSIONED", "WEIRD_IDENT", "WHEN", "WHERE", "WITH", "WS", "'ascending'", "'descending'", "ALIAS_REF", "BOGUS", "FILTERS", "FROM_FRAGMENT", "IMPLIED_FROM", "JOIN_FRAGMENT", "LEFT_OUTER", "METHOD_NAME", "NAMED_PARAM", "PROPERTY_REF", "RIGHT_OUTER", "SELECT_CLAUSE", "SELECT_COLUMNS", "SELECT_EXPR", "SQL_TOKEN", "THETA_JOINS"
	};
	public const int EOF=-1;
	public const int AGGREGATE=4;
	public const int ALIAS=5;
	public const int ALL=6;
	public const int AND=7;
	public const int ANY=8;
	public const int AS=9;
	public const int ASCENDING=10;
	public const int AVG=11;
	public const int BAND=12;
	public const int BETWEEN=13;
	public const int BNOT=14;
	public const int BOR=15;
	public const int BOTH=16;
	public const int BXOR=17;
	public const int CASE=18;
	public const int CASE2=19;
	public const int CLASS=20;
	public const int CLOSE=21;
	public const int CLOSE_BRACKET=22;
	public const int COLON=23;
	public const int COMMA=24;
	public const int CONCAT=25;
	public const int CONSTANT=26;
	public const int CONSTRUCTOR=27;
	public const int COUNT=28;
	public const int DELETE=29;
	public const int DESCENDING=30;
	public const int DISTINCT=31;
	public const int DIV=32;
	public const int DOT=33;
	public const int ELEMENTS=34;
	public const int ELSE=35;
	public const int EMPTY=36;
	public const int END=37;
	public const int EQ=38;
	public const int ESCAPE=39;
	public const int ESCqs=40;
	public const int EXISTS=41;
	public const int EXPONENT=42;
	public const int EXPR_LIST=43;
	public const int FALSE=44;
	public const int FETCH=45;
	public const int FILTER_ENTITY=46;
	public const int FLOAT_SUFFIX=47;
	public const int FROM=48;
	public const int FULL=49;
	public const int GE=50;
	public const int GROUP=51;
	public const int GT=52;
	public const int HAVING=53;
	public const int HEX_DIGIT=54;
	public const int IDENT=55;
	public const int ID_LETTER=56;
	public const int ID_START_LETTER=57;
	public const int IN=58;
	public const int INDEX_OP=59;
	public const int INDICES=60;
	public const int INNER=61;
	public const int INSERT=62;
	public const int INTO=63;
	public const int IN_LIST=64;
	public const int IS=65;
	public const int IS_NOT_NULL=66;
	public const int IS_NULL=67;
	public const int JAVA_CONSTANT=68;
	public const int JOIN=69;
	public const int LE=70;
	public const int LEADING=71;
	public const int LEFT=72;
	public const int LIKE=73;
	public const int LITERAL_by=74;
	public const int LT=75;
	public const int MAX=76;
	public const int MEMBER=77;
	public const int METHOD_CALL=78;
	public const int MIN=79;
	public const int MINUS=80;
	public const int NE=81;
	public const int NEW=82;
	public const int NOT=83;
	public const int NOT_BETWEEN=84;
	public const int NOT_IN=85;
	public const int NOT_LIKE=86;
	public const int NULL=87;
	public const int NUM_DECIMAL=88;
	public const int NUM_DOUBLE=89;
	public const int NUM_FLOAT=90;
	public const int NUM_INT=91;
	public const int NUM_LONG=92;
	public const int OBJECT=93;
	public const int OF=94;
	public const int ON=95;
	public const int OPEN=96;
	public const int OPEN_BRACKET=97;
	public const int OR=98;
	public const int ORDER=99;
	public const int ORDER_ELEMENT=100;
	public const int OUTER=101;
	public const int PARAM=102;
	public const int PLUS=103;
	public const int PROPERTIES=104;
	public const int QUERY=105;
	public const int QUOTED_String=106;
	public const int RANGE=107;
	public const int RIGHT=108;
	public const int ROW_STAR=109;
	public const int SELECT=110;
	public const int SELECT_FROM=111;
	public const int SET=112;
	public const int SKIP=113;
	public const int SOME=114;
	public const int SQL_NE=115;
	public const int STAR=116;
	public const int SUM=117;
	public const int TAKE=118;
	public const int THEN=119;
	public const int TRAILING=120;
	public const int TRUE=121;
	public const int UNARY_MINUS=122;
	public const int UNARY_PLUS=123;
	public const int UNION=124;
	public const int UPDATE=125;
	public const int VECTOR_EXPR=126;
	public const int VERSIONED=127;
	public const int WEIRD_IDENT=128;
	public const int WHEN=129;
	public const int WHERE=130;
	public const int WITH=131;
	public const int WS=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int ALIAS_REF=135;
	public const int BOGUS=136;
	public const int FILTERS=137;
	public const int FROM_FRAGMENT=138;
	public const int IMPLIED_FROM=139;
	public const int JOIN_FRAGMENT=140;
	public const int LEFT_OUTER=141;
	public const int METHOD_NAME=142;
	public const int NAMED_PARAM=143;
	public const int PROPERTY_REF=144;
	public const int RIGHT_OUTER=145;
	public const int SELECT_CLAUSE=146;
	public const int SELECT_COLUMNS=147;
	public const int SELECT_EXPR=148;
	public const int SQL_TOKEN=149;
	public const int THETA_JOINS=150;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public HqlSqlWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public HqlSqlWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return HqlSqlWalker.tokenNames; } }
	public override string GrammarFileName { get { return "HqlSqlWalker.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_statement() {}
	// $ANTLR start "statement"
	// HqlSqlWalker.g:40:1: statement : ( selectStatement | updateStatement | deleteStatement | insertStatement );
	[GrammarRule("statement")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 1);
		TraceIn("statement", 1);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    AstTreeRuleReturnScope<IASTNode, IASTNode> selectStatement1 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> updateStatement2 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> deleteStatement3 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> insertStatement4 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);


		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(40, 1);
		try
		{
			// HqlSqlWalker.g:41:2: ( selectStatement | updateStatement | deleteStatement | insertStatement )
			int alt1=4;
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			switch (input.LA(1))
			{
			case QUERY:
			case UNION:
				{
				alt1 = 1;
				}
				break;
			case UPDATE:
				{
				alt1 = 2;
				}
				break;
			case DELETE:
				{
				alt1 = 3;
				}
				break;
			case INSERT:
				{
				alt1 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:41:4: selectStatement
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(41, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._selectStatement_in_statement168);
				selectStatement1=selectStatement();
				PopFollow();

				adaptor.AddChild(root_0, selectStatement1.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:41:22: updateStatement
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(41, 22);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._updateStatement_in_statement172);
				updateStatement2=updateStatement();
				PopFollow();

				adaptor.AddChild(root_0, updateStatement2.Tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:41:40: deleteStatement
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(41, 40);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._deleteStatement_in_statement176);
				deleteStatement3=deleteStatement();
				PopFollow();

				adaptor.AddChild(root_0, deleteStatement3.Tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:41:58: insertStatement
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(41, 58);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._insertStatement_in_statement180);
				insertStatement4=insertStatement();
				PopFollow();

				adaptor.AddChild(root_0, insertStatement4.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 1);
			LeaveRule("statement", 1);
			LeaveRule_statement();
	    }
	 	DebugLocation(42, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_selectStatement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_selectStatement() {}
	// $ANTLR start "selectStatement"
	// HqlSqlWalker.g:44:1: selectStatement : query ;
	[GrammarRule("selectStatement")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> selectStatement()
	{
		EnterRule_selectStatement();
		EnterRule("selectStatement", 2);
		TraceIn("selectStatement", 2);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    AstTreeRuleReturnScope<IASTNode, IASTNode> query5 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);


		try { DebugEnterRule(GrammarFileName, "selectStatement");
		DebugLocation(44, 1);
		try
		{
			// HqlSqlWalker.g:45:2: ( query )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:45:4: query
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(45, 4);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._query_in_selectStatement191);
			query5=query();
			PopFollow();

			adaptor.AddChild(root_0, query5.Tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("selectStatement", 2);
			LeaveRule("selectStatement", 2);
			LeaveRule_selectStatement();
	    }
	 	DebugLocation(46, 1);
		} finally { DebugExitRule(GrammarFileName, "selectStatement"); }
		return retval;

	}
	// $ANTLR end "selectStatement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_updateStatement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_updateStatement() {}
	// $ANTLR start "updateStatement"
	// HqlSqlWalker.g:51:1: updateStatement : ^(u= UPDATE (v= VERSIONED )? f= fromClause s= setClause (w= whereClause )? ) -> ^( $u $f $s ( $w)? ) ;
	[GrammarRule("updateStatement")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> updateStatement()
	{
		EnterRule_updateStatement();
		EnterRule("updateStatement", 3);
		TraceIn("updateStatement", 3);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode u = default(IASTNode);
	    IASTNode v = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> f = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> s = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> w = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode u_tree = default(IASTNode);
	    IASTNode v_tree = default(IASTNode);
	    RewriteRuleNodeStream stream_UPDATE=new RewriteRuleNodeStream(adaptor,"token UPDATE");
	    RewriteRuleNodeStream stream_VERSIONED=new RewriteRuleNodeStream(adaptor,"token VERSIONED");
	    RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
	    RewriteRuleSubtreeStream stream_setClause=new RewriteRuleSubtreeStream(adaptor,"rule setClause");
	    RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		try { DebugEnterRule(GrammarFileName, "updateStatement");
		DebugLocation(51, 1);
		try
		{
			// HqlSqlWalker.g:58:2: ( ^(u= UPDATE (v= VERSIONED )? f= fromClause s= setClause (w= whereClause )? ) -> ^( $u $f $s ( $w)? ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:58:4: ^(u= UPDATE (v= VERSIONED )? f= fromClause s= setClause (w= whereClause )? )
			{
			DebugLocation(58, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(58, 8);

			_last = (IASTNode)input.LT(1);
			u=(IASTNode)Match(input,UPDATE,Follow._UPDATE_in_updateStatement215); 
			 
			stream_UPDATE.Add(u);


			DebugLocation(58, 16);
			 BeforeStatement( "update", UPDATE ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(58, 57);
			// HqlSqlWalker.g:58:57: (v= VERSIONED )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
			int LA2_1 = input.LA(1);

			if ((LA2_1==VERSIONED))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:58:58: v= VERSIONED
				{
				DebugLocation(58, 59);

				_last = (IASTNode)input.LT(1);
				v=(IASTNode)Match(input,VERSIONED,Follow._VERSIONED_in_updateStatement222); 
				 
				stream_VERSIONED.Add(v);


				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(58, 73);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._fromClause_in_updateStatement228);
			f=fromClause();
			PopFollow();

			stream_fromClause.Add(f.Tree);

			DebugLocation(58, 86);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._setClause_in_updateStatement232);
			s=setClause();
			PopFollow();

			stream_setClause.Add(s.Tree);

			DebugLocation(58, 97);
			// HqlSqlWalker.g:58:97: (w= whereClause )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_1 = input.LA(1);

			if ((LA3_1==WHERE))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:58:98: w= whereClause
				{
				DebugLocation(58, 99);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._whereClause_in_updateStatement237);
				w=whereClause();
				PopFollow();

				stream_whereClause.Add(w.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: u, f, s, w
			// token labels: u
			// rule labels: f, s, w, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_u=new RewriteRuleNodeStream(adaptor,"token u",u);
			RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"rule f",f!=null?f.Tree:null);
			RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.Tree:null);
			RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 59:3: -> ^( $u $f $s ( $w)? )
			{
				DebugLocation(59, 6);
				// HqlSqlWalker.g:59:6: ^( $u $f $s ( $w)? )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(59, 9);
				root_1 = (IASTNode)adaptor.BecomeRoot(stream_u.NextNode(), root_1);

				DebugLocation(59, 12);
				adaptor.AddChild(root_1, stream_f.NextTree());
				DebugLocation(59, 15);
				adaptor.AddChild(root_1, stream_s.NextTree());
				DebugLocation(59, 18);
				// HqlSqlWalker.g:59:18: ( $w)?
				if (stream_w.HasNext)
				{
					DebugLocation(59, 18);
					adaptor.AddChild(root_1, stream_w.NextTree());

				}
				stream_w.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					BeforeStatementCompletion( "update" );
					PrepareVersioned( retval.Tree, v );
					PostProcessUpdate( retval.Tree );
					AfterStatementCompletion( "update" );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("updateStatement", 3);
			LeaveRule("updateStatement", 3);
			LeaveRule_updateStatement();
	    }
	 	DebugLocation(60, 1);
		} finally { DebugExitRule(GrammarFileName, "updateStatement"); }
		return retval;

	}
	// $ANTLR end "updateStatement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_deleteStatement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_deleteStatement() {}
	// $ANTLR start "deleteStatement"
	// HqlSqlWalker.g:62:1: deleteStatement : ^( DELETE fromClause ( whereClause )? ) ;
	[GrammarRule("deleteStatement")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> deleteStatement()
	{
		EnterRule_deleteStatement();
		EnterRule("deleteStatement", 4);
		TraceIn("deleteStatement", 4);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode DELETE6 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> fromClause7 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> whereClause8 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode DELETE6_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "deleteStatement");
		DebugLocation(62, 1);
		try
		{
			// HqlSqlWalker.g:68:2: ( ^( DELETE fromClause ( whereClause )? ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:68:4: ^( DELETE fromClause ( whereClause )? )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(68, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(68, 7);

			_last = (IASTNode)input.LT(1);
			DELETE6=(IASTNode)Match(input,DELETE,Follow._DELETE_in_deleteStatement280); 
			DELETE6_tree = (IASTNode)adaptor.DupNode(DELETE6);


			root_1 = (IASTNode)adaptor.BecomeRoot(DELETE6_tree, root_1);


			DebugLocation(68, 14);
			 BeforeStatement( "delete", DELETE ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(68, 55);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._fromClause_in_deleteStatement284);
			fromClause7=fromClause();
			PopFollow();

			adaptor.AddChild(root_1, fromClause7.Tree);

			DebugLocation(68, 66);
			// HqlSqlWalker.g:68:66: ( whereClause )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, decisionCanBacktrack[4]);
			int LA4_1 = input.LA(1);

			if ((LA4_1==WHERE))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:68:67: whereClause
				{
				DebugLocation(68, 67);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._whereClause_in_deleteStatement287);
				whereClause8=whereClause();
				PopFollow();

				adaptor.AddChild(root_1, whereClause8.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(4); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					BeforeStatementCompletion( "delete" );
					PostProcessDelete( retval.Tree );
					AfterStatementCompletion( "delete" );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("deleteStatement", 4);
			LeaveRule("deleteStatement", 4);
			LeaveRule_deleteStatement();
	    }
	 	DebugLocation(69, 1);
		} finally { DebugExitRule(GrammarFileName, "deleteStatement"); }
		return retval;

	}
	// $ANTLR end "deleteStatement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_insertStatement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_insertStatement() {}
	// $ANTLR start "insertStatement"
	// HqlSqlWalker.g:71:1: insertStatement : ^( INSERT intoClause query ) ;
	[GrammarRule("insertStatement")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> insertStatement()
	{
		EnterRule_insertStatement();
		EnterRule("insertStatement", 5);
		TraceIn("insertStatement", 5);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode INSERT9 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> intoClause10 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> query11 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode INSERT9_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "insertStatement");
		DebugLocation(71, 1);
		try
		{
			// HqlSqlWalker.g:80:2: ( ^( INSERT intoClause query ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:80:4: ^( INSERT intoClause query )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(80, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(80, 7);

			_last = (IASTNode)input.LT(1);
			INSERT9=(IASTNode)Match(input,INSERT,Follow._INSERT_in_insertStatement317); 
			INSERT9_tree = (IASTNode)adaptor.DupNode(INSERT9);


			root_1 = (IASTNode)adaptor.BecomeRoot(INSERT9_tree, root_1);


			DebugLocation(80, 14);
			 BeforeStatement( "insert", INSERT ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(80, 55);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._intoClause_in_insertStatement321);
			intoClause10=intoClause();
			PopFollow();

			adaptor.AddChild(root_1, intoClause10.Tree);

			DebugLocation(80, 66);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._query_in_insertStatement323);
			query11=query();
			PopFollow();

			adaptor.AddChild(root_1, query11.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					BeforeStatementCompletion( "insert" );
					PostProcessInsert( retval.Tree );
					AfterStatementCompletion( "insert" );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("insertStatement", 5);
			LeaveRule("insertStatement", 5);
			LeaveRule_insertStatement();
	    }
	 	DebugLocation(81, 1);
		} finally { DebugExitRule(GrammarFileName, "insertStatement"); }
		return retval;

	}
	// $ANTLR end "insertStatement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_intoClause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_intoClause() {}
	// $ANTLR start "intoClause"
	// HqlSqlWalker.g:83:1: intoClause : ^( INTO (p= path ) ps= insertablePropertySpec ) ;
	[GrammarRule("intoClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> intoClause()
	{
		EnterRule_intoClause();
		EnterRule("intoClause", 6);
		TraceIn("intoClause", 6);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode INTO12 = default(IASTNode);
	    HqlSqlWalker.path_return p = default(HqlSqlWalker.path_return);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> ps = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode INTO12_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "intoClause");
		DebugLocation(83, 1);
		try
		{
			// HqlSqlWalker.g:87:2: ( ^( INTO (p= path ) ps= insertablePropertySpec ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:87:4: ^( INTO (p= path ) ps= insertablePropertySpec )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(87, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(87, 7);

			_last = (IASTNode)input.LT(1);
			INTO12=(IASTNode)Match(input,INTO,Follow._INTO_in_intoClause347); 
			INTO12_tree = (IASTNode)adaptor.DupNode(INTO12);


			root_1 = (IASTNode)adaptor.BecomeRoot(INTO12_tree, root_1);


			DebugLocation(87, 12);
			 HandleClauseStart( INTO ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(87, 43);
			// HqlSqlWalker.g:87:43: (p= path )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:87:44: p= path
			{
			DebugLocation(87, 45);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._path_in_intoClause354);
			p=path();
			PopFollow();

			adaptor.AddChild(root_1, p.Tree);


			}

			DebugLocation(87, 54);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._insertablePropertySpec_in_intoClause359);
			ps=insertablePropertySpec();
			PopFollow();

			adaptor.AddChild(root_1, ps.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					retval.Tree =  CreateIntoClause((p!=null?p.p:default(String)), (ps!=null?((IASTNode)ps.Tree):default(IASTNode)));
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("intoClause", 6);
			LeaveRule("intoClause", 6);
			LeaveRule_intoClause();
	    }
	 	DebugLocation(88, 1);
		} finally { DebugExitRule(GrammarFileName, "intoClause"); }
		return retval;

	}
	// $ANTLR end "intoClause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_insertablePropertySpec() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_insertablePropertySpec() {}
	// $ANTLR start "insertablePropertySpec"
	// HqlSqlWalker.g:90:1: insertablePropertySpec : ^( RANGE ( IDENT )+ ) ;
	[GrammarRule("insertablePropertySpec")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> insertablePropertySpec()
	{
		EnterRule_insertablePropertySpec();
		EnterRule("insertablePropertySpec", 7);
		TraceIn("insertablePropertySpec", 7);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode RANGE13 = default(IASTNode);
	    IASTNode IDENT14 = default(IASTNode);

	    IASTNode RANGE13_tree = default(IASTNode);
	    IASTNode IDENT14_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "insertablePropertySpec");
		DebugLocation(90, 1);
		try
		{
			// HqlSqlWalker.g:91:2: ( ^( RANGE ( IDENT )+ ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:91:4: ^( RANGE ( IDENT )+ )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(91, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(91, 7);

			_last = (IASTNode)input.LT(1);
			RANGE13=(IASTNode)Match(input,RANGE,Follow._RANGE_in_insertablePropertySpec375); 
			RANGE13_tree = (IASTNode)adaptor.DupNode(RANGE13);


			root_1 = (IASTNode)adaptor.BecomeRoot(RANGE13_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(91, 13);
			// HqlSqlWalker.g:91:13: ( IDENT )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, decisionCanBacktrack[5]);
				int LA5_1 = input.LA(1);

				if ((LA5_1==IDENT))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:91:14: IDENT
					{
					DebugLocation(91, 14);

					_last = (IASTNode)input.LT(1);
					IDENT14=(IASTNode)Match(input,IDENT,Follow._IDENT_in_insertablePropertySpec378); 
					IDENT14_tree = (IASTNode)adaptor.DupNode(IDENT14);


					adaptor.AddChild(root_1, IDENT14_tree);


					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("insertablePropertySpec", 7);
			LeaveRule("insertablePropertySpec", 7);
			LeaveRule_insertablePropertySpec();
	    }
	 	DebugLocation(92, 1);
		} finally { DebugExitRule(GrammarFileName, "insertablePropertySpec"); }
		return retval;

	}
	// $ANTLR end "insertablePropertySpec"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_setClause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_setClause() {}
	// $ANTLR start "setClause"
	// HqlSqlWalker.g:94:1: setClause : ^( SET ( assignment )* ) ;
	[GrammarRule("setClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> setClause()
	{
		EnterRule_setClause();
		EnterRule("setClause", 8);
		TraceIn("setClause", 8);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode SET15 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> assignment16 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode SET15_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "setClause");
		DebugLocation(94, 1);
		try
		{
			// HqlSqlWalker.g:95:2: ( ^( SET ( assignment )* ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:95:4: ^( SET ( assignment )* )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(95, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(95, 7);

			_last = (IASTNode)input.LT(1);
			SET15=(IASTNode)Match(input,SET,Follow._SET_in_setClause395); 
			SET15_tree = (IASTNode)adaptor.DupNode(SET15);


			root_1 = (IASTNode)adaptor.BecomeRoot(SET15_tree, root_1);


			DebugLocation(95, 11);
			 HandleClauseStart( SET ); 

			if (input.LA(1) == TokenTypes.Down) {
			    Match(input, TokenTypes.Down, null); 
			    DebugLocation(95, 41);
			    // HqlSqlWalker.g:95:41: ( assignment )*
			    try { DebugEnterSubRule(6);
			    while (true)
			    {
			    	int alt6=2;
			    	try { DebugEnterDecision(6, decisionCanBacktrack[6]);
			    	int LA6_1 = input.LA(1);

			    	if ((LA6_1==EQ))
			    	{
			    		alt6 = 1;
			    	}


			    	} finally { DebugExitDecision(6); }
			    	switch ( alt6 )
			    	{
			    	case 1:
			    		DebugEnterAlt(1);
			    		// HqlSqlWalker.g:95:42: assignment
			    		{
			    		DebugLocation(95, 42);

			    		_last = (IASTNode)input.LT(1);
			    		PushFollow(Follow._assignment_in_setClause400);
			    		assignment16=assignment();
			    		PopFollow();

			    		adaptor.AddChild(root_1, assignment16.Tree);


			    		}
			    		break;

			    	default:
			    		goto loop6;
			    	}
			    }

			    loop6:
			    	;

			    } finally { DebugExitSubRule(6); }


			    Match(input, TokenTypes.Up, null); 
			}
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("setClause", 8);
			LeaveRule("setClause", 8);
			LeaveRule_setClause();
	    }
	 	DebugLocation(96, 1);
		} finally { DebugExitRule(GrammarFileName, "setClause"); }
		return retval;

	}
	// $ANTLR end "setClause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_assignment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_assignment() {}
	// $ANTLR start "assignment"
	// HqlSqlWalker.g:98:1: assignment : ^( EQ (p= propertyRef ) ( newValue ) ) ;
	[GrammarRule("assignment")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 9);
		TraceIn("assignment", 9);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode EQ17 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> p = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> newValue18 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode EQ17_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(98, 1);
		try
		{
			// HqlSqlWalker.g:104:2: ( ^( EQ (p= propertyRef ) ( newValue ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:104:4: ^( EQ (p= propertyRef ) ( newValue ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(104, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(104, 7);

			_last = (IASTNode)input.LT(1);
			EQ17=(IASTNode)Match(input,EQ,Follow._EQ_in_assignment427); 
			EQ17_tree = (IASTNode)adaptor.DupNode(EQ17);


			root_1 = (IASTNode)adaptor.BecomeRoot(EQ17_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(104, 10);
			// HqlSqlWalker.g:104:10: (p= propertyRef )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:104:11: p= propertyRef
			{
			DebugLocation(104, 12);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._propertyRef_in_assignment432);
			p=propertyRef();
			PopFollow();

			adaptor.AddChild(root_1, p.Tree);


			}

			DebugLocation(104, 26);
			 Resolve((p!=null?((IASTNode)p.Tree):default(IASTNode))); 
			DebugLocation(104, 48);
			// HqlSqlWalker.g:104:48: ( newValue )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:104:49: newValue
			{
			DebugLocation(104, 49);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._newValue_in_assignment438);
			newValue18=newValue();
			PopFollow();

			adaptor.AddChild(root_1, newValue18.Tree);


			}


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					EvaluateAssignment( retval.Tree );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assignment", 9);
			LeaveRule("assignment", 9);
			LeaveRule_assignment();
	    }
	 	DebugLocation(105, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_newValue() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_newValue() {}
	// $ANTLR start "newValue"
	// HqlSqlWalker.g:108:1: newValue : ( expr | query );
	[GrammarRule("newValue")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> newValue()
	{
		EnterRule_newValue();
		EnterRule("newValue", 10);
		TraceIn("newValue", 10);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    AstTreeRuleReturnScope<IASTNode, IASTNode> expr19 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> query20 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);


		try { DebugEnterRule(GrammarFileName, "newValue");
		DebugLocation(108, 1);
		try
		{
			// HqlSqlWalker.g:109:2: ( expr | query )
			int alt7=2;
			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
			int LA7_1 = input.LA(1);

			if ((LA7_1==AGGREGATE||LA7_1==BAND||(LA7_1>=BNOT && LA7_1<=BOR)||(LA7_1>=BXOR && LA7_1<=CASE2)||LA7_1==COLON||LA7_1==COUNT||(LA7_1>=DIV && LA7_1<=DOT)||LA7_1==FALSE||LA7_1==IDENT||LA7_1==INDEX_OP||LA7_1==JAVA_CONSTANT||LA7_1==METHOD_CALL||LA7_1==MINUS||(LA7_1>=NULL && LA7_1<=NUM_LONG)||(LA7_1>=PARAM && LA7_1<=PLUS)||LA7_1==QUOTED_String||LA7_1==STAR||(LA7_1>=TRUE && LA7_1<=UNARY_MINUS)||LA7_1==VECTOR_EXPR||LA7_1==WEIRD_IDENT))
			{
				alt7 = 1;
			}
			else if ((LA7_1==QUERY||LA7_1==UNION))
			{
				alt7 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:109:4: expr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(109, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._expr_in_newValue454);
				expr19=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr19.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:109:11: query
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(109, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._query_in_newValue458);
				query20=query();
				PopFollow();

				adaptor.AddChild(root_0, query20.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("newValue", 10);
			LeaveRule("newValue", 10);
			LeaveRule_newValue();
	    }
	 	DebugLocation(110, 1);
		} finally { DebugExitRule(GrammarFileName, "newValue"); }
		return retval;

	}
	// $ANTLR end "newValue"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_query() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_query() {}
	// $ANTLR start "query"
	// HqlSqlWalker.g:112:1: query : ( unionedQuery | ^( UNION unionedQuery query ) );
	[GrammarRule("query")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> query()
	{
		EnterRule_query();
		EnterRule("query", 11);
		TraceIn("query", 11);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode UNION22 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> unionedQuery21 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> unionedQuery23 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> query24 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode UNION22_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "query");
		DebugLocation(112, 1);
		try
		{
			// HqlSqlWalker.g:113:2: ( unionedQuery | ^( UNION unionedQuery query ) )
			int alt8=2;
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			int LA8_1 = input.LA(1);

			if ((LA8_1==QUERY))
			{
				alt8 = 1;
			}
			else if ((LA8_1==UNION))
			{
				alt8 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:113:4: unionedQuery
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(113, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._unionedQuery_in_query469);
				unionedQuery21=unionedQuery();
				PopFollow();

				adaptor.AddChild(root_0, unionedQuery21.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:114:4: ^( UNION unionedQuery query )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(114, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(114, 6);

				_last = (IASTNode)input.LT(1);
				UNION22=(IASTNode)Match(input,UNION,Follow._UNION_in_query476); 
				UNION22_tree = (IASTNode)adaptor.DupNode(UNION22);


				root_1 = (IASTNode)adaptor.BecomeRoot(UNION22_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(114, 12);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._unionedQuery_in_query478);
				unionedQuery23=unionedQuery();
				PopFollow();

				adaptor.AddChild(root_1, unionedQuery23.Tree);

				DebugLocation(114, 25);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._query_in_query480);
				query24=query();
				PopFollow();

				adaptor.AddChild(root_1, query24.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("query", 11);
			LeaveRule("query", 11);
			LeaveRule_query();
	    }
	 	DebugLocation(115, 1);
		} finally { DebugExitRule(GrammarFileName, "query"); }
		return retval;

	}
	// $ANTLR end "query"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_unionedQuery() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_unionedQuery() {}
	// $ANTLR start "unionedQuery"
	// HqlSqlWalker.g:119:1: unionedQuery : ^( QUERY ^( SELECT_FROM f= fromClause (s= selectClause )? ) (w= whereClause )? (g= groupClause )? (h= havingClause )? (o= orderClause )? (sk= skipClause )? (tk= takeClause )? ) -> ^( SELECT ( $s)? $f ( $w)? ( $g)? ( $h)? ( $o)? ( $sk)? ( $tk)? ) ;
	[GrammarRule("unionedQuery")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> unionedQuery()
	{
		EnterRule_unionedQuery();
		EnterRule("unionedQuery", 12);
		TraceIn("unionedQuery", 12);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode QUERY25 = default(IASTNode);
	    IASTNode SELECT_FROM26 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> f = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> s = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> w = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> g = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> h = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> o = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> sk = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> tk = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode QUERY25_tree = default(IASTNode);
	    IASTNode SELECT_FROM26_tree = default(IASTNode);
	    RewriteRuleNodeStream stream_QUERY=new RewriteRuleNodeStream(adaptor,"token QUERY");
	    RewriteRuleNodeStream stream_SELECT_FROM=new RewriteRuleNodeStream(adaptor,"token SELECT_FROM");
	    RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
	    RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
	    RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
	    RewriteRuleSubtreeStream stream_groupClause=new RewriteRuleSubtreeStream(adaptor,"rule groupClause");
	    RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
	    RewriteRuleSubtreeStream stream_orderClause=new RewriteRuleSubtreeStream(adaptor,"rule orderClause");
	    RewriteRuleSubtreeStream stream_skipClause=new RewriteRuleSubtreeStream(adaptor,"rule skipClause");
	    RewriteRuleSubtreeStream stream_takeClause=new RewriteRuleSubtreeStream(adaptor,"rule takeClause");
		try { DebugEnterRule(GrammarFileName, "unionedQuery");
		DebugLocation(119, 1);
		try
		{
			// HqlSqlWalker.g:126:2: ( ^( QUERY ^( SELECT_FROM f= fromClause (s= selectClause )? ) (w= whereClause )? (g= groupClause )? (h= havingClause )? (o= orderClause )? (sk= skipClause )? (tk= takeClause )? ) -> ^( SELECT ( $s)? $f ( $w)? ( $g)? ( $h)? ( $o)? ( $sk)? ( $tk)? ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:126:4: ^( QUERY ^( SELECT_FROM f= fromClause (s= selectClause )? ) (w= whereClause )? (g= groupClause )? (h= havingClause )? (o= orderClause )? (sk= skipClause )? (tk= takeClause )? )
			{
			DebugLocation(126, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(126, 7);

			_last = (IASTNode)input.LT(1);
			QUERY25=(IASTNode)Match(input,QUERY,Follow._QUERY_in_unionedQuery503); 
			 
			stream_QUERY.Add(QUERY25);


			DebugLocation(126, 13);
			 BeforeStatement( "select", SELECT ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(128, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_2 = _last;
			IASTNode _first_2 = default(IASTNode);
			IASTNode root_2 = (IASTNode)adaptor.Nil();
			DebugLocation(128, 6);

			_last = (IASTNode)input.LT(1);
			SELECT_FROM26=(IASTNode)Match(input,SELECT_FROM,Follow._SELECT_FROM_in_unionedQuery515); 
			 
			stream_SELECT_FROM.Add(SELECT_FROM26);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(129, 6);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._fromClause_in_unionedQuery523);
			f=fromClause();
			PopFollow();

			stream_fromClause.Add(f.Tree);

			DebugLocation(130, 5);
			// HqlSqlWalker.g:130:5: (s= selectClause )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_1 = input.LA(1);

			if ((LA9_1==SELECT))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:130:6: s= selectClause
				{
				DebugLocation(130, 7);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._selectClause_in_unionedQuery532);
				s=selectClause();
				PopFollow();

				stream_selectClause.Add(s.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(9); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_1, root_2);
			_last = _save_last_2;
			}

			DebugLocation(132, 4);
			// HqlSqlWalker.g:132:4: (w= whereClause )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			int LA10_1 = input.LA(1);

			if ((LA10_1==WHERE))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:132:5: w= whereClause
				{
				DebugLocation(132, 6);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._whereClause_in_unionedQuery547);
				w=whereClause();
				PopFollow();

				stream_whereClause.Add(w.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(133, 4);
			// HqlSqlWalker.g:133:4: (g= groupClause )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_1 = input.LA(1);

			if ((LA11_1==GROUP))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:133:5: g= groupClause
				{
				DebugLocation(133, 6);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._groupClause_in_unionedQuery557);
				g=groupClause();
				PopFollow();

				stream_groupClause.Add(g.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(134, 4);
			// HqlSqlWalker.g:134:4: (h= havingClause )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_1 = input.LA(1);

			if ((LA12_1==HAVING))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:134:5: h= havingClause
				{
				DebugLocation(134, 6);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._havingClause_in_unionedQuery567);
				h=havingClause();
				PopFollow();

				stream_havingClause.Add(h.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(135, 4);
			// HqlSqlWalker.g:135:4: (o= orderClause )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, decisionCanBacktrack[13]);
			int LA13_1 = input.LA(1);

			if ((LA13_1==ORDER))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:135:5: o= orderClause
				{
				DebugLocation(135, 6);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._orderClause_in_unionedQuery577);
				o=orderClause();
				PopFollow();

				stream_orderClause.Add(o.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(136, 4);
			// HqlSqlWalker.g:136:4: (sk= skipClause )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			int LA14_1 = input.LA(1);

			if ((LA14_1==SKIP))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:136:5: sk= skipClause
				{
				DebugLocation(136, 7);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._skipClause_in_unionedQuery587);
				sk=skipClause();
				PopFollow();

				stream_skipClause.Add(sk.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(137, 4);
			// HqlSqlWalker.g:137:4: (tk= takeClause )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			int LA15_1 = input.LA(1);

			if ((LA15_1==TAKE))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:137:5: tk= takeClause
				{
				DebugLocation(137, 7);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._takeClause_in_unionedQuery597);
				tk=takeClause();
				PopFollow();

				stream_takeClause.Add(tk.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(15); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: s, f, w, g, h, o, sk, tk
			// token labels: 
			// rule labels: s, f, w, g, h, o, sk, tk, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.Tree:null);
			RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"rule f",f!=null?f.Tree:null);
			RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.Tree:null);
			RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.Tree:null);
			RewriteRuleSubtreeStream stream_h=new RewriteRuleSubtreeStream(adaptor,"rule h",h!=null?h.Tree:null);
			RewriteRuleSubtreeStream stream_o=new RewriteRuleSubtreeStream(adaptor,"rule o",o!=null?o.Tree:null);
			RewriteRuleSubtreeStream stream_sk=new RewriteRuleSubtreeStream(adaptor,"rule sk",sk!=null?sk.Tree:null);
			RewriteRuleSubtreeStream stream_tk=new RewriteRuleSubtreeStream(adaptor,"rule tk",tk!=null?tk.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 139:2: -> ^( SELECT ( $s)? $f ( $w)? ( $g)? ( $h)? ( $o)? ( $sk)? ( $tk)? )
			{
				DebugLocation(139, 5);
				// HqlSqlWalker.g:139:5: ^( SELECT ( $s)? $f ( $w)? ( $g)? ( $h)? ( $o)? ( $sk)? ( $tk)? )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(139, 7);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(SELECT, "SELECT"), root_1);

				DebugLocation(139, 15);
				// HqlSqlWalker.g:139:15: ( $s)?
				if (stream_s.HasNext)
				{
					DebugLocation(139, 15);
					adaptor.AddChild(root_1, stream_s.NextTree());

				}
				stream_s.Reset();
				DebugLocation(139, 19);
				adaptor.AddChild(root_1, stream_f.NextTree());
				DebugLocation(139, 22);
				// HqlSqlWalker.g:139:22: ( $w)?
				if (stream_w.HasNext)
				{
					DebugLocation(139, 22);
					adaptor.AddChild(root_1, stream_w.NextTree());

				}
				stream_w.Reset();
				DebugLocation(139, 26);
				// HqlSqlWalker.g:139:26: ( $g)?
				if (stream_g.HasNext)
				{
					DebugLocation(139, 26);
					adaptor.AddChild(root_1, stream_g.NextTree());

				}
				stream_g.Reset();
				DebugLocation(139, 30);
				// HqlSqlWalker.g:139:30: ( $h)?
				if (stream_h.HasNext)
				{
					DebugLocation(139, 30);
					adaptor.AddChild(root_1, stream_h.NextTree());

				}
				stream_h.Reset();
				DebugLocation(139, 34);
				// HqlSqlWalker.g:139:34: ( $o)?
				if (stream_o.HasNext)
				{
					DebugLocation(139, 34);
					adaptor.AddChild(root_1, stream_o.NextTree());

				}
				stream_o.Reset();
				DebugLocation(139, 38);
				// HqlSqlWalker.g:139:38: ( $sk)?
				if (stream_sk.HasNext)
				{
					DebugLocation(139, 38);
					adaptor.AddChild(root_1, stream_sk.NextTree());

				}
				stream_sk.Reset();
				DebugLocation(139, 43);
				// HqlSqlWalker.g:139:43: ( $tk)?
				if (stream_tk.HasNext)
				{
					DebugLocation(139, 43);
					adaptor.AddChild(root_1, stream_tk.NextTree());

				}
				stream_tk.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					// Antlr note: #x_in refers to the input AST, #x refers to the output AST
					BeforeStatementCompletion( "select" );
					ProcessQuery( (s!=null?((IASTNode)s.Tree):default(IASTNode)), retval.Tree );
					AfterStatementCompletion( "select" );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unionedQuery", 12);
			LeaveRule("unionedQuery", 12);
			LeaveRule_unionedQuery();
	    }
	 	DebugLocation(140, 1);
		} finally { DebugExitRule(GrammarFileName, "unionedQuery"); }
		return retval;

	}
	// $ANTLR end "unionedQuery"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderClause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderClause() {}
	// $ANTLR start "orderClause"
	// HqlSqlWalker.g:142:1: orderClause : ^( ORDER ( orderExprs | query ( ASCENDING | DESCENDING )? ) ) ;
	[GrammarRule("orderClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> orderClause()
	{
		EnterRule_orderClause();
		EnterRule("orderClause", 13);
		TraceIn("orderClause", 13);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode ORDER27 = default(IASTNode);
	    IASTNode set30 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> orderExprs28 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> query29 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode ORDER27_tree = default(IASTNode);
	    IASTNode set30_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "orderClause");
		DebugLocation(142, 1);
		try
		{
			// HqlSqlWalker.g:143:2: ( ^( ORDER ( orderExprs | query ( ASCENDING | DESCENDING )? ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:143:4: ^( ORDER ( orderExprs | query ( ASCENDING | DESCENDING )? ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(143, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(143, 6);

			_last = (IASTNode)input.LT(1);
			ORDER27=(IASTNode)Match(input,ORDER,Follow._ORDER_in_orderClause654); 
			ORDER27_tree = (IASTNode)adaptor.DupNode(ORDER27);


			root_1 = (IASTNode)adaptor.BecomeRoot(ORDER27_tree, root_1);


			DebugLocation(143, 12);
			 HandleClauseStart( ORDER ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(143, 44);
			// HqlSqlWalker.g:143:44: ( orderExprs | query ( ASCENDING | DESCENDING )? )
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, decisionCanBacktrack[17]);
			int LA17_1 = input.LA(1);

			if ((LA17_1==AGGREGATE||LA17_1==BAND||(LA17_1>=BNOT && LA17_1<=BOR)||(LA17_1>=BXOR && LA17_1<=CASE2)||LA17_1==COLON||LA17_1==COUNT||(LA17_1>=DIV && LA17_1<=DOT)||LA17_1==FALSE||LA17_1==IDENT||LA17_1==INDEX_OP||LA17_1==JAVA_CONSTANT||LA17_1==METHOD_CALL||LA17_1==MINUS||(LA17_1>=NULL && LA17_1<=NUM_LONG)||(LA17_1>=PARAM && LA17_1<=PLUS)||LA17_1==QUOTED_String||LA17_1==STAR||(LA17_1>=TRUE && LA17_1<=UNARY_MINUS)||LA17_1==VECTOR_EXPR||LA17_1==WEIRD_IDENT))
			{
				alt17 = 1;
			}
			else if ((LA17_1==QUERY||LA17_1==UNION))
			{
				alt17 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:143:45: orderExprs
				{
				DebugLocation(143, 45);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._orderExprs_in_orderClause659);
				orderExprs28=orderExprs();
				PopFollow();

				adaptor.AddChild(root_1, orderExprs28.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:143:58: query ( ASCENDING | DESCENDING )?
				{
				DebugLocation(143, 58);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._query_in_orderClause663);
				query29=query();
				PopFollow();

				adaptor.AddChild(root_1, query29.Tree);

				DebugLocation(143, 64);
				// HqlSqlWalker.g:143:64: ( ASCENDING | DESCENDING )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, decisionCanBacktrack[16]);
				int LA16_1 = input.LA(1);

				if ((LA16_1==ASCENDING||LA16_1==DESCENDING))
				{
					alt16 = 1;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:
					{
					DebugLocation(143, 64);

					_last = (IASTNode)input.LT(1);
					set30=(IASTNode)input.LT(1);
					if (input.LA(1)==ASCENDING||input.LA(1)==DESCENDING)
					{
						input.Consume();
						set30_tree = (IASTNode)adaptor.DupNode(set30);


						adaptor.AddChild(root_1, set30_tree);

						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}



					}
					break;

				}
				} finally { DebugExitSubRule(16); }


				}
				break;

			}
			} finally { DebugExitSubRule(17); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("orderClause", 13);
			LeaveRule("orderClause", 13);
			LeaveRule_orderClause();
	    }
	 	DebugLocation(144, 1);
		} finally { DebugExitRule(GrammarFileName, "orderClause"); }
		return retval;

	}
	// $ANTLR end "orderClause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderExprs() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderExprs() {}
	// $ANTLR start "orderExprs"
	// HqlSqlWalker.g:146:1: orderExprs : expr ( ASCENDING | DESCENDING )? ( orderExprs )? ;
	[GrammarRule("orderExprs")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> orderExprs()
	{
		EnterRule_orderExprs();
		EnterRule("orderExprs", 14);
		TraceIn("orderExprs", 14);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode set32 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> expr31 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> orderExprs33 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode set32_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "orderExprs");
		DebugLocation(146, 1);
		try
		{
			// HqlSqlWalker.g:147:2: ( expr ( ASCENDING | DESCENDING )? ( orderExprs )? )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:147:4: expr ( ASCENDING | DESCENDING )? ( orderExprs )?
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(147, 4);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._expr_in_orderExprs686);
			expr31=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr31.Tree);

			DebugLocation(147, 9);
			// HqlSqlWalker.g:147:9: ( ASCENDING | DESCENDING )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, decisionCanBacktrack[18]);
			int LA18_1 = input.LA(1);

			if ((LA18_1==ASCENDING||LA18_1==DESCENDING))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:
				{
				DebugLocation(147, 9);

				_last = (IASTNode)input.LT(1);
				set32=(IASTNode)input.LT(1);
				if (input.LA(1)==ASCENDING||input.LA(1)==DESCENDING)
				{
					input.Consume();
					set32_tree = (IASTNode)adaptor.DupNode(set32);


					adaptor.AddChild(root_0, set32_tree);

					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}



				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(147, 37);
			// HqlSqlWalker.g:147:37: ( orderExprs )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, decisionCanBacktrack[19]);
			int LA19_1 = input.LA(1);

			if ((LA19_1==AGGREGATE||LA19_1==BAND||(LA19_1>=BNOT && LA19_1<=BOR)||(LA19_1>=BXOR && LA19_1<=CASE2)||LA19_1==COLON||LA19_1==COUNT||(LA19_1>=DIV && LA19_1<=DOT)||LA19_1==FALSE||LA19_1==IDENT||LA19_1==INDEX_OP||LA19_1==JAVA_CONSTANT||LA19_1==METHOD_CALL||LA19_1==MINUS||(LA19_1>=NULL && LA19_1<=NUM_LONG)||(LA19_1>=PARAM && LA19_1<=PLUS)||LA19_1==QUOTED_String||LA19_1==STAR||(LA19_1>=TRUE && LA19_1<=UNARY_MINUS)||LA19_1==VECTOR_EXPR||LA19_1==WEIRD_IDENT))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:147:38: orderExprs
				{
				DebugLocation(147, 38);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._orderExprs_in_orderExprs700);
				orderExprs33=orderExprs();
				PopFollow();

				adaptor.AddChild(root_0, orderExprs33.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("orderExprs", 14);
			LeaveRule("orderExprs", 14);
			LeaveRule_orderExprs();
	    }
	 	DebugLocation(148, 1);
		} finally { DebugExitRule(GrammarFileName, "orderExprs"); }
		return retval;

	}
	// $ANTLR end "orderExprs"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_skipClause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_skipClause() {}
	// $ANTLR start "skipClause"
	// HqlSqlWalker.g:150:1: skipClause : ^( SKIP ( NUM_INT | parameter ) ) ;
	[GrammarRule("skipClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> skipClause()
	{
		EnterRule_skipClause();
		EnterRule("skipClause", 15);
		TraceIn("skipClause", 15);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode SKIP34 = default(IASTNode);
	    IASTNode NUM_INT35 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> parameter36 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode SKIP34_tree = default(IASTNode);
	    IASTNode NUM_INT35_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "skipClause");
		DebugLocation(150, 1);
		try
		{
			// HqlSqlWalker.g:151:2: ( ^( SKIP ( NUM_INT | parameter ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:151:4: ^( SKIP ( NUM_INT | parameter ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(151, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(151, 6);

			_last = (IASTNode)input.LT(1);
			SKIP34=(IASTNode)Match(input,SKIP,Follow._SKIP_in_skipClause714); 
			SKIP34_tree = (IASTNode)adaptor.DupNode(SKIP34);


			root_1 = (IASTNode)adaptor.BecomeRoot(SKIP34_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(151, 11);
			// HqlSqlWalker.g:151:11: ( NUM_INT | parameter )
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, decisionCanBacktrack[20]);
			int LA20_1 = input.LA(1);

			if ((LA20_1==NUM_INT))
			{
				alt20 = 1;
			}
			else if ((LA20_1==COLON||LA20_1==PARAM))
			{
				alt20 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:151:12: NUM_INT
				{
				DebugLocation(151, 12);

				_last = (IASTNode)input.LT(1);
				NUM_INT35=(IASTNode)Match(input,NUM_INT,Follow._NUM_INT_in_skipClause717); 
				NUM_INT35_tree = (IASTNode)adaptor.DupNode(NUM_INT35);


				adaptor.AddChild(root_1, NUM_INT35_tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:151:22: parameter
				{
				DebugLocation(151, 22);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._parameter_in_skipClause721);
				parameter36=parameter();
				PopFollow();

				adaptor.AddChild(root_1, parameter36.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(20); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("skipClause", 15);
			LeaveRule("skipClause", 15);
			LeaveRule_skipClause();
	    }
	 	DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "skipClause"); }
		return retval;

	}
	// $ANTLR end "skipClause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_takeClause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_takeClause() {}
	// $ANTLR start "takeClause"
	// HqlSqlWalker.g:154:1: takeClause : ^( TAKE ( NUM_INT | parameter ) ) ;
	[GrammarRule("takeClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> takeClause()
	{
		EnterRule_takeClause();
		EnterRule("takeClause", 16);
		TraceIn("takeClause", 16);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode TAKE37 = default(IASTNode);
	    IASTNode NUM_INT38 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> parameter39 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode TAKE37_tree = default(IASTNode);
	    IASTNode NUM_INT38_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "takeClause");
		DebugLocation(154, 1);
		try
		{
			// HqlSqlWalker.g:155:2: ( ^( TAKE ( NUM_INT | parameter ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:155:4: ^( TAKE ( NUM_INT | parameter ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(155, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(155, 6);

			_last = (IASTNode)input.LT(1);
			TAKE37=(IASTNode)Match(input,TAKE,Follow._TAKE_in_takeClause735); 
			TAKE37_tree = (IASTNode)adaptor.DupNode(TAKE37);


			root_1 = (IASTNode)adaptor.BecomeRoot(TAKE37_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(155, 11);
			// HqlSqlWalker.g:155:11: ( NUM_INT | parameter )
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, decisionCanBacktrack[21]);
			int LA21_1 = input.LA(1);

			if ((LA21_1==NUM_INT))
			{
				alt21 = 1;
			}
			else if ((LA21_1==COLON||LA21_1==PARAM))
			{
				alt21 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:155:12: NUM_INT
				{
				DebugLocation(155, 12);

				_last = (IASTNode)input.LT(1);
				NUM_INT38=(IASTNode)Match(input,NUM_INT,Follow._NUM_INT_in_takeClause738); 
				NUM_INT38_tree = (IASTNode)adaptor.DupNode(NUM_INT38);


				adaptor.AddChild(root_1, NUM_INT38_tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:155:22: parameter
				{
				DebugLocation(155, 22);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._parameter_in_takeClause742);
				parameter39=parameter();
				PopFollow();

				adaptor.AddChild(root_1, parameter39.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(21); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("takeClause", 16);
			LeaveRule("takeClause", 16);
			LeaveRule_takeClause();
	    }
	 	DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "takeClause"); }
		return retval;

	}
	// $ANTLR end "takeClause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_groupClause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_groupClause() {}
	// $ANTLR start "groupClause"
	// HqlSqlWalker.g:158:1: groupClause : ^( GROUP ( expr )+ ) ;
	[GrammarRule("groupClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> groupClause()
	{
		EnterRule_groupClause();
		EnterRule("groupClause", 17);
		TraceIn("groupClause", 17);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode GROUP40 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> expr41 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode GROUP40_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "groupClause");
		DebugLocation(158, 1);
		try
		{
			// HqlSqlWalker.g:159:2: ( ^( GROUP ( expr )+ ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:159:4: ^( GROUP ( expr )+ )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(159, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(159, 6);

			_last = (IASTNode)input.LT(1);
			GROUP40=(IASTNode)Match(input,GROUP,Follow._GROUP_in_groupClause756); 
			GROUP40_tree = (IASTNode)adaptor.DupNode(GROUP40);


			root_1 = (IASTNode)adaptor.BecomeRoot(GROUP40_tree, root_1);


			DebugLocation(159, 12);
			 HandleClauseStart( GROUP ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(159, 44);
			// HqlSqlWalker.g:159:44: ( expr )+
			int cnt22=0;
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, decisionCanBacktrack[22]);
				int LA22_1 = input.LA(1);

				if ((LA22_1==AGGREGATE||LA22_1==BAND||(LA22_1>=BNOT && LA22_1<=BOR)||(LA22_1>=BXOR && LA22_1<=CASE2)||LA22_1==COLON||LA22_1==COUNT||(LA22_1>=DIV && LA22_1<=DOT)||LA22_1==FALSE||LA22_1==IDENT||LA22_1==INDEX_OP||LA22_1==JAVA_CONSTANT||LA22_1==METHOD_CALL||LA22_1==MINUS||(LA22_1>=NULL && LA22_1<=NUM_LONG)||(LA22_1>=PARAM && LA22_1<=PLUS)||LA22_1==QUOTED_String||LA22_1==STAR||(LA22_1>=TRUE && LA22_1<=UNARY_MINUS)||LA22_1==VECTOR_EXPR||LA22_1==WEIRD_IDENT))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:159:45: expr
					{
					DebugLocation(159, 45);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._expr_in_groupClause761);
					expr41=expr();
					PopFollow();

					adaptor.AddChild(root_1, expr41.Tree);


					}
					break;

				default:
					if (cnt22 >= 1)
						goto loop22;

					EarlyExitException eee22 = new EarlyExitException( 22, input );
					DebugRecognitionException(eee22);
					throw eee22;
				}
				cnt22++;
			}
			loop22:
				;

			} finally { DebugExitSubRule(22); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("groupClause", 17);
			LeaveRule("groupClause", 17);
			LeaveRule_groupClause();
	    }
	 	DebugLocation(160, 1);
		} finally { DebugExitRule(GrammarFileName, "groupClause"); }
		return retval;

	}
	// $ANTLR end "groupClause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_havingClause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_havingClause() {}
	// $ANTLR start "havingClause"
	// HqlSqlWalker.g:162:1: havingClause : ^( HAVING logicalExpr ) ;
	[GrammarRule("havingClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> havingClause()
	{
		EnterRule_havingClause();
		EnterRule("havingClause", 18);
		TraceIn("havingClause", 18);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode HAVING42 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr43 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode HAVING42_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "havingClause");
		DebugLocation(162, 1);
		try
		{
			// HqlSqlWalker.g:163:2: ( ^( HAVING logicalExpr ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:163:4: ^( HAVING logicalExpr )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(163, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(163, 6);

			_last = (IASTNode)input.LT(1);
			HAVING42=(IASTNode)Match(input,HAVING,Follow._HAVING_in_havingClause777); 
			HAVING42_tree = (IASTNode)adaptor.DupNode(HAVING42);


			root_1 = (IASTNode)adaptor.BecomeRoot(HAVING42_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(163, 13);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._logicalExpr_in_havingClause779);
			logicalExpr43=logicalExpr();
			PopFollow();

			adaptor.AddChild(root_1, logicalExpr43.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("havingClause", 18);
			LeaveRule("havingClause", 18);
			LeaveRule_havingClause();
	    }
	 	DebugLocation(164, 1);
		} finally { DebugExitRule(GrammarFileName, "havingClause"); }
		return retval;

	}
	// $ANTLR end "havingClause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_selectClause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_selectClause() {}
	// $ANTLR start "selectClause"
	// HqlSqlWalker.g:166:1: selectClause : ^( SELECT (d= DISTINCT )? x= selectExprList ) -> ^( SELECT_CLAUSE[\"{select clause}\"] ( $d)? $x) ;
	[GrammarRule("selectClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> selectClause()
	{
		EnterRule_selectClause();
		EnterRule("selectClause", 19);
		TraceIn("selectClause", 19);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode d = default(IASTNode);
	    IASTNode SELECT44 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> x = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode d_tree = default(IASTNode);
	    IASTNode SELECT44_tree = default(IASTNode);
	    RewriteRuleNodeStream stream_SELECT=new RewriteRuleNodeStream(adaptor,"token SELECT");
	    RewriteRuleNodeStream stream_DISTINCT=new RewriteRuleNodeStream(adaptor,"token DISTINCT");
	    RewriteRuleSubtreeStream stream_selectExprList=new RewriteRuleSubtreeStream(adaptor,"rule selectExprList");
		try { DebugEnterRule(GrammarFileName, "selectClause");
		DebugLocation(166, 1);
		try
		{
			// HqlSqlWalker.g:167:2: ( ^( SELECT (d= DISTINCT )? x= selectExprList ) -> ^( SELECT_CLAUSE[\"{select clause}\"] ( $d)? $x) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:167:4: ^( SELECT (d= DISTINCT )? x= selectExprList )
			{
			DebugLocation(167, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(167, 6);

			_last = (IASTNode)input.LT(1);
			SELECT44=(IASTNode)Match(input,SELECT,Follow._SELECT_in_selectClause793); 
			 
			stream_SELECT.Add(SELECT44);


			DebugLocation(167, 13);
			 HandleClauseStart( SELECT ); BeforeSelectClause(); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(167, 68);
			// HqlSqlWalker.g:167:68: (d= DISTINCT )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, decisionCanBacktrack[23]);
			int LA23_1 = input.LA(1);

			if ((LA23_1==DISTINCT))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:167:69: d= DISTINCT
				{
				DebugLocation(167, 70);

				_last = (IASTNode)input.LT(1);
				d=(IASTNode)Match(input,DISTINCT,Follow._DISTINCT_in_selectClause800); 
				 
				stream_DISTINCT.Add(d);


				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(167, 83);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._selectExprList_in_selectClause806);
			x=selectExprList();
			PopFollow();

			stream_selectExprList.Add(x.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: d, x
			// token labels: d
			// rule labels: x, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_d=new RewriteRuleNodeStream(adaptor,"token d",d);
			RewriteRuleSubtreeStream stream_x=new RewriteRuleSubtreeStream(adaptor,"rule x",x!=null?x.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 168:2: -> ^( SELECT_CLAUSE[\"{select clause}\"] ( $d)? $x)
			{
				DebugLocation(168, 5);
				// HqlSqlWalker.g:168:5: ^( SELECT_CLAUSE[\"{select clause}\"] ( $d)? $x)
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(168, 7);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(SELECT_CLAUSE, "{select clause}"), root_1);

				DebugLocation(168, 41);
				// HqlSqlWalker.g:168:41: ( $d)?
				if (stream_d.HasNext)
				{
					DebugLocation(168, 41);
					adaptor.AddChild(root_1, stream_d.NextNode());

				}
				stream_d.Reset();
				DebugLocation(168, 45);
				adaptor.AddChild(root_1, stream_x.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("selectClause", 19);
			LeaveRule("selectClause", 19);
			LeaveRule_selectClause();
	    }
	 	DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "selectClause"); }
		return retval;

	}
	// $ANTLR end "selectClause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_selectExprList() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_selectExprList() {}
	// $ANTLR start "selectExprList"
	// HqlSqlWalker.g:171:1: selectExprList : ( selectExpr | aliasedSelectExpr )+ ;
	[GrammarRule("selectExprList")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> selectExprList()
	{
		EnterRule_selectExprList();
		EnterRule("selectExprList", 20);
		TraceIn("selectExprList", 20);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    AstTreeRuleReturnScope<IASTNode, IASTNode> selectExpr45 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> aliasedSelectExpr46 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);



	    		bool oldInSelect = _inSelect;
	    		_inSelect = true;
	    	
		try { DebugEnterRule(GrammarFileName, "selectExprList");
		DebugLocation(171, 1);
		try
		{
			// HqlSqlWalker.g:175:2: ( ( selectExpr | aliasedSelectExpr )+ )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:175:4: ( selectExpr | aliasedSelectExpr )+
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(175, 4);
			// HqlSqlWalker.g:175:4: ( selectExpr | aliasedSelectExpr )+
			int cnt24=0;
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=3;
				try { DebugEnterDecision(24, decisionCanBacktrack[24]);
				int LA24_1 = input.LA(1);

				if ((LA24_1==AGGREGATE||LA24_1==ALL||LA24_1==BAND||(LA24_1>=BNOT && LA24_1<=BOR)||(LA24_1>=BXOR && LA24_1<=CASE2)||LA24_1==COLON||(LA24_1>=CONSTRUCTOR && LA24_1<=COUNT)||(LA24_1>=DIV && LA24_1<=ELEMENTS)||LA24_1==IDENT||LA24_1==INDICES||LA24_1==METHOD_CALL||LA24_1==MINUS||(LA24_1>=NUM_DECIMAL && LA24_1<=OBJECT)||(LA24_1>=PARAM && LA24_1<=PLUS)||(LA24_1>=QUERY && LA24_1<=QUOTED_String)||LA24_1==STAR||LA24_1==UNARY_MINUS||LA24_1==UNION||LA24_1==WEIRD_IDENT))
				{
					alt24 = 1;
				}
				else if ((LA24_1==AS))
				{
					alt24 = 2;
				}


				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:175:6: selectExpr
					{
					DebugLocation(175, 6);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._selectExpr_in_selectExprList841);
					selectExpr45=selectExpr();
					PopFollow();

					adaptor.AddChild(root_0, selectExpr45.Tree);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// HqlSqlWalker.g:175:19: aliasedSelectExpr
					{
					DebugLocation(175, 19);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._aliasedSelectExpr_in_selectExprList845);
					aliasedSelectExpr46=aliasedSelectExpr();
					PopFollow();

					adaptor.AddChild(root_0, aliasedSelectExpr46.Tree);


					}
					break;

				default:
					if (cnt24 >= 1)
						goto loop24;

					EarlyExitException eee24 = new EarlyExitException( 24, input );
					DebugRecognitionException(eee24);
					throw eee24;
				}
				cnt24++;
			}
			loop24:
				;

			} finally { DebugExitSubRule(24); }

			DebugLocation(175, 40);

					_inSelect = oldInSelect;
				

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("selectExprList", 20);
			LeaveRule("selectExprList", 20);
			LeaveRule_selectExprList();
	    }
	 	DebugLocation(178, 1);
		} finally { DebugExitRule(GrammarFileName, "selectExprList"); }
		return retval;

	}
	// $ANTLR end "selectExprList"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_aliasedSelectExpr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_aliasedSelectExpr() {}
	// $ANTLR start "aliasedSelectExpr"
	// HqlSqlWalker.g:180:1: aliasedSelectExpr : ^( AS se= selectExpr i= identifier ) ;
	[GrammarRule("aliasedSelectExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> aliasedSelectExpr()
	{
		EnterRule_aliasedSelectExpr();
		EnterRule("aliasedSelectExpr", 21);
		TraceIn("aliasedSelectExpr", 21);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode AS47 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> se = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> i = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode AS47_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "aliasedSelectExpr");
		DebugLocation(180, 1);
		try
		{
			// HqlSqlWalker.g:185:2: ( ^( AS se= selectExpr i= identifier ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:185:4: ^( AS se= selectExpr i= identifier )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(185, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(185, 6);

			_last = (IASTNode)input.LT(1);
			AS47=(IASTNode)Match(input,AS,Follow._AS_in_aliasedSelectExpr869); 
			AS47_tree = (IASTNode)adaptor.DupNode(AS47);


			root_1 = (IASTNode)adaptor.BecomeRoot(AS47_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(185, 11);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._selectExpr_in_aliasedSelectExpr873);
			se=selectExpr();
			PopFollow();

			adaptor.AddChild(root_1, se.Tree);

			DebugLocation(185, 24);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._identifier_in_aliasedSelectExpr877);
			i=identifier();
			PopFollow();

			adaptor.AddChild(root_1, i.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				    SetAlias((se!=null?((IASTNode)se.Tree):default(IASTNode)),(i!=null?((IASTNode)i.Tree):default(IASTNode)));
				    retval.Tree =  (se!=null?((IASTNode)se.Tree):default(IASTNode));
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("aliasedSelectExpr", 21);
			LeaveRule("aliasedSelectExpr", 21);
			LeaveRule_aliasedSelectExpr();
	    }
	 	DebugLocation(186, 1);
		} finally { DebugExitRule(GrammarFileName, "aliasedSelectExpr"); }
		return retval;

	}
	// $ANTLR end "aliasedSelectExpr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_selectExpr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_selectExpr() {}
	// $ANTLR start "selectExpr"
	// HqlSqlWalker.g:188:1: selectExpr : (p= propertyRef | ^( ALL ar2= aliasRef ) | ^( OBJECT ar3= aliasRef ) |con= constructor | functionCall | parameter | count | collectionFunction | literal | arithmeticExpr | query );
	[GrammarRule("selectExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> selectExpr()
	{
		EnterRule_selectExpr();
		EnterRule("selectExpr", 22);
		TraceIn("selectExpr", 22);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode ALL48 = default(IASTNode);
	    IASTNode OBJECT49 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> p = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> ar2 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> ar3 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> con = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> functionCall50 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> parameter51 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> count52 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunction53 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> literal54 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> arithmeticExpr55 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> query56 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode ALL48_tree = default(IASTNode);
	    IASTNode OBJECT49_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "selectExpr");
		DebugLocation(188, 1);
		try
		{
			// HqlSqlWalker.g:189:2: (p= propertyRef | ^( ALL ar2= aliasRef ) | ^( OBJECT ar3= aliasRef ) |con= constructor | functionCall | parameter | count | collectionFunction | literal | arithmeticExpr | query )
			int alt25=11;
			try { DebugEnterDecision(25, decisionCanBacktrack[25]);
			switch (input.LA(1))
			{
			case DOT:
			case IDENT:
			case WEIRD_IDENT:
				{
				alt25 = 1;
				}
				break;
			case ALL:
				{
				alt25 = 2;
				}
				break;
			case OBJECT:
				{
				alt25 = 3;
				}
				break;
			case CONSTRUCTOR:
				{
				alt25 = 4;
				}
				break;
			case AGGREGATE:
			case METHOD_CALL:
				{
				alt25 = 5;
				}
				break;
			case COLON:
			case PARAM:
				{
				alt25 = 6;
				}
				break;
			case COUNT:
				{
				alt25 = 7;
				}
				break;
			case ELEMENTS:
			case INDICES:
				{
				alt25 = 8;
				}
				break;
			case NUM_DECIMAL:
			case NUM_DOUBLE:
			case NUM_FLOAT:
			case NUM_INT:
			case NUM_LONG:
			case QUOTED_String:
				{
				alt25 = 9;
				}
				break;
			case BAND:
			case BNOT:
			case BOR:
			case BXOR:
			case CASE:
			case CASE2:
			case DIV:
			case MINUS:
			case PLUS:
			case STAR:
			case UNARY_MINUS:
				{
				alt25 = 10;
				}
				break;
			case QUERY:
			case UNION:
				{
				alt25 = 11;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 25, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:189:4: p= propertyRef
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(189, 5);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._propertyRef_in_selectExpr892);
				p=propertyRef();
				PopFollow();

				adaptor.AddChild(root_0, p.Tree);

				DebugLocation(189, 22);
				 ResolveSelectExpression((p!=null?((IASTNode)p.Tree):default(IASTNode))); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:190:4: ^( ALL ar2= aliasRef )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(190, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(190, 6);

				_last = (IASTNode)input.LT(1);
				ALL48=(IASTNode)Match(input,ALL,Follow._ALL_in_selectExpr904); 
				ALL48_tree = (IASTNode)adaptor.DupNode(ALL48);


				root_1 = (IASTNode)adaptor.BecomeRoot(ALL48_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(190, 13);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._aliasRef_in_selectExpr908);
				ar2=aliasRef();
				PopFollow();

				adaptor.AddChild(root_1, ar2.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(190, 27);
				 ResolveSelectExpression((ar2!=null?((IASTNode)ar2.Tree):default(IASTNode))); retval.Tree =  (ar2!=null?((IASTNode)ar2.Tree):default(IASTNode)); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:191:4: ^( OBJECT ar3= aliasRef )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(191, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(191, 6);

				_last = (IASTNode)input.LT(1);
				OBJECT49=(IASTNode)Match(input,OBJECT,Follow._OBJECT_in_selectExpr920); 
				OBJECT49_tree = (IASTNode)adaptor.DupNode(OBJECT49);


				root_1 = (IASTNode)adaptor.BecomeRoot(OBJECT49_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(191, 16);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._aliasRef_in_selectExpr924);
				ar3=aliasRef();
				PopFollow();

				adaptor.AddChild(root_1, ar3.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(191, 28);
				 ResolveSelectExpression((ar3!=null?((IASTNode)ar3.Tree):default(IASTNode))); retval.Tree =  (ar3!=null?((IASTNode)ar3.Tree):default(IASTNode)); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:192:4: con= constructor
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(192, 7);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._constructor_in_selectExpr935);
				con=constructor();
				PopFollow();

				adaptor.AddChild(root_0, con.Tree);

				DebugLocation(192, 24);
				 ProcessConstructor((con!=null?((IASTNode)con.Tree):default(IASTNode))); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:193:4: functionCall
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(193, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._functionCall_in_selectExpr946);
				functionCall50=functionCall();
				PopFollow();

				adaptor.AddChild(root_0, functionCall50.Tree);


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// HqlSqlWalker.g:194:4: parameter
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(194, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._parameter_in_selectExpr951);
				parameter51=parameter();
				PopFollow();

				adaptor.AddChild(root_0, parameter51.Tree);


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// HqlSqlWalker.g:195:4: count
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(195, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._count_in_selectExpr956);
				count52=count();
				PopFollow();

				adaptor.AddChild(root_0, count52.Tree);


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// HqlSqlWalker.g:196:4: collectionFunction
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(196, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._collectionFunction_in_selectExpr961);
				collectionFunction53=collectionFunction();
				PopFollow();

				adaptor.AddChild(root_0, collectionFunction53.Tree);


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// HqlSqlWalker.g:197:4: literal
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(197, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._literal_in_selectExpr969);
				literal54=literal();
				PopFollow();

				adaptor.AddChild(root_0, literal54.Tree);


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// HqlSqlWalker.g:198:4: arithmeticExpr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(198, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._arithmeticExpr_in_selectExpr974);
				arithmeticExpr55=arithmeticExpr();
				PopFollow();

				adaptor.AddChild(root_0, arithmeticExpr55.Tree);


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// HqlSqlWalker.g:199:4: query
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(199, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._query_in_selectExpr979);
				query56=query();
				PopFollow();

				adaptor.AddChild(root_0, query56.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("selectExpr", 22);
			LeaveRule("selectExpr", 22);
			LeaveRule_selectExpr();
	    }
	 	DebugLocation(200, 1);
		} finally { DebugExitRule(GrammarFileName, "selectExpr"); }
		return retval;

	}
	// $ANTLR end "selectExpr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_count() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_count() {}
	// $ANTLR start "count"
	// HqlSqlWalker.g:202:1: count : ^( COUNT ( DISTINCT | ALL )? ( aggregateExpr | ROW_STAR ) ) ;
	[GrammarRule("count")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> count()
	{
		EnterRule_count();
		EnterRule("count", 23);
		TraceIn("count", 23);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode COUNT57 = default(IASTNode);
	    IASTNode set58 = default(IASTNode);
	    IASTNode ROW_STAR60 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> aggregateExpr59 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode COUNT57_tree = default(IASTNode);
	    IASTNode set58_tree = default(IASTNode);
	    IASTNode ROW_STAR60_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "count");
		DebugLocation(202, 1);
		try
		{
			// HqlSqlWalker.g:203:2: ( ^( COUNT ( DISTINCT | ALL )? ( aggregateExpr | ROW_STAR ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:203:4: ^( COUNT ( DISTINCT | ALL )? ( aggregateExpr | ROW_STAR ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(203, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(203, 6);

			_last = (IASTNode)input.LT(1);
			COUNT57=(IASTNode)Match(input,COUNT,Follow._COUNT_in_count991); 
			COUNT57_tree = (IASTNode)adaptor.DupNode(COUNT57);


			root_1 = (IASTNode)adaptor.BecomeRoot(COUNT57_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(203, 12);
			// HqlSqlWalker.g:203:12: ( DISTINCT | ALL )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, decisionCanBacktrack[26]);
			int LA26_1 = input.LA(1);

			if ((LA26_1==ALL||LA26_1==DISTINCT))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:
				{
				DebugLocation(203, 12);

				_last = (IASTNode)input.LT(1);
				set58=(IASTNode)input.LT(1);
				if (input.LA(1)==ALL||input.LA(1)==DISTINCT)
				{
					input.Consume();
					set58_tree = (IASTNode)adaptor.DupNode(set58);


					adaptor.AddChild(root_1, set58_tree);

					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}



				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(203, 32);
			// HqlSqlWalker.g:203:32: ( aggregateExpr | ROW_STAR )
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, decisionCanBacktrack[27]);
			int LA27_1 = input.LA(1);

			if ((LA27_1==AGGREGATE||LA27_1==BAND||(LA27_1>=BNOT && LA27_1<=BOR)||(LA27_1>=BXOR && LA27_1<=CASE2)||LA27_1==COLON||LA27_1==COUNT||(LA27_1>=DIV && LA27_1<=ELEMENTS)||LA27_1==FALSE||LA27_1==IDENT||(LA27_1>=INDEX_OP && LA27_1<=INDICES)||LA27_1==JAVA_CONSTANT||LA27_1==METHOD_CALL||LA27_1==MINUS||(LA27_1>=NULL && LA27_1<=NUM_LONG)||(LA27_1>=PARAM && LA27_1<=PLUS)||LA27_1==QUOTED_String||LA27_1==STAR||(LA27_1>=TRUE && LA27_1<=UNARY_MINUS)||LA27_1==VECTOR_EXPR||LA27_1==WEIRD_IDENT))
			{
				alt27 = 1;
			}
			else if ((LA27_1==ROW_STAR))
			{
				alt27 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 27, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:203:34: aggregateExpr
				{
				DebugLocation(203, 34);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._aggregateExpr_in_count1006);
				aggregateExpr59=aggregateExpr();
				PopFollow();

				adaptor.AddChild(root_1, aggregateExpr59.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:203:50: ROW_STAR
				{
				DebugLocation(203, 50);

				_last = (IASTNode)input.LT(1);
				ROW_STAR60=(IASTNode)Match(input,ROW_STAR,Follow._ROW_STAR_in_count1010); 
				ROW_STAR60_tree = (IASTNode)adaptor.DupNode(ROW_STAR60);


				adaptor.AddChild(root_1, ROW_STAR60_tree);


				}
				break;

			}
			} finally { DebugExitSubRule(27); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("count", 23);
			LeaveRule("count", 23);
			LeaveRule_count();
	    }
	 	DebugLocation(204, 1);
		} finally { DebugExitRule(GrammarFileName, "count"); }
		return retval;

	}
	// $ANTLR end "count"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_constructor() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_constructor() {}
	// $ANTLR start "constructor"
	// HqlSqlWalker.g:206:1: constructor : ^( CONSTRUCTOR path ( selectExpr | aliasedSelectExpr )* ) ;
	[GrammarRule("constructor")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> constructor()
	{
		EnterRule_constructor();
		EnterRule("constructor", 24);
		TraceIn("constructor", 24);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode CONSTRUCTOR61 = default(IASTNode);
	    HqlSqlWalker.path_return path62 = default(HqlSqlWalker.path_return);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> selectExpr63 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> aliasedSelectExpr64 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode CONSTRUCTOR61_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "constructor");
		DebugLocation(206, 1);
		try
		{
			// HqlSqlWalker.g:207:2: ( ^( CONSTRUCTOR path ( selectExpr | aliasedSelectExpr )* ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:207:4: ^( CONSTRUCTOR path ( selectExpr | aliasedSelectExpr )* )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(207, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(207, 6);

			_last = (IASTNode)input.LT(1);
			CONSTRUCTOR61=(IASTNode)Match(input,CONSTRUCTOR,Follow._CONSTRUCTOR_in_constructor1026); 
			CONSTRUCTOR61_tree = (IASTNode)adaptor.DupNode(CONSTRUCTOR61);


			root_1 = (IASTNode)adaptor.BecomeRoot(CONSTRUCTOR61_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(207, 18);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._path_in_constructor1028);
			path62=path();
			PopFollow();

			adaptor.AddChild(root_1, path62.Tree);

			DebugLocation(207, 23);
			// HqlSqlWalker.g:207:23: ( selectExpr | aliasedSelectExpr )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=3;
				try { DebugEnterDecision(28, decisionCanBacktrack[28]);
				int LA28_1 = input.LA(1);

				if ((LA28_1==AGGREGATE||LA28_1==ALL||LA28_1==BAND||(LA28_1>=BNOT && LA28_1<=BOR)||(LA28_1>=BXOR && LA28_1<=CASE2)||LA28_1==COLON||(LA28_1>=CONSTRUCTOR && LA28_1<=COUNT)||(LA28_1>=DIV && LA28_1<=ELEMENTS)||LA28_1==IDENT||LA28_1==INDICES||LA28_1==METHOD_CALL||LA28_1==MINUS||(LA28_1>=NUM_DECIMAL && LA28_1<=OBJECT)||(LA28_1>=PARAM && LA28_1<=PLUS)||(LA28_1>=QUERY && LA28_1<=QUOTED_String)||LA28_1==STAR||LA28_1==UNARY_MINUS||LA28_1==UNION||LA28_1==WEIRD_IDENT))
				{
					alt28 = 1;
				}
				else if ((LA28_1==AS))
				{
					alt28 = 2;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:207:25: selectExpr
					{
					DebugLocation(207, 25);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._selectExpr_in_constructor1032);
					selectExpr63=selectExpr();
					PopFollow();

					adaptor.AddChild(root_1, selectExpr63.Tree);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// HqlSqlWalker.g:207:38: aliasedSelectExpr
					{
					DebugLocation(207, 38);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._aliasedSelectExpr_in_constructor1036);
					aliasedSelectExpr64=aliasedSelectExpr();
					PopFollow();

					adaptor.AddChild(root_1, aliasedSelectExpr64.Tree);


					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("constructor", 24);
			LeaveRule("constructor", 24);
			LeaveRule_constructor();
	    }
	 	DebugLocation(208, 1);
		} finally { DebugExitRule(GrammarFileName, "constructor"); }
		return retval;

	}
	// $ANTLR end "constructor"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_aggregateExpr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_aggregateExpr() {}
	// $ANTLR start "aggregateExpr"
	// HqlSqlWalker.g:210:1: aggregateExpr : ( expr | collectionFunction );
	[GrammarRule("aggregateExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> aggregateExpr()
	{
		EnterRule_aggregateExpr();
		EnterRule("aggregateExpr", 25);
		TraceIn("aggregateExpr", 25);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    AstTreeRuleReturnScope<IASTNode, IASTNode> expr65 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunction66 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);


		try { DebugEnterRule(GrammarFileName, "aggregateExpr");
		DebugLocation(210, 1);
		try
		{
			// HqlSqlWalker.g:211:2: ( expr | collectionFunction )
			int alt29=2;
			try { DebugEnterDecision(29, decisionCanBacktrack[29]);
			int LA29_1 = input.LA(1);

			if ((LA29_1==AGGREGATE||LA29_1==BAND||(LA29_1>=BNOT && LA29_1<=BOR)||(LA29_1>=BXOR && LA29_1<=CASE2)||LA29_1==COLON||LA29_1==COUNT||(LA29_1>=DIV && LA29_1<=DOT)||LA29_1==FALSE||LA29_1==IDENT||LA29_1==INDEX_OP||LA29_1==JAVA_CONSTANT||LA29_1==METHOD_CALL||LA29_1==MINUS||(LA29_1>=NULL && LA29_1<=NUM_LONG)||(LA29_1>=PARAM && LA29_1<=PLUS)||LA29_1==QUOTED_String||LA29_1==STAR||(LA29_1>=TRUE && LA29_1<=UNARY_MINUS)||LA29_1==VECTOR_EXPR||LA29_1==WEIRD_IDENT))
			{
				alt29 = 1;
			}
			else if ((LA29_1==ELEMENTS||LA29_1==INDICES))
			{
				alt29 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 29, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:211:4: expr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(211, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._expr_in_aggregateExpr1052);
				expr65=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr65.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:212:4: collectionFunction
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(212, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._collectionFunction_in_aggregateExpr1058);
				collectionFunction66=collectionFunction();
				PopFollow();

				adaptor.AddChild(root_0, collectionFunction66.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("aggregateExpr", 25);
			LeaveRule("aggregateExpr", 25);
			LeaveRule_aggregateExpr();
	    }
	 	DebugLocation(213, 1);
		} finally { DebugExitRule(GrammarFileName, "aggregateExpr"); }
		return retval;

	}
	// $ANTLR end "aggregateExpr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_fromClause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_fromClause() {}
	// $ANTLR start "fromClause"
	// HqlSqlWalker.g:216:1: fromClause : ^(f= FROM fromElementList ) ;
	[GrammarRule("fromClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> fromClause()
	{
		EnterRule_fromClause();
		EnterRule("fromClause", 26);
		TraceIn("fromClause", 26);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode f = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> fromElementList67 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode f_tree = default(IASTNode);


	    		// NOTE: This references the INPUT AST! (see http://www.antlr.org/doc/trees.html#Action Translation)
	    		// the ouput AST (#fromClause) has not been built yet.
	    		PrepareFromClauseInputTree((IASTNode) input.LT(1), input);
	    	
		try { DebugEnterRule(GrammarFileName, "fromClause");
		DebugLocation(216, 1);
		try
		{
			// HqlSqlWalker.g:222:2: ( ^(f= FROM fromElementList ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:222:4: ^(f= FROM fromElementList )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(222, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(222, 7);

			_last = (IASTNode)input.LT(1);
			f=(IASTNode)Match(input,FROM,Follow._FROM_in_fromClause1078); 
			f_tree = (IASTNode)adaptor.DupNode(f);


			root_1 = (IASTNode)adaptor.BecomeRoot(f_tree, root_1);


			DebugLocation(222, 13);
			 PushFromClause(f_tree); HandleClauseStart( FROM ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(222, 69);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._fromElementList_in_fromClause1082);
			fromElementList67=fromElementList();
			PopFollow();

			adaptor.AddChild(root_1, fromElementList67.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fromClause", 26);
			LeaveRule("fromClause", 26);
			LeaveRule_fromClause();
	    }
	 	DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "fromClause"); }
		return retval;

	}
	// $ANTLR end "fromClause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_fromElementList() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_fromElementList() {}
	// $ANTLR start "fromElementList"
	// HqlSqlWalker.g:225:1: fromElementList : ( fromElement )+ ;
	[GrammarRule("fromElementList")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> fromElementList()
	{
		EnterRule_fromElementList();
		EnterRule("fromElementList", 27);
		TraceIn("fromElementList", 27);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    AstTreeRuleReturnScope<IASTNode, IASTNode> fromElement68 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);



	    		bool oldInFrom = _inFrom;
	    		_inFrom = true;
	    		
		try { DebugEnterRule(GrammarFileName, "fromElementList");
		DebugLocation(225, 1);
		try
		{
			// HqlSqlWalker.g:229:2: ( ( fromElement )+ )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:229:4: ( fromElement )+
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(229, 4);
			// HqlSqlWalker.g:229:4: ( fromElement )+
			int cnt30=0;
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, decisionCanBacktrack[30]);
				int LA30_1 = input.LA(1);

				if ((LA30_1==FILTER_ENTITY||LA30_1==JOIN||LA30_1==RANGE))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:229:5: fromElement
					{
					DebugLocation(229, 5);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._fromElement_in_fromElementList1100);
					fromElement68=fromElement();
					PopFollow();

					adaptor.AddChild(root_0, fromElement68.Tree);


					}
					break;

				default:
					if (cnt30 >= 1)
						goto loop30;

					EarlyExitException eee30 = new EarlyExitException( 30, input );
					DebugRecognitionException(eee30);
					throw eee30;
				}
				cnt30++;
			}
			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(229, 19);

					_inFrom = oldInFrom;
					

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fromElementList", 27);
			LeaveRule("fromElementList", 27);
			LeaveRule_fromElementList();
	    }
	 	DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "fromElementList"); }
		return retval;

	}
	// $ANTLR end "fromElementList"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_fromElement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_fromElement() {}
	// $ANTLR start "fromElement"
	// HqlSqlWalker.g:234:1: fromElement : ( ^( RANGE p= path (a= ALIAS )? (pf= FETCH )? ) -> {fromElement != null}? ^() ->|je= joinElement ->|fe= FILTER_ENTITY a3= ALIAS -> ^() );
	[GrammarRule("fromElement")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> fromElement()
	{
		EnterRule_fromElement();
		EnterRule("fromElement", 28);
		TraceIn("fromElement", 28);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode a = default(IASTNode);
	    IASTNode pf = default(IASTNode);
	    IASTNode fe = default(IASTNode);
	    IASTNode a3 = default(IASTNode);
	    IASTNode RANGE69 = default(IASTNode);
	    HqlSqlWalker.path_return p = default(HqlSqlWalker.path_return);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> je = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode a_tree = default(IASTNode);
	    IASTNode pf_tree = default(IASTNode);
	    IASTNode fe_tree = default(IASTNode);
	    IASTNode a3_tree = default(IASTNode);
	    IASTNode RANGE69_tree = default(IASTNode);
	    RewriteRuleNodeStream stream_RANGE=new RewriteRuleNodeStream(adaptor,"token RANGE");
	    RewriteRuleNodeStream stream_ALIAS=new RewriteRuleNodeStream(adaptor,"token ALIAS");
	    RewriteRuleNodeStream stream_FETCH=new RewriteRuleNodeStream(adaptor,"token FETCH");
	    RewriteRuleNodeStream stream_FILTER_ENTITY=new RewriteRuleNodeStream(adaptor,"token FILTER_ENTITY");
	    RewriteRuleSubtreeStream stream_path=new RewriteRuleSubtreeStream(adaptor,"rule path");
	    RewriteRuleSubtreeStream stream_joinElement=new RewriteRuleSubtreeStream(adaptor,"rule joinElement");

	       IASTNode fromElement = null;

		try { DebugEnterRule(GrammarFileName, "fromElement");
		DebugLocation(234, 1);
		try
		{
			// HqlSqlWalker.g:239:2: ( ^( RANGE p= path (a= ALIAS )? (pf= FETCH )? ) -> {fromElement != null}? ^() ->|je= joinElement ->|fe= FILTER_ENTITY a3= ALIAS -> ^() )
			int alt33=3;
			try { DebugEnterDecision(33, decisionCanBacktrack[33]);
			switch (input.LA(1))
			{
			case RANGE:
				{
				alt33 = 1;
				}
				break;
			case JOIN:
				{
				alt33 = 2;
				}
				break;
			case FILTER_ENTITY:
				{
				alt33 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 33, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:239:4: ^( RANGE p= path (a= ALIAS )? (pf= FETCH )? )
				{
				DebugLocation(239, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(239, 6);

				_last = (IASTNode)input.LT(1);
				RANGE69=(IASTNode)Match(input,RANGE,Follow._RANGE_in_fromElement1125); 
				 
				stream_RANGE.Add(RANGE69);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(239, 13);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._path_in_fromElement1129);
				p=path();
				PopFollow();

				stream_path.Add(p.Tree);

				DebugLocation(239, 19);
				// HqlSqlWalker.g:239:19: (a= ALIAS )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, decisionCanBacktrack[31]);
				int LA31_1 = input.LA(1);

				if ((LA31_1==ALIAS))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:239:20: a= ALIAS
					{
					DebugLocation(239, 21);

					_last = (IASTNode)input.LT(1);
					a=(IASTNode)Match(input,ALIAS,Follow._ALIAS_in_fromElement1134); 
					 
					stream_ALIAS.Add(a);


					}
					break;

				}
				} finally { DebugExitSubRule(31); }

				DebugLocation(239, 30);
				// HqlSqlWalker.g:239:30: (pf= FETCH )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, decisionCanBacktrack[32]);
				int LA32_1 = input.LA(1);

				if ((LA32_1==FETCH))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:239:31: pf= FETCH
					{
					DebugLocation(239, 33);

					_last = (IASTNode)input.LT(1);
					pf=(IASTNode)Match(input,FETCH,Follow._FETCH_in_fromElement1141); 
					 
					stream_FETCH.Add(pf);


					}
					break;

				}
				} finally { DebugExitSubRule(32); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(239, 44);
				 fromElement = CreateFromElement((p!=null?p.p:default(String)), (p!=null?((IASTNode)p.Tree):default(IASTNode)), a, pf); 


				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 240:3: -> {fromElement != null}? ^()
				if (fromElement != null)
				{
					DebugLocation(240, 29);
					// HqlSqlWalker.g:240:29: ^()
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(240, 31);
					root_1 = (IASTNode)adaptor.BecomeRoot(fromElement, root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 241:3: ->
				{
					DebugLocation(242, 2);
					root_0 = null;
				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:242:4: je= joinElement
				{
				DebugLocation(242, 6);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._joinElement_in_fromElement1168);
				je=joinElement();
				PopFollow();

				stream_joinElement.Add(je.Tree);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 243:3: ->
				{
					DebugLocation(245, 2);
					root_0 = null;
				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:245:4: fe= FILTER_ENTITY a3= ALIAS
				{
				DebugLocation(245, 6);

				_last = (IASTNode)input.LT(1);
				fe=(IASTNode)Match(input,FILTER_ENTITY,Follow._FILTER_ENTITY_in_fromElement1183); 
				 
				stream_FILTER_ENTITY.Add(fe);

				DebugLocation(245, 23);

				_last = (IASTNode)input.LT(1);
				a3=(IASTNode)Match(input,ALIAS,Follow._ALIAS_in_fromElement1187); 
				 
				stream_ALIAS.Add(a3);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 246:3: -> ^()
				{
					DebugLocation(246, 6);
					// HqlSqlWalker.g:246:6: ^()
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(246, 8);
					root_1 = (IASTNode)adaptor.BecomeRoot(CreateFromFilterElement(fe,a3), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fromElement", 28);
			LeaveRule("fromElement", 28);
			LeaveRule_fromElement();
	    }
	 	DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "fromElement"); }
		return retval;

	}
	// $ANTLR end "fromElement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_joinElement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_joinElement() {}
	// $ANTLR start "joinElement"
	// HqlSqlWalker.g:249:1: joinElement : ^( JOIN (j= joinType )? (f= FETCH )? pRef= propertyRef (a= ALIAS )? (pf= FETCH )? ( ^( (with= WITH ) ( . )* ) )? ) ;
	[GrammarRule("joinElement")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> joinElement()
	{
		EnterRule_joinElement();
		EnterRule("joinElement", 29);
		TraceIn("joinElement", 29);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode f = default(IASTNode);
	    IASTNode a = default(IASTNode);
	    IASTNode pf = default(IASTNode);
	    IASTNode with = default(IASTNode);
	    IASTNode JOIN70 = default(IASTNode);
	    IASTNode wildcard71 = default(IASTNode);
	    HqlSqlWalker.joinType_return j = default(HqlSqlWalker.joinType_return);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> pRef = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode f_tree = default(IASTNode);
	    IASTNode a_tree = default(IASTNode);
	    IASTNode pf_tree = default(IASTNode);
	    IASTNode with_tree = default(IASTNode);
	    IASTNode JOIN70_tree = default(IASTNode);
	    IASTNode wildcard71_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "joinElement");
		DebugLocation(249, 1);
		try
		{
			// HqlSqlWalker.g:253:2: ( ^( JOIN (j= joinType )? (f= FETCH )? pRef= propertyRef (a= ALIAS )? (pf= FETCH )? ( ^( (with= WITH ) ( . )* ) )? ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:253:4: ^( JOIN (j= joinType )? (f= FETCH )? pRef= propertyRef (a= ALIAS )? (pf= FETCH )? ( ^( (with= WITH ) ( . )* ) )? )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(253, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(253, 6);

			_last = (IASTNode)input.LT(1);
			JOIN70=(IASTNode)Match(input,JOIN,Follow._JOIN_in_joinElement1216); 
			JOIN70_tree = (IASTNode)adaptor.DupNode(JOIN70);


			root_1 = (IASTNode)adaptor.BecomeRoot(JOIN70_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(253, 11);
			// HqlSqlWalker.g:253:11: (j= joinType )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, decisionCanBacktrack[34]);
			int LA34_1 = input.LA(1);

			if ((LA34_1==FULL||LA34_1==INNER||LA34_1==LEFT||LA34_1==RIGHT))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:253:12: j= joinType
				{
				DebugLocation(253, 13);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._joinType_in_joinElement1221);
				j=joinType();
				PopFollow();

				adaptor.AddChild(root_1, j.Tree);

				DebugLocation(253, 23);
				 SetImpliedJoinType((j!=null?j.j:default(int))); 

				}
				break;

			}
			} finally { DebugExitSubRule(34); }

			DebugLocation(253, 56);
			// HqlSqlWalker.g:253:56: (f= FETCH )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, decisionCanBacktrack[35]);
			int LA35_1 = input.LA(1);

			if ((LA35_1==FETCH))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:253:57: f= FETCH
				{
				DebugLocation(253, 58);

				_last = (IASTNode)input.LT(1);
				f=(IASTNode)Match(input,FETCH,Follow._FETCH_in_joinElement1231); 
				f_tree = (IASTNode)adaptor.DupNode(f);


				adaptor.AddChild(root_1, f_tree);


				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(253, 71);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._propertyRef_in_joinElement1237);
			pRef=propertyRef();
			PopFollow();

			adaptor.AddChild(root_1, pRef.Tree);

			DebugLocation(253, 84);
			// HqlSqlWalker.g:253:84: (a= ALIAS )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, decisionCanBacktrack[36]);
			int LA36_1 = input.LA(1);

			if ((LA36_1==ALIAS))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:253:85: a= ALIAS
				{
				DebugLocation(253, 86);

				_last = (IASTNode)input.LT(1);
				a=(IASTNode)Match(input,ALIAS,Follow._ALIAS_in_joinElement1242); 
				a_tree = (IASTNode)adaptor.DupNode(a);


				adaptor.AddChild(root_1, a_tree);


				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(253, 95);
			// HqlSqlWalker.g:253:95: (pf= FETCH )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, decisionCanBacktrack[37]);
			int LA37_1 = input.LA(1);

			if ((LA37_1==FETCH))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:253:96: pf= FETCH
				{
				DebugLocation(253, 98);

				_last = (IASTNode)input.LT(1);
				pf=(IASTNode)Match(input,FETCH,Follow._FETCH_in_joinElement1249); 
				pf_tree = (IASTNode)adaptor.DupNode(pf);


				adaptor.AddChild(root_1, pf_tree);


				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(253, 107);
			// HqlSqlWalker.g:253:107: ( ^( (with= WITH ) ( . )* ) )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, decisionCanBacktrack[39]);
			int LA39_1 = input.LA(1);

			if ((LA39_1==WITH))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:253:108: ^( (with= WITH ) ( . )* )
				{
				DebugLocation(253, 108);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_2 = _last;
				IASTNode _first_2 = default(IASTNode);
				IASTNode root_2 = (IASTNode)adaptor.Nil();
				DebugLocation(253, 110);
				// HqlSqlWalker.g:253:110: (with= WITH )
				DebugEnterAlt(1);
				// HqlSqlWalker.g:253:111: with= WITH
				{
				DebugLocation(253, 115);

				_last = (IASTNode)input.LT(1);
				with=(IASTNode)Match(input,WITH,Follow._WITH_in_joinElement1258); 
				with_tree = (IASTNode)adaptor.DupNode(with);


				adaptor.AddChild(root_2, with_tree);


				}


				if (input.LA(1) == TokenTypes.Down) {
				    Match(input, TokenTypes.Down, null); 
				    DebugLocation(253, 122);
				    // HqlSqlWalker.g:253:122: ( . )*
				    try { DebugEnterSubRule(38);
				    while (true)
				    {
				    	int alt38=2;
				    	try { DebugEnterDecision(38, decisionCanBacktrack[38]);
				    	int LA38_1 = input.LA(1);

				    	if (((LA38_1>=AGGREGATE && LA38_1<=THETA_JOINS)))
				    	{
				    		alt38 = 1;
				    	}
				    	else if ((LA38_1==UP))
				    	{
				    		alt38 = 2;
				    	}


				    	} finally { DebugExitDecision(38); }
				    	switch ( alt38 )
				    	{
				    	case 1:
				    		DebugEnterAlt(1);
				    		// HqlSqlWalker.g:253:122: .
				    		{
				    		DebugLocation(253, 122);

				    		_last = (IASTNode)input.LT(1);
				    		wildcard71=(IASTNode)input.LT(1);

				    		MatchAny(input); 
				    		wildcard71_tree = (IASTNode)adaptor.DupTree(wildcard71);
				    		adaptor.AddChild(root_2, wildcard71_tree);


				    		}
				    		break;

				    	default:
				    		goto loop38;
				    	}
				    }

				    loop38:
				    	;

				    } finally { DebugExitSubRule(38); }


				    Match(input, TokenTypes.Up, null); 
				}
				adaptor.AddChild(root_1, root_2);
				_last = _save_last_2;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(39); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}

			DebugLocation(254, 2);

					CreateFromJoinElement((pRef!=null?((IASTNode)pRef.Tree):default(IASTNode)),a,(j!=null?j.j:default(int)),f, pf, with);
					SetImpliedJoinType(INNER);	// Reset the implied join type.
				

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("joinElement", 29);
			LeaveRule("joinElement", 29);
			LeaveRule_joinElement();
	    }
	 	DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "joinElement"); }
		return retval;

	}
	// $ANTLR end "joinElement"

	private sealed partial class joinType_return : AstTreeRuleReturnScope<IASTNode, IASTNode>
	{
		public int j;
	}


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_joinType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_joinType() {}
	// $ANTLR start "joinType"
	// HqlSqlWalker.g:262:1: joinType returns [int j] : ( ( (left= LEFT |right= RIGHT ) (outer= OUTER )? ) | FULL | INNER );
	[GrammarRule("joinType")]
	private HqlSqlWalker.joinType_return joinType()
	{
		EnterRule_joinType();
		EnterRule("joinType", 30);
		TraceIn("joinType", 30);
	    HqlSqlWalker.joinType_return retval = new HqlSqlWalker.joinType_return();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode left = default(IASTNode);
	    IASTNode right = default(IASTNode);
	    IASTNode outer = default(IASTNode);
	    IASTNode FULL72 = default(IASTNode);
	    IASTNode INNER73 = default(IASTNode);

	    IASTNode left_tree = default(IASTNode);
	    IASTNode right_tree = default(IASTNode);
	    IASTNode outer_tree = default(IASTNode);
	    IASTNode FULL72_tree = default(IASTNode);
	    IASTNode INNER73_tree = default(IASTNode);


	       retval.j = INNER;

		try { DebugEnterRule(GrammarFileName, "joinType");
		DebugLocation(262, 1);
		try
		{
			// HqlSqlWalker.g:266:2: ( ( (left= LEFT |right= RIGHT ) (outer= OUTER )? ) | FULL | INNER )
			int alt42=3;
			try { DebugEnterDecision(42, decisionCanBacktrack[42]);
			switch (input.LA(1))
			{
			case LEFT:
			case RIGHT:
				{
				alt42 = 1;
				}
				break;
			case FULL:
				{
				alt42 = 2;
				}
				break;
			case INNER:
				{
				alt42 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 42, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:266:4: ( (left= LEFT |right= RIGHT ) (outer= OUTER )? )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(266, 4);
				// HqlSqlWalker.g:266:4: ( (left= LEFT |right= RIGHT ) (outer= OUTER )? )
				DebugEnterAlt(1);
				// HqlSqlWalker.g:266:6: (left= LEFT |right= RIGHT ) (outer= OUTER )?
				{
				DebugLocation(266, 6);
				// HqlSqlWalker.g:266:6: (left= LEFT |right= RIGHT )
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, decisionCanBacktrack[40]);
				int LA40_1 = input.LA(1);

				if ((LA40_1==LEFT))
				{
					alt40 = 1;
				}
				else if ((LA40_1==RIGHT))
				{
					alt40 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 40, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:266:7: left= LEFT
					{
					DebugLocation(266, 11);

					_last = (IASTNode)input.LT(1);
					left=(IASTNode)Match(input,LEFT,Follow._LEFT_in_joinType1299); 
					left_tree = (IASTNode)adaptor.DupNode(left);


					adaptor.AddChild(root_0, left_tree);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// HqlSqlWalker.g:266:19: right= RIGHT
					{
					DebugLocation(266, 24);

					_last = (IASTNode)input.LT(1);
					right=(IASTNode)Match(input,RIGHT,Follow._RIGHT_in_joinType1305); 
					right_tree = (IASTNode)adaptor.DupNode(right);


					adaptor.AddChild(root_0, right_tree);


					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(266, 32);
				// HqlSqlWalker.g:266:32: (outer= OUTER )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, decisionCanBacktrack[41]);
				int LA41_1 = input.LA(1);

				if ((LA41_1==OUTER))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:266:33: outer= OUTER
					{
					DebugLocation(266, 38);

					_last = (IASTNode)input.LT(1);
					outer=(IASTNode)Match(input,OUTER,Follow._OUTER_in_joinType1311); 
					outer_tree = (IASTNode)adaptor.DupNode(outer);


					adaptor.AddChild(root_0, outer_tree);


					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(267, 2);

						if (left != null)       retval.j = LEFT_OUTER;
						else if (right != null) retval.j = RIGHT_OUTER;
						else if (outer != null) retval.j = RIGHT_OUTER;
					

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:272:4: FULL
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(272, 4);

				_last = (IASTNode)input.LT(1);
				FULL72=(IASTNode)Match(input,FULL,Follow._FULL_in_joinType1325); 
				FULL72_tree = (IASTNode)adaptor.DupNode(FULL72);


				adaptor.AddChild(root_0, FULL72_tree);

				DebugLocation(272, 9);

						retval.j = FULL;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:275:4: INNER
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(275, 4);

				_last = (IASTNode)input.LT(1);
				INNER73=(IASTNode)Match(input,INNER,Follow._INNER_in_joinType1332); 
				INNER73_tree = (IASTNode)adaptor.DupNode(INNER73);


				adaptor.AddChild(root_0, INNER73_tree);

				DebugLocation(275, 10);

						retval.j = INNER;
					

				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("joinType", 30);
			LeaveRule("joinType", 30);
			LeaveRule_joinType();
	    }
	 	DebugLocation(278, 1);
		} finally { DebugExitRule(GrammarFileName, "joinType"); }
		return retval;

	}
	// $ANTLR end "joinType"

	private sealed partial class path_return : AstTreeRuleReturnScope<IASTNode, IASTNode>
	{
		public String p;
	}


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_path() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_path() {}
	// $ANTLR start "path"
	// HqlSqlWalker.g:282:1: path returns [String p] : (a= identifier | ^( DOT x= path y= identifier ) );
	[GrammarRule("path")]
	private HqlSqlWalker.path_return path()
	{
		EnterRule_path();
		EnterRule("path", 31);
		TraceIn("path", 31);
	    HqlSqlWalker.path_return retval = new HqlSqlWalker.path_return();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode DOT74 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> a = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    HqlSqlWalker.path_return x = default(HqlSqlWalker.path_return);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> y = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode DOT74_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "path");
		DebugLocation(282, 1);
		try
		{
			// HqlSqlWalker.g:283:2: (a= identifier | ^( DOT x= path y= identifier ) )
			int alt43=2;
			try { DebugEnterDecision(43, decisionCanBacktrack[43]);
			int LA43_1 = input.LA(1);

			if ((LA43_1==IDENT||LA43_1==WEIRD_IDENT))
			{
				alt43 = 1;
			}
			else if ((LA43_1==DOT))
			{
				alt43 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 43, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:283:4: a= identifier
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(283, 5);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._identifier_in_path1354);
				a=identifier();
				PopFollow();

				adaptor.AddChild(root_0, a.Tree);

				DebugLocation(283, 17);
				 retval.p = (a!=null?((IASTNode)a.Start):default(IASTNode)).ToString();

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:284:4: ^( DOT x= path y= identifier )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(284, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(284, 6);

				_last = (IASTNode)input.LT(1);
				DOT74=(IASTNode)Match(input,DOT,Follow._DOT_in_path1362); 
				DOT74_tree = (IASTNode)adaptor.DupNode(DOT74);


				root_1 = (IASTNode)adaptor.BecomeRoot(DOT74_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(284, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._path_in_path1366);
				x=path();
				PopFollow();

				adaptor.AddChild(root_1, x.Tree);

				DebugLocation(284, 18);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._identifier_in_path1370);
				y=identifier();
				PopFollow();

				adaptor.AddChild(root_1, y.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(284, 31);

							StringBuilder buf = new StringBuilder();
							buf.Append((x!=null?x.p:default(String))).Append('.').Append((y!=null?((IASTNode)y.Start):default(IASTNode)).ToString());
							retval.p = buf.ToString();
						

				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("path", 31);
			LeaveRule("path", 31);
			LeaveRule_path();
	    }
	 	DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "path"); }
		return retval;

	}
	// $ANTLR end "path"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_pathAsIdent() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_pathAsIdent() {}
	// $ANTLR start "pathAsIdent"
	// HqlSqlWalker.g:292:1: pathAsIdent : path -> ^( IDENT[$path.p] ) ;
	[GrammarRule("pathAsIdent")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> pathAsIdent()
	{
		EnterRule_pathAsIdent();
		EnterRule("pathAsIdent", 32);
		TraceIn("pathAsIdent", 32);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    HqlSqlWalker.path_return path75 = default(HqlSqlWalker.path_return);

	    RewriteRuleSubtreeStream stream_path=new RewriteRuleSubtreeStream(adaptor,"rule path");
		try { DebugEnterRule(GrammarFileName, "pathAsIdent");
		DebugLocation(292, 4);
		try
		{
			// HqlSqlWalker.g:293:5: ( path -> ^( IDENT[$path.p] ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:293:7: path
			{
			DebugLocation(293, 7);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._path_in_pathAsIdent1389);
			path75=path();
			PopFollow();

			stream_path.Add(path75.Tree);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 294:5: -> ^( IDENT[$path.p] )
			{
				DebugLocation(294, 8);
				// HqlSqlWalker.g:294:8: ^( IDENT[$path.p] )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(294, 10);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(IDENT, (path75!=null?path75.p:default(String))), root_1);

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("pathAsIdent", 32);
			LeaveRule("pathAsIdent", 32);
			LeaveRule_pathAsIdent();
	    }
	 	DebugLocation(295, 4);
		} finally { DebugExitRule(GrammarFileName, "pathAsIdent"); }
		return retval;

	}
	// $ANTLR end "pathAsIdent"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_withClause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_withClause() {}
	// $ANTLR start "withClause"
	// HqlSqlWalker.g:297:1: withClause : ^(w= WITH b= logicalExpr ) -> ^( $w $b) ;
	[GrammarRule("withClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> withClause()
	{
		EnterRule_withClause();
		EnterRule("withClause", 33);
		TraceIn("withClause", 33);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode w = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> b = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode w_tree = default(IASTNode);
	    RewriteRuleNodeStream stream_WITH=new RewriteRuleNodeStream(adaptor,"token WITH");
	    RewriteRuleSubtreeStream stream_logicalExpr=new RewriteRuleSubtreeStream(adaptor,"rule logicalExpr");
		try { DebugEnterRule(GrammarFileName, "withClause");
		DebugLocation(297, 1);
		try
		{
			// HqlSqlWalker.g:304:2: ( ^(w= WITH b= logicalExpr ) -> ^( $w $b) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:304:4: ^(w= WITH b= logicalExpr )
			{
			DebugLocation(304, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(304, 7);

			_last = (IASTNode)input.LT(1);
			w=(IASTNode)Match(input,WITH,Follow._WITH_in_withClause1430); 
			 
			stream_WITH.Add(w);


			DebugLocation(304, 13);
			 HandleClauseStart( WITH ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(304, 45);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._logicalExpr_in_withClause1436);
			b=logicalExpr();
			PopFollow();

			stream_logicalExpr.Add(b.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: w, b
			// token labels: w
			// rule labels: b, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_w=new RewriteRuleNodeStream(adaptor,"token w",w);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 305:2: -> ^( $w $b)
			{
				DebugLocation(305, 5);
				// HqlSqlWalker.g:305:5: ^( $w $b)
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(305, 8);
				root_1 = (IASTNode)adaptor.BecomeRoot(stream_w.NextNode(), root_1);

				DebugLocation(305, 11);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("withClause", 33);
			LeaveRule("withClause", 33);
			LeaveRule_withClause();
	    }
	 	DebugLocation(306, 1);
		} finally { DebugExitRule(GrammarFileName, "withClause"); }
		return retval;

	}
	// $ANTLR end "withClause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_whereClause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_whereClause() {}
	// $ANTLR start "whereClause"
	// HqlSqlWalker.g:308:1: whereClause : ^(w= WHERE b= logicalExpr ) -> ^( $w $b) ;
	[GrammarRule("whereClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> whereClause()
	{
		EnterRule_whereClause();
		EnterRule("whereClause", 34);
		TraceIn("whereClause", 34);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode w = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> b = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode w_tree = default(IASTNode);
	    RewriteRuleNodeStream stream_WHERE=new RewriteRuleNodeStream(adaptor,"token WHERE");
	    RewriteRuleSubtreeStream stream_logicalExpr=new RewriteRuleSubtreeStream(adaptor,"rule logicalExpr");
		try { DebugEnterRule(GrammarFileName, "whereClause");
		DebugLocation(308, 1);
		try
		{
			// HqlSqlWalker.g:309:2: ( ^(w= WHERE b= logicalExpr ) -> ^( $w $b) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:309:4: ^(w= WHERE b= logicalExpr )
			{
			DebugLocation(309, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(309, 7);

			_last = (IASTNode)input.LT(1);
			w=(IASTNode)Match(input,WHERE,Follow._WHERE_in_whereClause1464); 
			 
			stream_WHERE.Add(w);


			DebugLocation(309, 14);
			 HandleClauseStart( WHERE ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(309, 47);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._logicalExpr_in_whereClause1470);
			b=logicalExpr();
			PopFollow();

			stream_logicalExpr.Add(b.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: w, b
			// token labels: w
			// rule labels: b, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_w=new RewriteRuleNodeStream(adaptor,"token w",w);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 310:2: -> ^( $w $b)
			{
				DebugLocation(310, 5);
				// HqlSqlWalker.g:310:5: ^( $w $b)
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(310, 8);
				root_1 = (IASTNode)adaptor.BecomeRoot(stream_w.NextNode(), root_1);

				DebugLocation(310, 11);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("whereClause", 34);
			LeaveRule("whereClause", 34);
			LeaveRule_whereClause();
	    }
	 	DebugLocation(311, 1);
		} finally { DebugExitRule(GrammarFileName, "whereClause"); }
		return retval;

	}
	// $ANTLR end "whereClause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_logicalExpr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_logicalExpr() {}
	// $ANTLR start "logicalExpr"
	// HqlSqlWalker.g:313:1: logicalExpr : ( ^( AND logicalExpr logicalExpr ) | ^( OR logicalExpr logicalExpr ) | ^( NOT logicalExpr ) | comparisonExpr | functionCall | logicalPath );
	[GrammarRule("logicalExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr()
	{
		EnterRule_logicalExpr();
		EnterRule("logicalExpr", 35);
		TraceIn("logicalExpr", 35);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode AND76 = default(IASTNode);
	    IASTNode OR79 = default(IASTNode);
	    IASTNode NOT82 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr77 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr78 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr80 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr81 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr83 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> comparisonExpr84 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> functionCall85 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> logicalPath86 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode AND76_tree = default(IASTNode);
	    IASTNode OR79_tree = default(IASTNode);
	    IASTNode NOT82_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "logicalExpr");
		DebugLocation(313, 1);
		try
		{
			// HqlSqlWalker.g:314:2: ( ^( AND logicalExpr logicalExpr ) | ^( OR logicalExpr logicalExpr ) | ^( NOT logicalExpr ) | comparisonExpr | functionCall | logicalPath )
			int alt44=6;
			try { DebugEnterDecision(44, decisionCanBacktrack[44]);
			switch (input.LA(1))
			{
			case AND:
				{
				alt44 = 1;
				}
				break;
			case OR:
				{
				alt44 = 2;
				}
				break;
			case NOT:
				{
				alt44 = 3;
				}
				break;
			case BETWEEN:
			case EQ:
			case EXISTS:
			case GE:
			case GT:
			case IN:
			case IS_NOT_NULL:
			case IS_NULL:
			case LE:
			case LIKE:
			case LT:
			case NE:
			case NOT_BETWEEN:
			case NOT_IN:
			case NOT_LIKE:
				{
				alt44 = 4;
				}
				break;
			case AGGREGATE:
			case METHOD_CALL:
				{
				alt44 = 5;
				}
				break;
			case DOT:
			case IDENT:
			case INDEX_OP:
			case WEIRD_IDENT:
				{
				alt44 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 44, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:314:4: ^( AND logicalExpr logicalExpr )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(314, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(314, 6);

				_last = (IASTNode)input.LT(1);
				AND76=(IASTNode)Match(input,AND,Follow._AND_in_logicalExpr1496); 
				AND76_tree = (IASTNode)adaptor.DupNode(AND76);


				root_1 = (IASTNode)adaptor.BecomeRoot(AND76_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(314, 10);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._logicalExpr_in_logicalExpr1498);
				logicalExpr77=logicalExpr();
				PopFollow();

				adaptor.AddChild(root_1, logicalExpr77.Tree);

				DebugLocation(314, 22);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._logicalExpr_in_logicalExpr1500);
				logicalExpr78=logicalExpr();
				PopFollow();

				adaptor.AddChild(root_1, logicalExpr78.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:315:4: ^( OR logicalExpr logicalExpr )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(315, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(315, 6);

				_last = (IASTNode)input.LT(1);
				OR79=(IASTNode)Match(input,OR,Follow._OR_in_logicalExpr1507); 
				OR79_tree = (IASTNode)adaptor.DupNode(OR79);


				root_1 = (IASTNode)adaptor.BecomeRoot(OR79_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(315, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._logicalExpr_in_logicalExpr1509);
				logicalExpr80=logicalExpr();
				PopFollow();

				adaptor.AddChild(root_1, logicalExpr80.Tree);

				DebugLocation(315, 21);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._logicalExpr_in_logicalExpr1511);
				logicalExpr81=logicalExpr();
				PopFollow();

				adaptor.AddChild(root_1, logicalExpr81.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:316:4: ^( NOT logicalExpr )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(316, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(316, 6);

				_last = (IASTNode)input.LT(1);
				NOT82=(IASTNode)Match(input,NOT,Follow._NOT_in_logicalExpr1518); 
				NOT82_tree = (IASTNode)adaptor.DupNode(NOT82);


				root_1 = (IASTNode)adaptor.BecomeRoot(NOT82_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(316, 10);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._logicalExpr_in_logicalExpr1520);
				logicalExpr83=logicalExpr();
				PopFollow();

				adaptor.AddChild(root_1, logicalExpr83.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:317:4: comparisonExpr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(317, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._comparisonExpr_in_logicalExpr1526);
				comparisonExpr84=comparisonExpr();
				PopFollow();

				adaptor.AddChild(root_0, comparisonExpr84.Tree);


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:318:4: functionCall
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(318, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._functionCall_in_logicalExpr1531);
				functionCall85=functionCall();
				PopFollow();

				adaptor.AddChild(root_0, functionCall85.Tree);


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// HqlSqlWalker.g:319:4: logicalPath
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(319, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._logicalPath_in_logicalExpr1536);
				logicalPath86=logicalPath();
				PopFollow();

				adaptor.AddChild(root_0, logicalPath86.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalExpr", 35);
			LeaveRule("logicalExpr", 35);
			LeaveRule_logicalExpr();
	    }
	 	DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalExpr"); }
		return retval;

	}
	// $ANTLR end "logicalExpr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_logicalPath() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_logicalPath() {}
	// $ANTLR start "logicalPath"
	// HqlSqlWalker.g:322:1: logicalPath : p= addrExpr[ true ] -> ^( EQ $p TRUE ) ;
	[GrammarRule("logicalPath")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> logicalPath()
	{
		EnterRule_logicalPath();
		EnterRule("logicalPath", 36);
		TraceIn("logicalPath", 36);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    AstTreeRuleReturnScope<IASTNode, IASTNode> p = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    RewriteRuleSubtreeStream stream_addrExpr=new RewriteRuleSubtreeStream(adaptor,"rule addrExpr");
		try { DebugEnterRule(GrammarFileName, "logicalPath");
		DebugLocation(322, 1);
		try
		{
			// HqlSqlWalker.g:326:2: (p= addrExpr[ true ] -> ^( EQ $p TRUE ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:326:4: p= addrExpr[ true ]
			{
			DebugLocation(326, 5);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._addrExpr_in_logicalPath1555);
			p=addrExpr(true);
			PopFollow();

			stream_addrExpr.Add(p.Tree);

			DebugLocation(326, 24);
			Resolve((p!=null?((IASTNode)p.Tree):default(IASTNode)));


			{
			// AST REWRITE
			// elements: p
			// token labels: 
			// rule labels: p, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 326:45: -> ^( EQ $p TRUE )
			{
				DebugLocation(326, 48);
				// HqlSqlWalker.g:326:48: ^( EQ $p TRUE )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(326, 50);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(EQ, "EQ"), root_1);

				DebugLocation(326, 54);
				adaptor.AddChild(root_1, stream_p.NextTree());
				DebugLocation(326, 56);
				adaptor.AddChild(root_1, (IASTNode)adaptor.Create(TRUE, "TRUE"));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				    PrepareLogicOperator( retval.Tree );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalPath", 36);
			LeaveRule("logicalPath", 36);
			LeaveRule_logicalPath();
	    }
	 	DebugLocation(327, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalPath"); }
		return retval;

	}
	// $ANTLR end "logicalPath"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_comparisonExpr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_comparisonExpr() {}
	// $ANTLR start "comparisonExpr"
	// HqlSqlWalker.g:330:1: comparisonExpr : ( ^( EQ exprOrSubquery exprOrSubquery ) | ^( NE exprOrSubquery exprOrSubquery ) | ^( LT exprOrSubquery exprOrSubquery ) | ^( GT exprOrSubquery exprOrSubquery ) | ^( LE exprOrSubquery exprOrSubquery ) | ^( GE exprOrSubquery exprOrSubquery ) | ^( LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( NOT_LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( NOT_BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( IN exprOrSubquery inRhs ) | ^( NOT_IN exprOrSubquery inRhs ) | ^( IS_NULL exprOrSubquery ) | ^( IS_NOT_NULL exprOrSubquery ) | ^( EXISTS ( expr | collectionFunctionOrSubselect ) ) ) ;
	[GrammarRule("comparisonExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> comparisonExpr()
	{
		EnterRule_comparisonExpr();
		EnterRule("comparisonExpr", 37);
		TraceIn("comparisonExpr", 37);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode EQ87 = default(IASTNode);
	    IASTNode NE90 = default(IASTNode);
	    IASTNode LT93 = default(IASTNode);
	    IASTNode GT96 = default(IASTNode);
	    IASTNode LE99 = default(IASTNode);
	    IASTNode GE102 = default(IASTNode);
	    IASTNode LIKE105 = default(IASTNode);
	    IASTNode ESCAPE108 = default(IASTNode);
	    IASTNode NOT_LIKE110 = default(IASTNode);
	    IASTNode ESCAPE113 = default(IASTNode);
	    IASTNode BETWEEN115 = default(IASTNode);
	    IASTNode NOT_BETWEEN119 = default(IASTNode);
	    IASTNode IN123 = default(IASTNode);
	    IASTNode NOT_IN126 = default(IASTNode);
	    IASTNode IS_NULL129 = default(IASTNode);
	    IASTNode IS_NOT_NULL131 = default(IASTNode);
	    IASTNode EXISTS133 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery88 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery89 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery91 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery92 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery94 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery95 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery97 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery98 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery100 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery101 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery103 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery104 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery106 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> expr107 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> expr109 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery111 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> expr112 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> expr114 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery116 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery117 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery118 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery120 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery121 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery122 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery124 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> inRhs125 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery127 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> inRhs128 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery130 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery132 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> expr134 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunctionOrSubselect135 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode EQ87_tree = default(IASTNode);
	    IASTNode NE90_tree = default(IASTNode);
	    IASTNode LT93_tree = default(IASTNode);
	    IASTNode GT96_tree = default(IASTNode);
	    IASTNode LE99_tree = default(IASTNode);
	    IASTNode GE102_tree = default(IASTNode);
	    IASTNode LIKE105_tree = default(IASTNode);
	    IASTNode ESCAPE108_tree = default(IASTNode);
	    IASTNode NOT_LIKE110_tree = default(IASTNode);
	    IASTNode ESCAPE113_tree = default(IASTNode);
	    IASTNode BETWEEN115_tree = default(IASTNode);
	    IASTNode NOT_BETWEEN119_tree = default(IASTNode);
	    IASTNode IN123_tree = default(IASTNode);
	    IASTNode NOT_IN126_tree = default(IASTNode);
	    IASTNode IS_NULL129_tree = default(IASTNode);
	    IASTNode IS_NOT_NULL131_tree = default(IASTNode);
	    IASTNode EXISTS133_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "comparisonExpr");
		DebugLocation(330, 1);
		try
		{
			// HqlSqlWalker.g:334:2: ( ( ^( EQ exprOrSubquery exprOrSubquery ) | ^( NE exprOrSubquery exprOrSubquery ) | ^( LT exprOrSubquery exprOrSubquery ) | ^( GT exprOrSubquery exprOrSubquery ) | ^( LE exprOrSubquery exprOrSubquery ) | ^( GE exprOrSubquery exprOrSubquery ) | ^( LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( NOT_LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( NOT_BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( IN exprOrSubquery inRhs ) | ^( NOT_IN exprOrSubquery inRhs ) | ^( IS_NULL exprOrSubquery ) | ^( IS_NOT_NULL exprOrSubquery ) | ^( EXISTS ( expr | collectionFunctionOrSubselect ) ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:335:2: ( ^( EQ exprOrSubquery exprOrSubquery ) | ^( NE exprOrSubquery exprOrSubquery ) | ^( LT exprOrSubquery exprOrSubquery ) | ^( GT exprOrSubquery exprOrSubquery ) | ^( LE exprOrSubquery exprOrSubquery ) | ^( GE exprOrSubquery exprOrSubquery ) | ^( LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( NOT_LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( NOT_BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( IN exprOrSubquery inRhs ) | ^( NOT_IN exprOrSubquery inRhs ) | ^( IS_NULL exprOrSubquery ) | ^( IS_NOT_NULL exprOrSubquery ) | ^( EXISTS ( expr | collectionFunctionOrSubselect ) ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(335, 2);
			// HqlSqlWalker.g:335:2: ( ^( EQ exprOrSubquery exprOrSubquery ) | ^( NE exprOrSubquery exprOrSubquery ) | ^( LT exprOrSubquery exprOrSubquery ) | ^( GT exprOrSubquery exprOrSubquery ) | ^( LE exprOrSubquery exprOrSubquery ) | ^( GE exprOrSubquery exprOrSubquery ) | ^( LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( NOT_LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( NOT_BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( IN exprOrSubquery inRhs ) | ^( NOT_IN exprOrSubquery inRhs ) | ^( IS_NULL exprOrSubquery ) | ^( IS_NOT_NULL exprOrSubquery ) | ^( EXISTS ( expr | collectionFunctionOrSubselect ) ) )
			int alt48=15;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, decisionCanBacktrack[48]);
			switch (input.LA(1))
			{
			case EQ:
				{
				alt48 = 1;
				}
				break;
			case NE:
				{
				alt48 = 2;
				}
				break;
			case LT:
				{
				alt48 = 3;
				}
				break;
			case GT:
				{
				alt48 = 4;
				}
				break;
			case LE:
				{
				alt48 = 5;
				}
				break;
			case GE:
				{
				alt48 = 6;
				}
				break;
			case LIKE:
				{
				alt48 = 7;
				}
				break;
			case NOT_LIKE:
				{
				alt48 = 8;
				}
				break;
			case BETWEEN:
				{
				alt48 = 9;
				}
				break;
			case NOT_BETWEEN:
				{
				alt48 = 10;
				}
				break;
			case IN:
				{
				alt48 = 11;
				}
				break;
			case NOT_IN:
				{
				alt48 = 12;
				}
				break;
			case IS_NULL:
				{
				alt48 = 13;
				}
				break;
			case IS_NOT_NULL:
				{
				alt48 = 14;
				}
				break;
			case EXISTS:
				{
				alt48 = 15;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:335:4: ^( EQ exprOrSubquery exprOrSubquery )
				{
				DebugLocation(335, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(335, 6);

				_last = (IASTNode)input.LT(1);
				EQ87=(IASTNode)Match(input,EQ,Follow._EQ_in_comparisonExpr1593); 
				EQ87_tree = (IASTNode)adaptor.DupNode(EQ87);


				root_1 = (IASTNode)adaptor.BecomeRoot(EQ87_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(335, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1595);
				exprOrSubquery88=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery88.Tree);

				DebugLocation(335, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1597);
				exprOrSubquery89=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery89.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:336:4: ^( NE exprOrSubquery exprOrSubquery )
				{
				DebugLocation(336, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(336, 6);

				_last = (IASTNode)input.LT(1);
				NE90=(IASTNode)Match(input,NE,Follow._NE_in_comparisonExpr1604); 
				NE90_tree = (IASTNode)adaptor.DupNode(NE90);


				root_1 = (IASTNode)adaptor.BecomeRoot(NE90_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(336, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1606);
				exprOrSubquery91=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery91.Tree);

				DebugLocation(336, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1608);
				exprOrSubquery92=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery92.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:337:4: ^( LT exprOrSubquery exprOrSubquery )
				{
				DebugLocation(337, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(337, 6);

				_last = (IASTNode)input.LT(1);
				LT93=(IASTNode)Match(input,LT,Follow._LT_in_comparisonExpr1615); 
				LT93_tree = (IASTNode)adaptor.DupNode(LT93);


				root_1 = (IASTNode)adaptor.BecomeRoot(LT93_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(337, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1617);
				exprOrSubquery94=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery94.Tree);

				DebugLocation(337, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1619);
				exprOrSubquery95=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery95.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:338:4: ^( GT exprOrSubquery exprOrSubquery )
				{
				DebugLocation(338, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(338, 6);

				_last = (IASTNode)input.LT(1);
				GT96=(IASTNode)Match(input,GT,Follow._GT_in_comparisonExpr1626); 
				GT96_tree = (IASTNode)adaptor.DupNode(GT96);


				root_1 = (IASTNode)adaptor.BecomeRoot(GT96_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(338, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1628);
				exprOrSubquery97=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery97.Tree);

				DebugLocation(338, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1630);
				exprOrSubquery98=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery98.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:339:4: ^( LE exprOrSubquery exprOrSubquery )
				{
				DebugLocation(339, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(339, 6);

				_last = (IASTNode)input.LT(1);
				LE99=(IASTNode)Match(input,LE,Follow._LE_in_comparisonExpr1637); 
				LE99_tree = (IASTNode)adaptor.DupNode(LE99);


				root_1 = (IASTNode)adaptor.BecomeRoot(LE99_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(339, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1639);
				exprOrSubquery100=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery100.Tree);

				DebugLocation(339, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1641);
				exprOrSubquery101=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery101.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// HqlSqlWalker.g:340:4: ^( GE exprOrSubquery exprOrSubquery )
				{
				DebugLocation(340, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(340, 6);

				_last = (IASTNode)input.LT(1);
				GE102=(IASTNode)Match(input,GE,Follow._GE_in_comparisonExpr1648); 
				GE102_tree = (IASTNode)adaptor.DupNode(GE102);


				root_1 = (IASTNode)adaptor.BecomeRoot(GE102_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(340, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1650);
				exprOrSubquery103=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery103.Tree);

				DebugLocation(340, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1652);
				exprOrSubquery104=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery104.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// HqlSqlWalker.g:341:4: ^( LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? )
				{
				DebugLocation(341, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(341, 6);

				_last = (IASTNode)input.LT(1);
				LIKE105=(IASTNode)Match(input,LIKE,Follow._LIKE_in_comparisonExpr1659); 
				LIKE105_tree = (IASTNode)adaptor.DupNode(LIKE105);


				root_1 = (IASTNode)adaptor.BecomeRoot(LIKE105_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(341, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1661);
				exprOrSubquery106=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery106.Tree);

				DebugLocation(341, 26);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._expr_in_comparisonExpr1663);
				expr107=expr();
				PopFollow();

				adaptor.AddChild(root_1, expr107.Tree);

				DebugLocation(341, 31);
				// HqlSqlWalker.g:341:31: ( ^( ESCAPE expr ) )?
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, decisionCanBacktrack[45]);
				int LA45_1 = input.LA(1);

				if ((LA45_1==ESCAPE))
				{
					alt45 = 1;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:341:33: ^( ESCAPE expr )
					{
					DebugLocation(341, 33);

					_last = (IASTNode)input.LT(1);
					{
					IASTNode _save_last_2 = _last;
					IASTNode _first_2 = default(IASTNode);
					IASTNode root_2 = (IASTNode)adaptor.Nil();
					DebugLocation(341, 35);

					_last = (IASTNode)input.LT(1);
					ESCAPE108=(IASTNode)Match(input,ESCAPE,Follow._ESCAPE_in_comparisonExpr1668); 
					ESCAPE108_tree = (IASTNode)adaptor.DupNode(ESCAPE108);


					root_2 = (IASTNode)adaptor.BecomeRoot(ESCAPE108_tree, root_2);


					Match(input, TokenTypes.Down, null); 
					DebugLocation(341, 42);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._expr_in_comparisonExpr1670);
					expr109=expr();
					PopFollow();

					adaptor.AddChild(root_2, expr109.Tree);


					Match(input, TokenTypes.Up, null); 
					adaptor.AddChild(root_1, root_2);
					_last = _save_last_2;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(45); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// HqlSqlWalker.g:342:4: ^( NOT_LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? )
				{
				DebugLocation(342, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(342, 6);

				_last = (IASTNode)input.LT(1);
				NOT_LIKE110=(IASTNode)Match(input,NOT_LIKE,Follow._NOT_LIKE_in_comparisonExpr1682); 
				NOT_LIKE110_tree = (IASTNode)adaptor.DupNode(NOT_LIKE110);


				root_1 = (IASTNode)adaptor.BecomeRoot(NOT_LIKE110_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(342, 15);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1684);
				exprOrSubquery111=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery111.Tree);

				DebugLocation(342, 30);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._expr_in_comparisonExpr1686);
				expr112=expr();
				PopFollow();

				adaptor.AddChild(root_1, expr112.Tree);

				DebugLocation(342, 35);
				// HqlSqlWalker.g:342:35: ( ^( ESCAPE expr ) )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, decisionCanBacktrack[46]);
				int LA46_1 = input.LA(1);

				if ((LA46_1==ESCAPE))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:342:37: ^( ESCAPE expr )
					{
					DebugLocation(342, 37);

					_last = (IASTNode)input.LT(1);
					{
					IASTNode _save_last_2 = _last;
					IASTNode _first_2 = default(IASTNode);
					IASTNode root_2 = (IASTNode)adaptor.Nil();
					DebugLocation(342, 39);

					_last = (IASTNode)input.LT(1);
					ESCAPE113=(IASTNode)Match(input,ESCAPE,Follow._ESCAPE_in_comparisonExpr1691); 
					ESCAPE113_tree = (IASTNode)adaptor.DupNode(ESCAPE113);


					root_2 = (IASTNode)adaptor.BecomeRoot(ESCAPE113_tree, root_2);


					Match(input, TokenTypes.Down, null); 
					DebugLocation(342, 46);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._expr_in_comparisonExpr1693);
					expr114=expr();
					PopFollow();

					adaptor.AddChild(root_2, expr114.Tree);


					Match(input, TokenTypes.Up, null); 
					adaptor.AddChild(root_1, root_2);
					_last = _save_last_2;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(46); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// HqlSqlWalker.g:343:4: ^( BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery )
				{
				DebugLocation(343, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(343, 6);

				_last = (IASTNode)input.LT(1);
				BETWEEN115=(IASTNode)Match(input,BETWEEN,Follow._BETWEEN_in_comparisonExpr1705); 
				BETWEEN115_tree = (IASTNode)adaptor.DupNode(BETWEEN115);


				root_1 = (IASTNode)adaptor.BecomeRoot(BETWEEN115_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(343, 14);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1707);
				exprOrSubquery116=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery116.Tree);

				DebugLocation(343, 29);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1709);
				exprOrSubquery117=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery117.Tree);

				DebugLocation(343, 44);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1711);
				exprOrSubquery118=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery118.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// HqlSqlWalker.g:344:4: ^( NOT_BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery )
				{
				DebugLocation(344, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(344, 6);

				_last = (IASTNode)input.LT(1);
				NOT_BETWEEN119=(IASTNode)Match(input,NOT_BETWEEN,Follow._NOT_BETWEEN_in_comparisonExpr1718); 
				NOT_BETWEEN119_tree = (IASTNode)adaptor.DupNode(NOT_BETWEEN119);


				root_1 = (IASTNode)adaptor.BecomeRoot(NOT_BETWEEN119_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(344, 18);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1720);
				exprOrSubquery120=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery120.Tree);

				DebugLocation(344, 33);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1722);
				exprOrSubquery121=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery121.Tree);

				DebugLocation(344, 48);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1724);
				exprOrSubquery122=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery122.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// HqlSqlWalker.g:345:4: ^( IN exprOrSubquery inRhs )
				{
				DebugLocation(345, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(345, 6);

				_last = (IASTNode)input.LT(1);
				IN123=(IASTNode)Match(input,IN,Follow._IN_in_comparisonExpr1731); 
				IN123_tree = (IASTNode)adaptor.DupNode(IN123);


				root_1 = (IASTNode)adaptor.BecomeRoot(IN123_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(345, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1733);
				exprOrSubquery124=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery124.Tree);

				DebugLocation(345, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._inRhs_in_comparisonExpr1735);
				inRhs125=inRhs();
				PopFollow();

				adaptor.AddChild(root_1, inRhs125.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 12:
				DebugEnterAlt(12);
				// HqlSqlWalker.g:346:4: ^( NOT_IN exprOrSubquery inRhs )
				{
				DebugLocation(346, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(346, 6);

				_last = (IASTNode)input.LT(1);
				NOT_IN126=(IASTNode)Match(input,NOT_IN,Follow._NOT_IN_in_comparisonExpr1743); 
				NOT_IN126_tree = (IASTNode)adaptor.DupNode(NOT_IN126);


				root_1 = (IASTNode)adaptor.BecomeRoot(NOT_IN126_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(346, 13);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1745);
				exprOrSubquery127=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery127.Tree);

				DebugLocation(346, 28);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._inRhs_in_comparisonExpr1747);
				inRhs128=inRhs();
				PopFollow();

				adaptor.AddChild(root_1, inRhs128.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 13:
				DebugEnterAlt(13);
				// HqlSqlWalker.g:347:4: ^( IS_NULL exprOrSubquery )
				{
				DebugLocation(347, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(347, 6);

				_last = (IASTNode)input.LT(1);
				IS_NULL129=(IASTNode)Match(input,IS_NULL,Follow._IS_NULL_in_comparisonExpr1755); 
				IS_NULL129_tree = (IASTNode)adaptor.DupNode(IS_NULL129);


				root_1 = (IASTNode)adaptor.BecomeRoot(IS_NULL129_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(347, 14);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1757);
				exprOrSubquery130=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery130.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 14:
				DebugEnterAlt(14);
				// HqlSqlWalker.g:348:4: ^( IS_NOT_NULL exprOrSubquery )
				{
				DebugLocation(348, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(348, 6);

				_last = (IASTNode)input.LT(1);
				IS_NOT_NULL131=(IASTNode)Match(input,IS_NOT_NULL,Follow._IS_NOT_NULL_in_comparisonExpr1764); 
				IS_NOT_NULL131_tree = (IASTNode)adaptor.DupNode(IS_NOT_NULL131);


				root_1 = (IASTNode)adaptor.BecomeRoot(IS_NOT_NULL131_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(348, 18);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1766);
				exprOrSubquery132=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery132.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 15:
				DebugEnterAlt(15);
				// HqlSqlWalker.g:351:4: ^( EXISTS ( expr | collectionFunctionOrSubselect ) )
				{
				DebugLocation(351, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(351, 6);

				_last = (IASTNode)input.LT(1);
				EXISTS133=(IASTNode)Match(input,EXISTS,Follow._EXISTS_in_comparisonExpr1775); 
				EXISTS133_tree = (IASTNode)adaptor.DupNode(EXISTS133);


				root_1 = (IASTNode)adaptor.BecomeRoot(EXISTS133_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(351, 13);
				// HqlSqlWalker.g:351:13: ( expr | collectionFunctionOrSubselect )
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, decisionCanBacktrack[47]);
				int LA47_1 = input.LA(1);

				if ((LA47_1==AGGREGATE||LA47_1==BAND||(LA47_1>=BNOT && LA47_1<=BOR)||(LA47_1>=BXOR && LA47_1<=CASE2)||LA47_1==COLON||LA47_1==COUNT||(LA47_1>=DIV && LA47_1<=DOT)||LA47_1==FALSE||LA47_1==IDENT||LA47_1==INDEX_OP||LA47_1==JAVA_CONSTANT||LA47_1==METHOD_CALL||LA47_1==MINUS||(LA47_1>=NULL && LA47_1<=NUM_LONG)||(LA47_1>=PARAM && LA47_1<=PLUS)||LA47_1==QUOTED_String||LA47_1==STAR||(LA47_1>=TRUE && LA47_1<=UNARY_MINUS)||LA47_1==VECTOR_EXPR||LA47_1==WEIRD_IDENT))
				{
					alt47 = 1;
				}
				else if ((LA47_1==ELEMENTS||LA47_1==INDICES||LA47_1==QUERY||LA47_1==UNION))
				{
					alt47 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 47, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:351:15: expr
					{
					DebugLocation(351, 15);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._expr_in_comparisonExpr1779);
					expr134=expr();
					PopFollow();

					adaptor.AddChild(root_1, expr134.Tree);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// HqlSqlWalker.g:351:22: collectionFunctionOrSubselect
					{
					DebugLocation(351, 22);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._collectionFunctionOrSubselect_in_comparisonExpr1783);
					collectionFunctionOrSubselect135=collectionFunctionOrSubselect();
					PopFollow();

					adaptor.AddChild(root_1, collectionFunctionOrSubselect135.Tree);


					}
					break;

				}
				} finally { DebugExitSubRule(47); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(48); }


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				    PrepareLogicOperator( retval.Tree );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("comparisonExpr", 37);
			LeaveRule("comparisonExpr", 37);
			LeaveRule_comparisonExpr();
	    }
	 	DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "comparisonExpr"); }
		return retval;

	}
	// $ANTLR end "comparisonExpr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_inRhs() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_inRhs() {}
	// $ANTLR start "inRhs"
	// HqlSqlWalker.g:355:1: inRhs : ^( IN_LIST ( collectionFunctionOrSubselect | ( expr )* ) ) ;
	[GrammarRule("inRhs")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> inRhs()
	{
		EnterRule_inRhs();
		EnterRule("inRhs", 38);
		TraceIn("inRhs", 38);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode IN_LIST136 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunctionOrSubselect137 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> expr138 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode IN_LIST136_tree = default(IASTNode);

	    	int UP = 99999;		// TODO - added this to get compile working.  It's bogus & should be removed
	    	
		try { DebugEnterRule(GrammarFileName, "inRhs");
		DebugLocation(355, 1);
		try
		{
			// HqlSqlWalker.g:357:2: ( ^( IN_LIST ( collectionFunctionOrSubselect | ( expr )* ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:357:4: ^( IN_LIST ( collectionFunctionOrSubselect | ( expr )* ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(357, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(357, 6);

			_last = (IASTNode)input.LT(1);
			IN_LIST136=(IASTNode)Match(input,IN_LIST,Follow._IN_LIST_in_inRhs1807); 
			IN_LIST136_tree = (IASTNode)adaptor.DupNode(IN_LIST136);


			root_1 = (IASTNode)adaptor.BecomeRoot(IN_LIST136_tree, root_1);


			if (input.LA(1) == TokenTypes.Down) {
			    Match(input, TokenTypes.Down, null); 
			    DebugLocation(357, 14);
			    // HqlSqlWalker.g:357:14: ( collectionFunctionOrSubselect | ( expr )* )
			    int alt50=2;
			    try { DebugEnterSubRule(50);
			    try { DebugEnterDecision(50, decisionCanBacktrack[50]);
			    int LA50_1 = input.LA(1);

			    if ((LA50_1==ELEMENTS||LA50_1==INDICES||LA50_1==QUERY||LA50_1==UNION))
			    {
			    	alt50 = 1;
			    }
			    else if (((LA50_1>=UP && LA50_1<=AGGREGATE)||LA50_1==BAND||(LA50_1>=BNOT && LA50_1<=BOR)||(LA50_1>=BXOR && LA50_1<=CASE2)||LA50_1==COLON||LA50_1==COUNT||(LA50_1>=DIV && LA50_1<=DOT)||LA50_1==FALSE||LA50_1==IDENT||LA50_1==INDEX_OP||LA50_1==JAVA_CONSTANT||LA50_1==METHOD_CALL||LA50_1==MINUS||(LA50_1>=NULL && LA50_1<=NUM_LONG)||(LA50_1>=PARAM && LA50_1<=PLUS)||LA50_1==QUOTED_String||LA50_1==STAR||(LA50_1>=TRUE && LA50_1<=UNARY_MINUS)||LA50_1==VECTOR_EXPR||LA50_1==WEIRD_IDENT))
			    {
			    	alt50 = 2;
			    }
			    else
			    {
			    	NoViableAltException nvae = new NoViableAltException("", 50, 0, input, 1);
			    	DebugRecognitionException(nvae);
			    	throw nvae;
			    }
			    } finally { DebugExitDecision(50); }
			    switch (alt50)
			    {
			    case 1:
			    	DebugEnterAlt(1);
			    	// HqlSqlWalker.g:357:16: collectionFunctionOrSubselect
			    	{
			    	DebugLocation(357, 16);

			    	_last = (IASTNode)input.LT(1);
			    	PushFollow(Follow._collectionFunctionOrSubselect_in_inRhs1811);
			    	collectionFunctionOrSubselect137=collectionFunctionOrSubselect();
			    	PopFollow();

			    	adaptor.AddChild(root_1, collectionFunctionOrSubselect137.Tree);


			    	}
			    	break;
			    case 2:
			    	DebugEnterAlt(2);
			    	// HqlSqlWalker.g:357:48: ( expr )*
			    	{
			    	DebugLocation(357, 48);
			    	// HqlSqlWalker.g:357:48: ( expr )*
			    	try { DebugEnterSubRule(49);
			    	while (true)
			    	{
			    		int alt49=2;
			    		try { DebugEnterDecision(49, decisionCanBacktrack[49]);
			    		int LA49_1 = input.LA(1);

			    		if ((LA49_1==AGGREGATE||LA49_1==BAND||(LA49_1>=BNOT && LA49_1<=BOR)||(LA49_1>=BXOR && LA49_1<=CASE2)||LA49_1==COLON||LA49_1==COUNT||(LA49_1>=DIV && LA49_1<=DOT)||LA49_1==FALSE||LA49_1==IDENT||LA49_1==INDEX_OP||LA49_1==JAVA_CONSTANT||LA49_1==METHOD_CALL||LA49_1==MINUS||(LA49_1>=NULL && LA49_1<=NUM_LONG)||(LA49_1>=PARAM && LA49_1<=PLUS)||LA49_1==QUOTED_String||LA49_1==STAR||(LA49_1>=TRUE && LA49_1<=UNARY_MINUS)||LA49_1==VECTOR_EXPR||LA49_1==WEIRD_IDENT))
			    		{
			    			alt49 = 1;
			    		}


			    		} finally { DebugExitDecision(49); }
			    		switch ( alt49 )
			    		{
			    		case 1:
			    			DebugEnterAlt(1);
			    			// HqlSqlWalker.g:357:48: expr
			    			{
			    			DebugLocation(357, 48);

			    			_last = (IASTNode)input.LT(1);
			    			PushFollow(Follow._expr_in_inRhs1815);
			    			expr138=expr();
			    			PopFollow();

			    			adaptor.AddChild(root_1, expr138.Tree);


			    			}
			    			break;

			    		default:
			    			goto loop49;
			    		}
			    	}

			    	loop49:
			    		;

			    	} finally { DebugExitSubRule(49); }


			    	}
			    	break;

			    }
			    } finally { DebugExitSubRule(50); }


			    Match(input, TokenTypes.Up, null); 
			}
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("inRhs", 38);
			LeaveRule("inRhs", 38);
			LeaveRule_inRhs();
	    }
	 	DebugLocation(358, 1);
		} finally { DebugExitRule(GrammarFileName, "inRhs"); }
		return retval;

	}
	// $ANTLR end "inRhs"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_exprOrSubquery() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_exprOrSubquery() {}
	// $ANTLR start "exprOrSubquery"
	// HqlSqlWalker.g:360:1: exprOrSubquery : ( expr | query | ^( ANY collectionFunctionOrSubselect ) | ^( ALL collectionFunctionOrSubselect ) | ^( SOME collectionFunctionOrSubselect ) );
	[GrammarRule("exprOrSubquery")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery()
	{
		EnterRule_exprOrSubquery();
		EnterRule("exprOrSubquery", 39);
		TraceIn("exprOrSubquery", 39);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode ANY141 = default(IASTNode);
	    IASTNode ALL143 = default(IASTNode);
	    IASTNode SOME145 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> expr139 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> query140 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunctionOrSubselect142 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunctionOrSubselect144 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunctionOrSubselect146 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode ANY141_tree = default(IASTNode);
	    IASTNode ALL143_tree = default(IASTNode);
	    IASTNode SOME145_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "exprOrSubquery");
		DebugLocation(360, 1);
		try
		{
			// HqlSqlWalker.g:361:2: ( expr | query | ^( ANY collectionFunctionOrSubselect ) | ^( ALL collectionFunctionOrSubselect ) | ^( SOME collectionFunctionOrSubselect ) )
			int alt51=5;
			try { DebugEnterDecision(51, decisionCanBacktrack[51]);
			switch (input.LA(1))
			{
			case AGGREGATE:
			case BAND:
			case BNOT:
			case BOR:
			case BXOR:
			case CASE:
			case CASE2:
			case COLON:
			case COUNT:
			case DIV:
			case DOT:
			case FALSE:
			case IDENT:
			case INDEX_OP:
			case JAVA_CONSTANT:
			case METHOD_CALL:
			case MINUS:
			case NULL:
			case NUM_DECIMAL:
			case NUM_DOUBLE:
			case NUM_FLOAT:
			case NUM_INT:
			case NUM_LONG:
			case PARAM:
			case PLUS:
			case QUOTED_String:
			case STAR:
			case TRUE:
			case UNARY_MINUS:
			case VECTOR_EXPR:
			case WEIRD_IDENT:
				{
				alt51 = 1;
				}
				break;
			case QUERY:
			case UNION:
				{
				alt51 = 2;
				}
				break;
			case ANY:
				{
				alt51 = 3;
				}
				break;
			case ALL:
				{
				alt51 = 4;
				}
				break;
			case SOME:
				{
				alt51 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 51, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:361:4: expr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(361, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._expr_in_exprOrSubquery1831);
				expr139=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr139.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:362:4: query
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(362, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._query_in_exprOrSubquery1836);
				query140=query();
				PopFollow();

				adaptor.AddChild(root_0, query140.Tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:363:4: ^( ANY collectionFunctionOrSubselect )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(363, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(363, 6);

				_last = (IASTNode)input.LT(1);
				ANY141=(IASTNode)Match(input,ANY,Follow._ANY_in_exprOrSubquery1842); 
				ANY141_tree = (IASTNode)adaptor.DupNode(ANY141);


				root_1 = (IASTNode)adaptor.BecomeRoot(ANY141_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(363, 10);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._collectionFunctionOrSubselect_in_exprOrSubquery1844);
				collectionFunctionOrSubselect142=collectionFunctionOrSubselect();
				PopFollow();

				adaptor.AddChild(root_1, collectionFunctionOrSubselect142.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:364:4: ^( ALL collectionFunctionOrSubselect )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(364, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(364, 6);

				_last = (IASTNode)input.LT(1);
				ALL143=(IASTNode)Match(input,ALL,Follow._ALL_in_exprOrSubquery1851); 
				ALL143_tree = (IASTNode)adaptor.DupNode(ALL143);


				root_1 = (IASTNode)adaptor.BecomeRoot(ALL143_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(364, 10);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._collectionFunctionOrSubselect_in_exprOrSubquery1853);
				collectionFunctionOrSubselect144=collectionFunctionOrSubselect();
				PopFollow();

				adaptor.AddChild(root_1, collectionFunctionOrSubselect144.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:365:4: ^( SOME collectionFunctionOrSubselect )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(365, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(365, 6);

				_last = (IASTNode)input.LT(1);
				SOME145=(IASTNode)Match(input,SOME,Follow._SOME_in_exprOrSubquery1860); 
				SOME145_tree = (IASTNode)adaptor.DupNode(SOME145);


				root_1 = (IASTNode)adaptor.BecomeRoot(SOME145_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(365, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._collectionFunctionOrSubselect_in_exprOrSubquery1862);
				collectionFunctionOrSubselect146=collectionFunctionOrSubselect();
				PopFollow();

				adaptor.AddChild(root_1, collectionFunctionOrSubselect146.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("exprOrSubquery", 39);
			LeaveRule("exprOrSubquery", 39);
			LeaveRule_exprOrSubquery();
	    }
	 	DebugLocation(366, 1);
		} finally { DebugExitRule(GrammarFileName, "exprOrSubquery"); }
		return retval;

	}
	// $ANTLR end "exprOrSubquery"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_collectionFunctionOrSubselect() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_collectionFunctionOrSubselect() {}
	// $ANTLR start "collectionFunctionOrSubselect"
	// HqlSqlWalker.g:368:1: collectionFunctionOrSubselect : ( collectionFunction | query );
	[GrammarRule("collectionFunctionOrSubselect")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunctionOrSubselect()
	{
		EnterRule_collectionFunctionOrSubselect();
		EnterRule("collectionFunctionOrSubselect", 40);
		TraceIn("collectionFunctionOrSubselect", 40);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunction147 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> query148 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);


		try { DebugEnterRule(GrammarFileName, "collectionFunctionOrSubselect");
		DebugLocation(368, 1);
		try
		{
			// HqlSqlWalker.g:369:2: ( collectionFunction | query )
			int alt52=2;
			try { DebugEnterDecision(52, decisionCanBacktrack[52]);
			int LA52_1 = input.LA(1);

			if ((LA52_1==ELEMENTS||LA52_1==INDICES))
			{
				alt52 = 1;
			}
			else if ((LA52_1==QUERY||LA52_1==UNION))
			{
				alt52 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 52, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:369:4: collectionFunction
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(369, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._collectionFunction_in_collectionFunctionOrSubselect1875);
				collectionFunction147=collectionFunction();
				PopFollow();

				adaptor.AddChild(root_0, collectionFunction147.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:370:4: query
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(370, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._query_in_collectionFunctionOrSubselect1880);
				query148=query();
				PopFollow();

				adaptor.AddChild(root_0, query148.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionFunctionOrSubselect", 40);
			LeaveRule("collectionFunctionOrSubselect", 40);
			LeaveRule_collectionFunctionOrSubselect();
	    }
	 	DebugLocation(371, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionFunctionOrSubselect"); }
		return retval;

	}
	// $ANTLR end "collectionFunctionOrSubselect"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expr() {}
	// $ANTLR start "expr"
	// HqlSqlWalker.g:373:1: expr : (ae= addrExpr[ true ] | ^( VECTOR_EXPR ( expr )* ) | constant | arithmeticExpr | functionCall | parameter | count );
	[GrammarRule("expr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 41);
		TraceIn("expr", 41);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode VECTOR_EXPR149 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> ae = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> expr150 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> constant151 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> arithmeticExpr152 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> functionCall153 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> parameter154 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> count155 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode VECTOR_EXPR149_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(373, 1);
		try
		{
			// HqlSqlWalker.g:374:2: (ae= addrExpr[ true ] | ^( VECTOR_EXPR ( expr )* ) | constant | arithmeticExpr | functionCall | parameter | count )
			int alt54=7;
			try { DebugEnterDecision(54, decisionCanBacktrack[54]);
			switch (input.LA(1))
			{
			case DOT:
			case IDENT:
			case INDEX_OP:
			case WEIRD_IDENT:
				{
				alt54 = 1;
				}
				break;
			case VECTOR_EXPR:
				{
				alt54 = 2;
				}
				break;
			case FALSE:
			case JAVA_CONSTANT:
			case NULL:
			case NUM_DECIMAL:
			case NUM_DOUBLE:
			case NUM_FLOAT:
			case NUM_INT:
			case NUM_LONG:
			case QUOTED_String:
			case TRUE:
				{
				alt54 = 3;
				}
				break;
			case BAND:
			case BNOT:
			case BOR:
			case BXOR:
			case CASE:
			case CASE2:
			case DIV:
			case MINUS:
			case PLUS:
			case STAR:
			case UNARY_MINUS:
				{
				alt54 = 4;
				}
				break;
			case AGGREGATE:
			case METHOD_CALL:
				{
				alt54 = 5;
				}
				break;
			case COLON:
			case PARAM:
				{
				alt54 = 6;
				}
				break;
			case COUNT:
				{
				alt54 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 54, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:374:4: ae= addrExpr[ true ]
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(374, 6);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._addrExpr_in_expr1894);
				ae=addrExpr(true);
				PopFollow();

				adaptor.AddChild(root_0, ae.Tree);

				DebugLocation(374, 25);
				 Resolve((ae!=null?((IASTNode)ae.Tree):default(IASTNode))); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:375:4: ^( VECTOR_EXPR ( expr )* )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(375, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(375, 7);

				_last = (IASTNode)input.LT(1);
				VECTOR_EXPR149=(IASTNode)Match(input,VECTOR_EXPR,Follow._VECTOR_EXPR_in_expr1906); 
				VECTOR_EXPR149_tree = (IASTNode)adaptor.DupNode(VECTOR_EXPR149);


				root_1 = (IASTNode)adaptor.BecomeRoot(VECTOR_EXPR149_tree, root_1);


				if (input.LA(1) == TokenTypes.Down) {
				    Match(input, TokenTypes.Down, null); 
				    DebugLocation(375, 19);
				    // HqlSqlWalker.g:375:19: ( expr )*
				    try { DebugEnterSubRule(53);
				    while (true)
				    {
				    	int alt53=2;
				    	try { DebugEnterDecision(53, decisionCanBacktrack[53]);
				    	int LA53_1 = input.LA(1);

				    	if ((LA53_1==AGGREGATE||LA53_1==BAND||(LA53_1>=BNOT && LA53_1<=BOR)||(LA53_1>=BXOR && LA53_1<=CASE2)||LA53_1==COLON||LA53_1==COUNT||(LA53_1>=DIV && LA53_1<=DOT)||LA53_1==FALSE||LA53_1==IDENT||LA53_1==INDEX_OP||LA53_1==JAVA_CONSTANT||LA53_1==METHOD_CALL||LA53_1==MINUS||(LA53_1>=NULL && LA53_1<=NUM_LONG)||(LA53_1>=PARAM && LA53_1<=PLUS)||LA53_1==QUOTED_String||LA53_1==STAR||(LA53_1>=TRUE && LA53_1<=UNARY_MINUS)||LA53_1==VECTOR_EXPR||LA53_1==WEIRD_IDENT))
				    	{
				    		alt53 = 1;
				    	}


				    	} finally { DebugExitDecision(53); }
				    	switch ( alt53 )
				    	{
				    	case 1:
				    		DebugEnterAlt(1);
				    		// HqlSqlWalker.g:375:20: expr
				    		{
				    		DebugLocation(375, 20);

				    		_last = (IASTNode)input.LT(1);
				    		PushFollow(Follow._expr_in_expr1909);
				    		expr150=expr();
				    		PopFollow();

				    		adaptor.AddChild(root_1, expr150.Tree);


				    		}
				    		break;

				    	default:
				    		goto loop53;
				    	}
				    }

				    loop53:
				    	;

				    } finally { DebugExitSubRule(53); }


				    Match(input, TokenTypes.Up, null); 
				}
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:376:4: constant
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(376, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._constant_in_expr1918);
				constant151=constant();
				PopFollow();

				adaptor.AddChild(root_0, constant151.Tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:377:4: arithmeticExpr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(377, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._arithmeticExpr_in_expr1923);
				arithmeticExpr152=arithmeticExpr();
				PopFollow();

				adaptor.AddChild(root_0, arithmeticExpr152.Tree);


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:378:4: functionCall
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(378, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._functionCall_in_expr1928);
				functionCall153=functionCall();
				PopFollow();

				adaptor.AddChild(root_0, functionCall153.Tree);


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// HqlSqlWalker.g:379:4: parameter
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(379, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._parameter_in_expr1940);
				parameter154=parameter();
				PopFollow();

				adaptor.AddChild(root_0, parameter154.Tree);


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// HqlSqlWalker.g:380:4: count
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(380, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._count_in_expr1945);
				count155=count();
				PopFollow();

				adaptor.AddChild(root_0, count155.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 41);
			LeaveRule("expr", 41);
			LeaveRule_expr();
	    }
	 	DebugLocation(381, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_arithmeticExpr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_arithmeticExpr() {}
	// $ANTLR start "arithmeticExpr"
	// HqlSqlWalker.g:383:1: arithmeticExpr : ( ^( PLUS exprOrSubquery exprOrSubquery ) | ^( MINUS exprOrSubquery exprOrSubquery ) | ^( DIV exprOrSubquery exprOrSubquery ) | ^( STAR exprOrSubquery exprOrSubquery ) | ^( BNOT exprOrSubquery ) | ^( BAND exprOrSubquery exprOrSubquery ) | ^( BOR exprOrSubquery exprOrSubquery ) | ^( BXOR exprOrSubquery exprOrSubquery ) | ^( UNARY_MINUS exprOrSubquery ) |c= caseExpr );
	[GrammarRule("arithmeticExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> arithmeticExpr()
	{
		EnterRule_arithmeticExpr();
		EnterRule("arithmeticExpr", 42);
		TraceIn("arithmeticExpr", 42);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode PLUS156 = default(IASTNode);
	    IASTNode MINUS159 = default(IASTNode);
	    IASTNode DIV162 = default(IASTNode);
	    IASTNode STAR165 = default(IASTNode);
	    IASTNode BNOT168 = default(IASTNode);
	    IASTNode BAND170 = default(IASTNode);
	    IASTNode BOR173 = default(IASTNode);
	    IASTNode BXOR176 = default(IASTNode);
	    IASTNode UNARY_MINUS179 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> c = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery157 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery158 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery160 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery161 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery163 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery164 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery166 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery167 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery169 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery171 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery172 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery174 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery175 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery177 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery178 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery180 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode PLUS156_tree = default(IASTNode);
	    IASTNode MINUS159_tree = default(IASTNode);
	    IASTNode DIV162_tree = default(IASTNode);
	    IASTNode STAR165_tree = default(IASTNode);
	    IASTNode BNOT168_tree = default(IASTNode);
	    IASTNode BAND170_tree = default(IASTNode);
	    IASTNode BOR173_tree = default(IASTNode);
	    IASTNode BXOR176_tree = default(IASTNode);
	    IASTNode UNARY_MINUS179_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "arithmeticExpr");
		DebugLocation(383, 1);
		try
		{
			// HqlSqlWalker.g:390:2: ( ^( PLUS exprOrSubquery exprOrSubquery ) | ^( MINUS exprOrSubquery exprOrSubquery ) | ^( DIV exprOrSubquery exprOrSubquery ) | ^( STAR exprOrSubquery exprOrSubquery ) | ^( BNOT exprOrSubquery ) | ^( BAND exprOrSubquery exprOrSubquery ) | ^( BOR exprOrSubquery exprOrSubquery ) | ^( BXOR exprOrSubquery exprOrSubquery ) | ^( UNARY_MINUS exprOrSubquery ) |c= caseExpr )
			int alt55=10;
			try { DebugEnterDecision(55, decisionCanBacktrack[55]);
			switch (input.LA(1))
			{
			case PLUS:
				{
				alt55 = 1;
				}
				break;
			case MINUS:
				{
				alt55 = 2;
				}
				break;
			case DIV:
				{
				alt55 = 3;
				}
				break;
			case STAR:
				{
				alt55 = 4;
				}
				break;
			case BNOT:
				{
				alt55 = 5;
				}
				break;
			case BAND:
				{
				alt55 = 6;
				}
				break;
			case BOR:
				{
				alt55 = 7;
				}
				break;
			case BXOR:
				{
				alt55 = 8;
				}
				break;
			case UNARY_MINUS:
				{
				alt55 = 9;
				}
				break;
			case CASE:
			case CASE2:
				{
				alt55 = 10;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:390:4: ^( PLUS exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(390, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(390, 6);

				_last = (IASTNode)input.LT(1);
				PLUS156=(IASTNode)Match(input,PLUS,Follow._PLUS_in_arithmeticExpr1973); 
				PLUS156_tree = (IASTNode)adaptor.DupNode(PLUS156);


				root_1 = (IASTNode)adaptor.BecomeRoot(PLUS156_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(390, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr1975);
				exprOrSubquery157=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery157.Tree);

				DebugLocation(390, 26);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr1977);
				exprOrSubquery158=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery158.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:391:4: ^( MINUS exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(391, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(391, 6);

				_last = (IASTNode)input.LT(1);
				MINUS159=(IASTNode)Match(input,MINUS,Follow._MINUS_in_arithmeticExpr1984); 
				MINUS159_tree = (IASTNode)adaptor.DupNode(MINUS159);


				root_1 = (IASTNode)adaptor.BecomeRoot(MINUS159_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(391, 12);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr1986);
				exprOrSubquery160=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery160.Tree);

				DebugLocation(391, 27);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr1988);
				exprOrSubquery161=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery161.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:392:4: ^( DIV exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(392, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(392, 6);

				_last = (IASTNode)input.LT(1);
				DIV162=(IASTNode)Match(input,DIV,Follow._DIV_in_arithmeticExpr1995); 
				DIV162_tree = (IASTNode)adaptor.DupNode(DIV162);


				root_1 = (IASTNode)adaptor.BecomeRoot(DIV162_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(392, 10);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr1997);
				exprOrSubquery163=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery163.Tree);

				DebugLocation(392, 25);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr1999);
				exprOrSubquery164=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery164.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:393:4: ^( STAR exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(393, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(393, 6);

				_last = (IASTNode)input.LT(1);
				STAR165=(IASTNode)Match(input,STAR,Follow._STAR_in_arithmeticExpr2006); 
				STAR165_tree = (IASTNode)adaptor.DupNode(STAR165);


				root_1 = (IASTNode)adaptor.BecomeRoot(STAR165_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(393, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2008);
				exprOrSubquery166=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery166.Tree);

				DebugLocation(393, 26);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2010);
				exprOrSubquery167=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery167.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:394:4: ^( BNOT exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(394, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(394, 6);

				_last = (IASTNode)input.LT(1);
				BNOT168=(IASTNode)Match(input,BNOT,Follow._BNOT_in_arithmeticExpr2017); 
				BNOT168_tree = (IASTNode)adaptor.DupNode(BNOT168);


				root_1 = (IASTNode)adaptor.BecomeRoot(BNOT168_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(394, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2019);
				exprOrSubquery169=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery169.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// HqlSqlWalker.g:395:4: ^( BAND exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(395, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(395, 6);

				_last = (IASTNode)input.LT(1);
				BAND170=(IASTNode)Match(input,BAND,Follow._BAND_in_arithmeticExpr2026); 
				BAND170_tree = (IASTNode)adaptor.DupNode(BAND170);


				root_1 = (IASTNode)adaptor.BecomeRoot(BAND170_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(395, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2028);
				exprOrSubquery171=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery171.Tree);

				DebugLocation(395, 26);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2030);
				exprOrSubquery172=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery172.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// HqlSqlWalker.g:396:4: ^( BOR exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(396, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(396, 6);

				_last = (IASTNode)input.LT(1);
				BOR173=(IASTNode)Match(input,BOR,Follow._BOR_in_arithmeticExpr2037); 
				BOR173_tree = (IASTNode)adaptor.DupNode(BOR173);


				root_1 = (IASTNode)adaptor.BecomeRoot(BOR173_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(396, 10);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2039);
				exprOrSubquery174=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery174.Tree);

				DebugLocation(396, 25);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2041);
				exprOrSubquery175=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery175.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// HqlSqlWalker.g:397:4: ^( BXOR exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(397, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(397, 6);

				_last = (IASTNode)input.LT(1);
				BXOR176=(IASTNode)Match(input,BXOR,Follow._BXOR_in_arithmeticExpr2048); 
				BXOR176_tree = (IASTNode)adaptor.DupNode(BXOR176);


				root_1 = (IASTNode)adaptor.BecomeRoot(BXOR176_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(397, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2050);
				exprOrSubquery177=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery177.Tree);

				DebugLocation(397, 26);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2052);
				exprOrSubquery178=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery178.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// HqlSqlWalker.g:399:4: ^( UNARY_MINUS exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(399, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(399, 6);

				_last = (IASTNode)input.LT(1);
				UNARY_MINUS179=(IASTNode)Match(input,UNARY_MINUS,Follow._UNARY_MINUS_in_arithmeticExpr2060); 
				UNARY_MINUS179_tree = (IASTNode)adaptor.DupNode(UNARY_MINUS179);


				root_1 = (IASTNode)adaptor.BecomeRoot(UNARY_MINUS179_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(399, 18);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2062);
				exprOrSubquery180=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery180.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// HqlSqlWalker.g:400:4: c= caseExpr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(400, 5);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._caseExpr_in_arithmeticExpr2070);
				c=caseExpr();
				PopFollow();

				adaptor.AddChild(root_0, c.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					if ((c!=null?((IASTNode)c.Tree):default(IASTNode)) == null)
					{
						PrepareArithmeticOperator( retval.Tree );
					}
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arithmeticExpr", 42);
			LeaveRule("arithmeticExpr", 42);
			LeaveRule_arithmeticExpr();
	    }
	 	DebugLocation(401, 1);
		} finally { DebugExitRule(GrammarFileName, "arithmeticExpr"); }
		return retval;

	}
	// $ANTLR end "arithmeticExpr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_caseExpr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_caseExpr() {}
	// $ANTLR start "caseExpr"
	// HqlSqlWalker.g:403:1: caseExpr : ( ^( CASE ( ^( WHEN logicalExpr expr ) )+ ( ^( ELSE expr ) )? ) | ^( CASE2 expr ( ^( WHEN expr expr ) )+ ( ^( ELSE expr ) )? ) );
	[GrammarRule("caseExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> caseExpr()
	{
		EnterRule_caseExpr();
		EnterRule("caseExpr", 43);
		TraceIn("caseExpr", 43);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode CASE181 = default(IASTNode);
	    IASTNode WHEN182 = default(IASTNode);
	    IASTNode ELSE185 = default(IASTNode);
	    IASTNode CASE2187 = default(IASTNode);
	    IASTNode WHEN189 = default(IASTNode);
	    IASTNode ELSE192 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr183 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> expr184 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> expr186 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> expr188 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> expr190 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> expr191 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> expr193 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode CASE181_tree = default(IASTNode);
	    IASTNode WHEN182_tree = default(IASTNode);
	    IASTNode ELSE185_tree = default(IASTNode);
	    IASTNode CASE2187_tree = default(IASTNode);
	    IASTNode WHEN189_tree = default(IASTNode);
	    IASTNode ELSE192_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "caseExpr");
		DebugLocation(403, 1);
		try
		{
			// HqlSqlWalker.g:404:2: ( ^( CASE ( ^( WHEN logicalExpr expr ) )+ ( ^( ELSE expr ) )? ) | ^( CASE2 expr ( ^( WHEN expr expr ) )+ ( ^( ELSE expr ) )? ) )
			int alt60=2;
			try { DebugEnterDecision(60, decisionCanBacktrack[60]);
			int LA60_1 = input.LA(1);

			if ((LA60_1==CASE))
			{
				alt60 = 1;
			}
			else if ((LA60_1==CASE2))
			{
				alt60 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 60, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:404:4: ^( CASE ( ^( WHEN logicalExpr expr ) )+ ( ^( ELSE expr ) )? )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(404, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(404, 6);

				_last = (IASTNode)input.LT(1);
				CASE181=(IASTNode)Match(input,CASE,Follow._CASE_in_caseExpr2082); 
				CASE181_tree = (IASTNode)adaptor.DupNode(CASE181);


				root_1 = (IASTNode)adaptor.BecomeRoot(CASE181_tree, root_1);


				DebugLocation(404, 11);
				 _inCase = true; 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(404, 31);
				// HqlSqlWalker.g:404:31: ( ^( WHEN logicalExpr expr ) )+
				int cnt56=0;
				try { DebugEnterSubRule(56);
				while (true)
				{
					int alt56=2;
					try { DebugEnterDecision(56, decisionCanBacktrack[56]);
					int LA56_1 = input.LA(1);

					if ((LA56_1==WHEN))
					{
						alt56 = 1;
					}


					} finally { DebugExitDecision(56); }
					switch (alt56)
					{
					case 1:
						DebugEnterAlt(1);
						// HqlSqlWalker.g:404:32: ^( WHEN logicalExpr expr )
						{
						DebugLocation(404, 32);

						_last = (IASTNode)input.LT(1);
						{
						IASTNode _save_last_2 = _last;
						IASTNode _first_2 = default(IASTNode);
						IASTNode root_2 = (IASTNode)adaptor.Nil();
						DebugLocation(404, 34);

						_last = (IASTNode)input.LT(1);
						WHEN182=(IASTNode)Match(input,WHEN,Follow._WHEN_in_caseExpr2088); 
						WHEN182_tree = (IASTNode)adaptor.DupNode(WHEN182);


						root_2 = (IASTNode)adaptor.BecomeRoot(WHEN182_tree, root_2);


						Match(input, TokenTypes.Down, null); 
						DebugLocation(404, 39);

						_last = (IASTNode)input.LT(1);
						PushFollow(Follow._logicalExpr_in_caseExpr2090);
						logicalExpr183=logicalExpr();
						PopFollow();

						adaptor.AddChild(root_2, logicalExpr183.Tree);

						DebugLocation(404, 51);

						_last = (IASTNode)input.LT(1);
						PushFollow(Follow._expr_in_caseExpr2092);
						expr184=expr();
						PopFollow();

						adaptor.AddChild(root_2, expr184.Tree);


						Match(input, TokenTypes.Up, null); 
						adaptor.AddChild(root_1, root_2);
						_last = _save_last_2;
						}


						}
						break;

					default:
						if (cnt56 >= 1)
							goto loop56;

						EarlyExitException eee56 = new EarlyExitException( 56, input );
						DebugRecognitionException(eee56);
						throw eee56;
					}
					cnt56++;
				}
				loop56:
					;

				} finally { DebugExitSubRule(56); }

				DebugLocation(404, 59);
				// HqlSqlWalker.g:404:59: ( ^( ELSE expr ) )?
				int alt57=2;
				try { DebugEnterSubRule(57);
				try { DebugEnterDecision(57, decisionCanBacktrack[57]);
				int LA57_1 = input.LA(1);

				if ((LA57_1==ELSE))
				{
					alt57 = 1;
				}
				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:404:60: ^( ELSE expr )
					{
					DebugLocation(404, 60);

					_last = (IASTNode)input.LT(1);
					{
					IASTNode _save_last_2 = _last;
					IASTNode _first_2 = default(IASTNode);
					IASTNode root_2 = (IASTNode)adaptor.Nil();
					DebugLocation(404, 62);

					_last = (IASTNode)input.LT(1);
					ELSE185=(IASTNode)Match(input,ELSE,Follow._ELSE_in_caseExpr2099); 
					ELSE185_tree = (IASTNode)adaptor.DupNode(ELSE185);


					root_2 = (IASTNode)adaptor.BecomeRoot(ELSE185_tree, root_2);


					Match(input, TokenTypes.Down, null); 
					DebugLocation(404, 67);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._expr_in_caseExpr2101);
					expr186=expr();
					PopFollow();

					adaptor.AddChild(root_2, expr186.Tree);


					Match(input, TokenTypes.Up, null); 
					adaptor.AddChild(root_1, root_2);
					_last = _save_last_2;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(57); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(404, 76);
				 _inCase = false; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:405:4: ^( CASE2 expr ( ^( WHEN expr expr ) )+ ( ^( ELSE expr ) )? )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(405, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(405, 6);

				_last = (IASTNode)input.LT(1);
				CASE2187=(IASTNode)Match(input,CASE2,Follow._CASE2_in_caseExpr2113); 
				CASE2187_tree = (IASTNode)adaptor.DupNode(CASE2187);


				root_1 = (IASTNode)adaptor.BecomeRoot(CASE2187_tree, root_1);


				DebugLocation(405, 12);
				 _inCase = true; 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(405, 32);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._expr_in_caseExpr2117);
				expr188=expr();
				PopFollow();

				adaptor.AddChild(root_1, expr188.Tree);

				DebugLocation(405, 37);
				// HqlSqlWalker.g:405:37: ( ^( WHEN expr expr ) )+
				int cnt58=0;
				try { DebugEnterSubRule(58);
				while (true)
				{
					int alt58=2;
					try { DebugEnterDecision(58, decisionCanBacktrack[58]);
					int LA58_1 = input.LA(1);

					if ((LA58_1==WHEN))
					{
						alt58 = 1;
					}


					} finally { DebugExitDecision(58); }
					switch (alt58)
					{
					case 1:
						DebugEnterAlt(1);
						// HqlSqlWalker.g:405:38: ^( WHEN expr expr )
						{
						DebugLocation(405, 38);

						_last = (IASTNode)input.LT(1);
						{
						IASTNode _save_last_2 = _last;
						IASTNode _first_2 = default(IASTNode);
						IASTNode root_2 = (IASTNode)adaptor.Nil();
						DebugLocation(405, 40);

						_last = (IASTNode)input.LT(1);
						WHEN189=(IASTNode)Match(input,WHEN,Follow._WHEN_in_caseExpr2121); 
						WHEN189_tree = (IASTNode)adaptor.DupNode(WHEN189);


						root_2 = (IASTNode)adaptor.BecomeRoot(WHEN189_tree, root_2);


						Match(input, TokenTypes.Down, null); 
						DebugLocation(405, 45);

						_last = (IASTNode)input.LT(1);
						PushFollow(Follow._expr_in_caseExpr2123);
						expr190=expr();
						PopFollow();

						adaptor.AddChild(root_2, expr190.Tree);

						DebugLocation(405, 50);

						_last = (IASTNode)input.LT(1);
						PushFollow(Follow._expr_in_caseExpr2125);
						expr191=expr();
						PopFollow();

						adaptor.AddChild(root_2, expr191.Tree);


						Match(input, TokenTypes.Up, null); 
						adaptor.AddChild(root_1, root_2);
						_last = _save_last_2;
						}


						}
						break;

					default:
						if (cnt58 >= 1)
							goto loop58;

						EarlyExitException eee58 = new EarlyExitException( 58, input );
						DebugRecognitionException(eee58);
						throw eee58;
					}
					cnt58++;
				}
				loop58:
					;

				} finally { DebugExitSubRule(58); }

				DebugLocation(405, 58);
				// HqlSqlWalker.g:405:58: ( ^( ELSE expr ) )?
				int alt59=2;
				try { DebugEnterSubRule(59);
				try { DebugEnterDecision(59, decisionCanBacktrack[59]);
				int LA59_1 = input.LA(1);

				if ((LA59_1==ELSE))
				{
					alt59 = 1;
				}
				} finally { DebugExitDecision(59); }
				switch (alt59)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:405:59: ^( ELSE expr )
					{
					DebugLocation(405, 59);

					_last = (IASTNode)input.LT(1);
					{
					IASTNode _save_last_2 = _last;
					IASTNode _first_2 = default(IASTNode);
					IASTNode root_2 = (IASTNode)adaptor.Nil();
					DebugLocation(405, 61);

					_last = (IASTNode)input.LT(1);
					ELSE192=(IASTNode)Match(input,ELSE,Follow._ELSE_in_caseExpr2132); 
					ELSE192_tree = (IASTNode)adaptor.DupNode(ELSE192);


					root_2 = (IASTNode)adaptor.BecomeRoot(ELSE192_tree, root_2);


					Match(input, TokenTypes.Down, null); 
					DebugLocation(405, 66);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._expr_in_caseExpr2134);
					expr193=expr();
					PopFollow();

					adaptor.AddChild(root_2, expr193.Tree);


					Match(input, TokenTypes.Up, null); 
					adaptor.AddChild(root_1, root_2);
					_last = _save_last_2;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(59); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(405, 75);
				 _inCase = false; 

				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("caseExpr", 43);
			LeaveRule("caseExpr", 43);
			LeaveRule_caseExpr();
	    }
	 	DebugLocation(406, 1);
		} finally { DebugExitRule(GrammarFileName, "caseExpr"); }
		return retval;

	}
	// $ANTLR end "caseExpr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_collectionFunction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_collectionFunction() {}
	// $ANTLR start "collectionFunction"
	// HqlSqlWalker.g:410:1: collectionFunction : ( ^(e= ELEMENTS p1= propertyRef ) | ^(i= INDICES p2= propertyRef ) );
	[GrammarRule("collectionFunction")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunction()
	{
		EnterRule_collectionFunction();
		EnterRule("collectionFunction", 44);
		TraceIn("collectionFunction", 44);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode e = default(IASTNode);
	    IASTNode i = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> p1 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> p2 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode e_tree = default(IASTNode);
	    IASTNode i_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "collectionFunction");
		DebugLocation(410, 1);
		try
		{
			// HqlSqlWalker.g:411:2: ( ^(e= ELEMENTS p1= propertyRef ) | ^(i= INDICES p2= propertyRef ) )
			int alt61=2;
			try { DebugEnterDecision(61, decisionCanBacktrack[61]);
			int LA61_1 = input.LA(1);

			if ((LA61_1==ELEMENTS))
			{
				alt61 = 1;
			}
			else if ((LA61_1==INDICES))
			{
				alt61 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:411:4: ^(e= ELEMENTS p1= propertyRef )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(411, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(411, 7);

				_last = (IASTNode)input.LT(1);
				e=(IASTNode)Match(input,ELEMENTS,Follow._ELEMENTS_in_collectionFunction2156); 
				e_tree = (IASTNode)adaptor.DupNode(e);


				root_1 = (IASTNode)adaptor.BecomeRoot(e_tree, root_1);


				DebugLocation(411, 17);
				_inFunctionCall=true;

				Match(input, TokenTypes.Down, null); 
				DebugLocation(411, 43);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._propertyRef_in_collectionFunction2162);
				p1=propertyRef();
				PopFollow();

				adaptor.AddChild(root_1, p1.Tree);

				DebugLocation(411, 56);
				 Resolve((p1!=null?((IASTNode)p1.Tree):default(IASTNode))); 

				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(412, 3);
				 ProcessFunction(e_tree,_inSelect); 
				DebugLocation(412, 43);
				_inFunctionCall=false;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:413:4: ^(i= INDICES p2= propertyRef )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(413, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(413, 7);

				_last = (IASTNode)input.LT(1);
				i=(IASTNode)Match(input,INDICES,Follow._INDICES_in_collectionFunction2181); 
				i_tree = (IASTNode)adaptor.DupNode(i);


				root_1 = (IASTNode)adaptor.BecomeRoot(i_tree, root_1);


				DebugLocation(413, 16);
				_inFunctionCall=true;

				Match(input, TokenTypes.Down, null); 
				DebugLocation(413, 42);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._propertyRef_in_collectionFunction2187);
				p2=propertyRef();
				PopFollow();

				adaptor.AddChild(root_1, p2.Tree);

				DebugLocation(413, 55);
				 Resolve((p2!=null?((IASTNode)p2.Tree):default(IASTNode))); 

				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(414, 3);
				 ProcessFunction(i_tree,_inSelect); 
				DebugLocation(414, 43);
				_inFunctionCall=false;

				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionFunction", 44);
			LeaveRule("collectionFunction", 44);
			LeaveRule_collectionFunction();
	    }
	 	DebugLocation(415, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionFunction"); }
		return retval;

	}
	// $ANTLR end "collectionFunction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functionCall() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functionCall() {}
	// $ANTLR start "functionCall"
	// HqlSqlWalker.g:417:1: functionCall : ( ^(m= METHOD_CALL pathAsIdent ( ^( EXPR_LIST ( expr | query | comparisonExpr )* ) )? ) | ^( AGGREGATE aggregateExpr ) );
	[GrammarRule("functionCall")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> functionCall()
	{
		EnterRule_functionCall();
		EnterRule("functionCall", 45);
		TraceIn("functionCall", 45);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode m = default(IASTNode);
	    IASTNode EXPR_LIST195 = default(IASTNode);
	    IASTNode AGGREGATE199 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> pathAsIdent194 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> expr196 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> query197 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> comparisonExpr198 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> aggregateExpr200 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode m_tree = default(IASTNode);
	    IASTNode EXPR_LIST195_tree = default(IASTNode);
	    IASTNode AGGREGATE199_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "functionCall");
		DebugLocation(417, 1);
		try
		{
			// HqlSqlWalker.g:418:2: ( ^(m= METHOD_CALL pathAsIdent ( ^( EXPR_LIST ( expr | query | comparisonExpr )* ) )? ) | ^( AGGREGATE aggregateExpr ) )
			int alt64=2;
			try { DebugEnterDecision(64, decisionCanBacktrack[64]);
			int LA64_1 = input.LA(1);

			if ((LA64_1==METHOD_CALL))
			{
				alt64 = 1;
			}
			else if ((LA64_1==AGGREGATE))
			{
				alt64 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 64, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:418:4: ^(m= METHOD_CALL pathAsIdent ( ^( EXPR_LIST ( expr | query | comparisonExpr )* ) )? )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(418, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(418, 7);

				_last = (IASTNode)input.LT(1);
				m=(IASTNode)Match(input,METHOD_CALL,Follow._METHOD_CALL_in_functionCall2212); 
				m_tree = (IASTNode)adaptor.DupNode(m);


				root_1 = (IASTNode)adaptor.BecomeRoot(m_tree, root_1);


				DebugLocation(418, 21);
				_inFunctionCall=true;

				Match(input, TokenTypes.Down, null); 
				DebugLocation(418, 45);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._pathAsIdent_in_functionCall2217);
				pathAsIdent194=pathAsIdent();
				PopFollow();

				adaptor.AddChild(root_1, pathAsIdent194.Tree);

				DebugLocation(418, 57);
				// HqlSqlWalker.g:418:57: ( ^( EXPR_LIST ( expr | query | comparisonExpr )* ) )?
				int alt63=2;
				try { DebugEnterSubRule(63);
				try { DebugEnterDecision(63, decisionCanBacktrack[63]);
				int LA63_1 = input.LA(1);

				if ((LA63_1==EXPR_LIST))
				{
					alt63 = 1;
				}
				} finally { DebugExitDecision(63); }
				switch (alt63)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:418:59: ^( EXPR_LIST ( expr | query | comparisonExpr )* )
					{
					DebugLocation(418, 59);

					_last = (IASTNode)input.LT(1);
					{
					IASTNode _save_last_2 = _last;
					IASTNode _first_2 = default(IASTNode);
					IASTNode root_2 = (IASTNode)adaptor.Nil();
					DebugLocation(418, 61);

					_last = (IASTNode)input.LT(1);
					EXPR_LIST195=(IASTNode)Match(input,EXPR_LIST,Follow._EXPR_LIST_in_functionCall2222); 
					EXPR_LIST195_tree = (IASTNode)adaptor.DupNode(EXPR_LIST195);


					root_2 = (IASTNode)adaptor.BecomeRoot(EXPR_LIST195_tree, root_2);


					if (input.LA(1) == TokenTypes.Down) {
					    Match(input, TokenTypes.Down, null); 
					    DebugLocation(418, 71);
					    // HqlSqlWalker.g:418:71: ( expr | query | comparisonExpr )*
					    try { DebugEnterSubRule(62);
					    while (true)
					    {
					    	int alt62=4;
					    	try { DebugEnterDecision(62, decisionCanBacktrack[62]);
					    	switch (input.LA(1))
					    	{
					    	case AGGREGATE:
					    	case BAND:
					    	case BNOT:
					    	case BOR:
					    	case BXOR:
					    	case CASE:
					    	case CASE2:
					    	case COLON:
					    	case COUNT:
					    	case DIV:
					    	case DOT:
					    	case FALSE:
					    	case IDENT:
					    	case INDEX_OP:
					    	case JAVA_CONSTANT:
					    	case METHOD_CALL:
					    	case MINUS:
					    	case NULL:
					    	case NUM_DECIMAL:
					    	case NUM_DOUBLE:
					    	case NUM_FLOAT:
					    	case NUM_INT:
					    	case NUM_LONG:
					    	case PARAM:
					    	case PLUS:
					    	case QUOTED_String:
					    	case STAR:
					    	case TRUE:
					    	case UNARY_MINUS:
					    	case VECTOR_EXPR:
					    	case WEIRD_IDENT:
					    		{
					    		alt62 = 1;
					    		}
					    		break;
					    	case QUERY:
					    	case UNION:
					    		{
					    		alt62 = 2;
					    		}
					    		break;
					    	case BETWEEN:
					    	case EQ:
					    	case EXISTS:
					    	case GE:
					    	case GT:
					    	case IN:
					    	case IS_NOT_NULL:
					    	case IS_NULL:
					    	case LE:
					    	case LIKE:
					    	case LT:
					    	case NE:
					    	case NOT_BETWEEN:
					    	case NOT_IN:
					    	case NOT_LIKE:
					    		{
					    		alt62 = 3;
					    		}
					    		break;
					    	}

					    	} finally { DebugExitDecision(62); }
					    	switch ( alt62 )
					    	{
					    	case 1:
					    		DebugEnterAlt(1);
					    		// HqlSqlWalker.g:418:72: expr
					    		{
					    		DebugLocation(418, 72);

					    		_last = (IASTNode)input.LT(1);
					    		PushFollow(Follow._expr_in_functionCall2225);
					    		expr196=expr();
					    		PopFollow();

					    		adaptor.AddChild(root_2, expr196.Tree);


					    		}
					    		break;
					    	case 2:
					    		DebugEnterAlt(2);
					    		// HqlSqlWalker.g:418:79: query
					    		{
					    		DebugLocation(418, 79);

					    		_last = (IASTNode)input.LT(1);
					    		PushFollow(Follow._query_in_functionCall2229);
					    		query197=query();
					    		PopFollow();

					    		adaptor.AddChild(root_2, query197.Tree);


					    		}
					    		break;
					    	case 3:
					    		DebugEnterAlt(3);
					    		// HqlSqlWalker.g:418:87: comparisonExpr
					    		{
					    		DebugLocation(418, 87);

					    		_last = (IASTNode)input.LT(1);
					    		PushFollow(Follow._comparisonExpr_in_functionCall2233);
					    		comparisonExpr198=comparisonExpr();
					    		PopFollow();

					    		adaptor.AddChild(root_2, comparisonExpr198.Tree);


					    		}
					    		break;

					    	default:
					    		goto loop62;
					    	}
					    }

					    loop62:
					    	;

					    } finally { DebugExitSubRule(62); }


					    Match(input, TokenTypes.Up, null); 
					}
					adaptor.AddChild(root_1, root_2);
					_last = _save_last_2;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(63); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(419, 3);
				 ProcessFunction(m_tree,_inSelect); _inFunctionCall=false; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:420:4: ^( AGGREGATE aggregateExpr )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(420, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(420, 6);

				_last = (IASTNode)input.LT(1);
				AGGREGATE199=(IASTNode)Match(input,AGGREGATE,Follow._AGGREGATE_in_functionCall2252); 
				AGGREGATE199_tree = (IASTNode)adaptor.DupNode(AGGREGATE199);


				root_1 = (IASTNode)adaptor.BecomeRoot(AGGREGATE199_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(420, 16);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._aggregateExpr_in_functionCall2254);
				aggregateExpr200=aggregateExpr();
				PopFollow();

				adaptor.AddChild(root_1, aggregateExpr200.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functionCall", 45);
			LeaveRule("functionCall", 45);
			LeaveRule_functionCall();
	    }
	 	DebugLocation(421, 1);
		} finally { DebugExitRule(GrammarFileName, "functionCall"); }
		return retval;

	}
	// $ANTLR end "functionCall"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_constant() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_constant() {}
	// $ANTLR start "constant"
	// HqlSqlWalker.g:423:1: constant : ( literal | NULL |t= TRUE |f= FALSE | JAVA_CONSTANT );
	[GrammarRule("constant")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> constant()
	{
		EnterRule_constant();
		EnterRule("constant", 46);
		TraceIn("constant", 46);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode t = default(IASTNode);
	    IASTNode f = default(IASTNode);
	    IASTNode NULL202 = default(IASTNode);
	    IASTNode JAVA_CONSTANT203 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> literal201 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode t_tree = default(IASTNode);
	    IASTNode f_tree = default(IASTNode);
	    IASTNode NULL202_tree = default(IASTNode);
	    IASTNode JAVA_CONSTANT203_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(423, 1);
		try
		{
			// HqlSqlWalker.g:424:2: ( literal | NULL |t= TRUE |f= FALSE | JAVA_CONSTANT )
			int alt65=5;
			try { DebugEnterDecision(65, decisionCanBacktrack[65]);
			switch (input.LA(1))
			{
			case NUM_DECIMAL:
			case NUM_DOUBLE:
			case NUM_FLOAT:
			case NUM_INT:
			case NUM_LONG:
			case QUOTED_String:
				{
				alt65 = 1;
				}
				break;
			case NULL:
				{
				alt65 = 2;
				}
				break;
			case TRUE:
				{
				alt65 = 3;
				}
				break;
			case FALSE:
				{
				alt65 = 4;
				}
				break;
			case JAVA_CONSTANT:
				{
				alt65 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 65, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:424:4: literal
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(424, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._literal_in_constant2267);
				literal201=literal();
				PopFollow();

				adaptor.AddChild(root_0, literal201.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:425:4: NULL
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(425, 4);

				_last = (IASTNode)input.LT(1);
				NULL202=(IASTNode)Match(input,NULL,Follow._NULL_in_constant2272); 
				NULL202_tree = (IASTNode)adaptor.DupNode(NULL202);


				adaptor.AddChild(root_0, NULL202_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:426:4: t= TRUE
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(426, 5);

				_last = (IASTNode)input.LT(1);
				t=(IASTNode)Match(input,TRUE,Follow._TRUE_in_constant2279); 
				t_tree = (IASTNode)adaptor.DupNode(t);


				adaptor.AddChild(root_0, t_tree);

				DebugLocation(426, 11);
				 ProcessBool(t); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:427:4: f= FALSE
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(427, 5);

				_last = (IASTNode)input.LT(1);
				f=(IASTNode)Match(input,FALSE,Follow._FALSE_in_constant2289); 
				f_tree = (IASTNode)adaptor.DupNode(f);


				adaptor.AddChild(root_0, f_tree);

				DebugLocation(427, 12);
				 ProcessBool(f); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:428:4: JAVA_CONSTANT
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(428, 4);

				_last = (IASTNode)input.LT(1);
				JAVA_CONSTANT203=(IASTNode)Match(input,JAVA_CONSTANT,Follow._JAVA_CONSTANT_in_constant2296); 
				JAVA_CONSTANT203_tree = (IASTNode)adaptor.DupNode(JAVA_CONSTANT203);


				adaptor.AddChild(root_0, JAVA_CONSTANT203_tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("constant", 46);
			LeaveRule("constant", 46);
			LeaveRule_constant();
	    }
	 	DebugLocation(429, 1);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_literal() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_literal() {}
	// $ANTLR start "literal"
	// HqlSqlWalker.g:431:1: literal : ( numericLiteral | stringLiteral );
	[GrammarRule("literal")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 47);
		TraceIn("literal", 47);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    AstTreeRuleReturnScope<IASTNode, IASTNode> numericLiteral204 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> stringLiteral205 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);


		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(431, 1);
		try
		{
			// HqlSqlWalker.g:432:2: ( numericLiteral | stringLiteral )
			int alt66=2;
			try { DebugEnterDecision(66, decisionCanBacktrack[66]);
			int LA66_1 = input.LA(1);

			if (((LA66_1>=NUM_DECIMAL && LA66_1<=NUM_LONG)))
			{
				alt66 = 1;
			}
			else if ((LA66_1==QUOTED_String))
			{
				alt66 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:432:4: numericLiteral
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(432, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._numericLiteral_in_literal2307);
				numericLiteral204=numericLiteral();
				PopFollow();

				adaptor.AddChild(root_0, numericLiteral204.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:433:4: stringLiteral
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(433, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._stringLiteral_in_literal2312);
				stringLiteral205=stringLiteral();
				PopFollow();

				adaptor.AddChild(root_0, stringLiteral205.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("literal", 47);
			LeaveRule("literal", 47);
			LeaveRule_literal();
	    }
	 	DebugLocation(434, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_numericLiteral() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_numericLiteral() {}
	// $ANTLR start "numericLiteral"
	// HqlSqlWalker.g:436:1: numericLiteral : ( NUM_INT | NUM_LONG | NUM_FLOAT | NUM_DOUBLE | NUM_DECIMAL );
	[GrammarRule("numericLiteral")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> numericLiteral()
	{
		EnterRule_numericLiteral();
		EnterRule("numericLiteral", 48);
		TraceIn("numericLiteral", 48);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode set206 = default(IASTNode);

	    IASTNode set206_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "numericLiteral");
		DebugLocation(436, 1);
		try
		{
			// HqlSqlWalker.g:441:2: ( NUM_INT | NUM_LONG | NUM_FLOAT | NUM_DOUBLE | NUM_DECIMAL )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(441, 2);

			_last = (IASTNode)input.LT(1);
			set206=(IASTNode)input.LT(1);
			if ((input.LA(1)>=NUM_DECIMAL && input.LA(1)<=NUM_LONG))
			{
				input.Consume();
				set206_tree = (IASTNode)adaptor.DupNode(set206);


				adaptor.AddChild(root_0, set206_tree);

				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			 


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				ProcessNumericLiteral( retval.Tree );

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("numericLiteral", 48);
			LeaveRule("numericLiteral", 48);
			LeaveRule_numericLiteral();
	    }
	 	DebugLocation(446, 1);
		} finally { DebugExitRule(GrammarFileName, "numericLiteral"); }
		return retval;

	}
	// $ANTLR end "numericLiteral"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_stringLiteral() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_stringLiteral() {}
	// $ANTLR start "stringLiteral"
	// HqlSqlWalker.g:448:1: stringLiteral : QUOTED_String ;
	[GrammarRule("stringLiteral")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> stringLiteral()
	{
		EnterRule_stringLiteral();
		EnterRule("stringLiteral", 49);
		TraceIn("stringLiteral", 49);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode QUOTED_String207 = default(IASTNode);

	    IASTNode QUOTED_String207_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "stringLiteral");
		DebugLocation(448, 1);
		try
		{
			// HqlSqlWalker.g:449:2: ( QUOTED_String )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:449:4: QUOTED_String
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(449, 4);

			_last = (IASTNode)input.LT(1);
			QUOTED_String207=(IASTNode)Match(input,QUOTED_String,Follow._QUOTED_String_in_stringLiteral2359); 
			QUOTED_String207_tree = (IASTNode)adaptor.DupNode(QUOTED_String207);


			adaptor.AddChild(root_0, QUOTED_String207_tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stringLiteral", 49);
			LeaveRule("stringLiteral", 49);
			LeaveRule_stringLiteral();
	    }
	 	DebugLocation(450, 1);
		} finally { DebugExitRule(GrammarFileName, "stringLiteral"); }
		return retval;

	}
	// $ANTLR end "stringLiteral"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_identifier() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_identifier() {}
	// $ANTLR start "identifier"
	// HqlSqlWalker.g:452:1: identifier : ( IDENT | WEIRD_IDENT ) ;
	[GrammarRule("identifier")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> identifier()
	{
		EnterRule_identifier();
		EnterRule("identifier", 50);
		TraceIn("identifier", 50);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode set208 = default(IASTNode);

	    IASTNode set208_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "identifier");
		DebugLocation(452, 1);
		try
		{
			// HqlSqlWalker.g:453:2: ( ( IDENT | WEIRD_IDENT ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(453, 2);

			_last = (IASTNode)input.LT(1);
			set208=(IASTNode)input.LT(1);
			if (input.LA(1)==IDENT||input.LA(1)==WEIRD_IDENT)
			{
				input.Consume();
				set208_tree = (IASTNode)adaptor.DupNode(set208);


				adaptor.AddChild(root_0, set208_tree);

				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			 


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("identifier", 50);
			LeaveRule("identifier", 50);
			LeaveRule_identifier();
	    }
	 	DebugLocation(454, 1);
		} finally { DebugExitRule(GrammarFileName, "identifier"); }
		return retval;

	}
	// $ANTLR end "identifier"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_addrExpr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_addrExpr() {}
	// $ANTLR start "addrExpr"
	// HqlSqlWalker.g:456:1: addrExpr[ bool root ] : ( addrExprDot[root] | addrExprIndex[root] | addrExprIdent[root] );
	[GrammarRule("addrExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> addrExpr(bool root)
	{
		EnterRule_addrExpr();
		EnterRule("addrExpr", 51);
		TraceIn("addrExpr", 51);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprDot209 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprIndex210 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprIdent211 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);


		try { DebugEnterRule(GrammarFileName, "addrExpr");
		DebugLocation(456, 2);
		try
		{
			// HqlSqlWalker.g:457:2: ( addrExprDot[root] | addrExprIndex[root] | addrExprIdent[root] )
			int alt67=3;
			try { DebugEnterDecision(67, decisionCanBacktrack[67]);
			switch (input.LA(1))
			{
			case DOT:
				{
				alt67 = 1;
				}
				break;
			case INDEX_OP:
				{
				alt67 = 2;
				}
				break;
			case IDENT:
			case WEIRD_IDENT:
				{
				alt67 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 67, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:457:4: addrExprDot[root]
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(457, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._addrExprDot_in_addrExpr2389);
				addrExprDot209=addrExprDot(root);
				PopFollow();

				adaptor.AddChild(root_0, addrExprDot209.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:458:4: addrExprIndex[root]
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(458, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._addrExprIndex_in_addrExpr2396);
				addrExprIndex210=addrExprIndex(root);
				PopFollow();

				adaptor.AddChild(root_0, addrExprIndex210.Tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:459:4: addrExprIdent[root]
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(459, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._addrExprIdent_in_addrExpr2403);
				addrExprIdent211=addrExprIdent(root);
				PopFollow();

				adaptor.AddChild(root_0, addrExprIdent211.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("addrExpr", 51);
			LeaveRule("addrExpr", 51);
			LeaveRule_addrExpr();
	    }
	 	DebugLocation(460, 2);
		} finally { DebugExitRule(GrammarFileName, "addrExpr"); }
		return retval;

	}
	// $ANTLR end "addrExpr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_addrExprDot() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_addrExprDot() {}
	// $ANTLR start "addrExprDot"
	// HqlSqlWalker.g:462:1: addrExprDot[ bool root ] : ^(d= DOT lhs= addrExprLhs rhs= propertyName ) -> ^( $d $lhs $rhs) ;
	[GrammarRule("addrExprDot")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprDot(bool root)
	{
		EnterRule_addrExprDot();
		EnterRule("addrExprDot", 52);
		TraceIn("addrExprDot", 52);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode d = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> lhs = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> rhs = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode d_tree = default(IASTNode);
	    RewriteRuleNodeStream stream_DOT=new RewriteRuleNodeStream(adaptor,"token DOT");
	    RewriteRuleSubtreeStream stream_addrExprLhs=new RewriteRuleSubtreeStream(adaptor,"rule addrExprLhs");
	    RewriteRuleSubtreeStream stream_propertyName=new RewriteRuleSubtreeStream(adaptor,"rule propertyName");
		try { DebugEnterRule(GrammarFileName, "addrExprDot");
		DebugLocation(462, 1);
		try
		{
			// HqlSqlWalker.g:467:2: ( ^(d= DOT lhs= addrExprLhs rhs= propertyName ) -> ^( $d $lhs $rhs) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:467:4: ^(d= DOT lhs= addrExprLhs rhs= propertyName )
			{
			DebugLocation(467, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(467, 7);

			_last = (IASTNode)input.LT(1);
			d=(IASTNode)Match(input,DOT,Follow._DOT_in_addrExprDot2427); 
			 
			stream_DOT.Add(d);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(467, 15);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._addrExprLhs_in_addrExprDot2431);
			lhs=addrExprLhs();
			PopFollow();

			stream_addrExprLhs.Add(lhs.Tree);

			DebugLocation(467, 31);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._propertyName_in_addrExprDot2435);
			rhs=propertyName();
			PopFollow();

			stream_propertyName.Add(rhs.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: d, lhs, rhs
			// token labels: d
			// rule labels: lhs, rhs, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_d=new RewriteRuleNodeStream(adaptor,"token d",d);
			RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs",lhs!=null?lhs.Tree:null);
			RewriteRuleSubtreeStream stream_rhs=new RewriteRuleSubtreeStream(adaptor,"rule rhs",rhs!=null?rhs.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 468:3: -> ^( $d $lhs $rhs)
			{
				DebugLocation(468, 6);
				// HqlSqlWalker.g:468:6: ^( $d $lhs $rhs)
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(468, 9);
				root_1 = (IASTNode)adaptor.BecomeRoot(stream_d.NextNode(), root_1);

				DebugLocation(468, 12);
				adaptor.AddChild(root_1, stream_lhs.NextTree());
				DebugLocation(468, 17);
				adaptor.AddChild(root_1, stream_rhs.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				LookupProperty(retval.Tree,root,false);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("addrExprDot", 52);
			LeaveRule("addrExprDot", 52);
			LeaveRule_addrExprDot();
	    }
	 	DebugLocation(469, 1);
		} finally { DebugExitRule(GrammarFileName, "addrExprDot"); }
		return retval;

	}
	// $ANTLR end "addrExprDot"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_addrExprIndex() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_addrExprIndex() {}
	// $ANTLR start "addrExprIndex"
	// HqlSqlWalker.g:471:1: addrExprIndex[ bool root ] : ^(i= INDEX_OP lhs2= addrExprLhs rhs2= expr ) -> ^( $i $lhs2 $rhs2) ;
	[GrammarRule("addrExprIndex")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprIndex(bool root)
	{
		EnterRule_addrExprIndex();
		EnterRule("addrExprIndex", 53);
		TraceIn("addrExprIndex", 53);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode i = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> lhs2 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> rhs2 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode i_tree = default(IASTNode);
	    RewriteRuleNodeStream stream_INDEX_OP=new RewriteRuleNodeStream(adaptor,"token INDEX_OP");
	    RewriteRuleSubtreeStream stream_addrExprLhs=new RewriteRuleSubtreeStream(adaptor,"rule addrExprLhs");
	    RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "addrExprIndex");
		DebugLocation(471, 1);
		try
		{
			// HqlSqlWalker.g:477:2: ( ^(i= INDEX_OP lhs2= addrExprLhs rhs2= expr ) -> ^( $i $lhs2 $rhs2) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:477:4: ^(i= INDEX_OP lhs2= addrExprLhs rhs2= expr )
			{
			DebugLocation(477, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(477, 7);

			_last = (IASTNode)input.LT(1);
			i=(IASTNode)Match(input,INDEX_OP,Follow._INDEX_OP_in_addrExprIndex2474); 
			 
			stream_INDEX_OP.Add(i);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(477, 21);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._addrExprLhs_in_addrExprIndex2478);
			lhs2=addrExprLhs();
			PopFollow();

			stream_addrExprLhs.Add(lhs2.Tree);

			DebugLocation(477, 38);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._expr_in_addrExprIndex2482);
			rhs2=expr();
			PopFollow();

			stream_expr.Add(rhs2.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: i, lhs2, rhs2
			// token labels: i
			// rule labels: lhs2, rhs2, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_i=new RewriteRuleNodeStream(adaptor,"token i",i);
			RewriteRuleSubtreeStream stream_lhs2=new RewriteRuleSubtreeStream(adaptor,"rule lhs2",lhs2!=null?lhs2.Tree:null);
			RewriteRuleSubtreeStream stream_rhs2=new RewriteRuleSubtreeStream(adaptor,"rule rhs2",rhs2!=null?rhs2.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 478:3: -> ^( $i $lhs2 $rhs2)
			{
				DebugLocation(478, 6);
				// HqlSqlWalker.g:478:6: ^( $i $lhs2 $rhs2)
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(478, 9);
				root_1 = (IASTNode)adaptor.BecomeRoot(stream_i.NextNode(), root_1);

				DebugLocation(478, 12);
				adaptor.AddChild(root_1, stream_lhs2.NextTree());
				DebugLocation(478, 18);
				adaptor.AddChild(root_1, stream_rhs2.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				ProcessIndex(retval.Tree);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("addrExprIndex", 53);
			LeaveRule("addrExprIndex", 53);
			LeaveRule_addrExprIndex();
	    }
	 	DebugLocation(479, 1);
		} finally { DebugExitRule(GrammarFileName, "addrExprIndex"); }
		return retval;

	}
	// $ANTLR end "addrExprIndex"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_addrExprIdent() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_addrExprIdent() {}
	// $ANTLR start "addrExprIdent"
	// HqlSqlWalker.g:481:1: addrExprIdent[ bool root ] : p= identifier -> {IsNonQualifiedPropertyRef($p.tree)}? ^() -> ^() ;
	[GrammarRule("addrExprIdent")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprIdent(bool root)
	{
		EnterRule_addrExprIdent();
		EnterRule("addrExprIdent", 54);
		TraceIn("addrExprIdent", 54);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    AstTreeRuleReturnScope<IASTNode, IASTNode> p = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		try { DebugEnterRule(GrammarFileName, "addrExprIdent");
		DebugLocation(481, 1);
		try
		{
			// HqlSqlWalker.g:482:2: (p= identifier -> {IsNonQualifiedPropertyRef($p.tree)}? ^() -> ^() )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:482:4: p= identifier
			{
			DebugLocation(482, 5);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._identifier_in_addrExprIdent2514);
			p=identifier();
			PopFollow();

			stream_identifier.Add(p.Tree);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 483:2: -> {IsNonQualifiedPropertyRef($p.tree)}? ^()
			if (IsNonQualifiedPropertyRef((p!=null?((IASTNode)p.Tree):default(IASTNode))))
			{
				DebugLocation(483, 43);
				// HqlSqlWalker.g:483:43: ^()
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(483, 45);
				root_1 = (IASTNode)adaptor.BecomeRoot(LookupNonQualifiedProperty((p!=null?((IASTNode)p.Tree):default(IASTNode))), root_1);

				adaptor.AddChild(root_0, root_1);
				}

			}
			else // 484:2: -> ^()
			{
				DebugLocation(484, 5);
				// HqlSqlWalker.g:484:5: ^()
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(484, 7);
				root_1 = (IASTNode)adaptor.BecomeRoot(Resolve((p!=null?((IASTNode)p.Tree):default(IASTNode))), root_1);

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("addrExprIdent", 54);
			LeaveRule("addrExprIdent", 54);
			LeaveRule_addrExprIdent();
	    }
	 	DebugLocation(485, 1);
		} finally { DebugExitRule(GrammarFileName, "addrExprIdent"); }
		return retval;

	}
	// $ANTLR end "addrExprIdent"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_addrExprLhs() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_addrExprLhs() {}
	// $ANTLR start "addrExprLhs"
	// HqlSqlWalker.g:487:1: addrExprLhs : addrExpr[ false ] ;
	[GrammarRule("addrExprLhs")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprLhs()
	{
		EnterRule_addrExprLhs();
		EnterRule("addrExprLhs", 55);
		TraceIn("addrExprLhs", 55);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    AstTreeRuleReturnScope<IASTNode, IASTNode> addrExpr212 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);


		try { DebugEnterRule(GrammarFileName, "addrExprLhs");
		DebugLocation(487, 1);
		try
		{
			// HqlSqlWalker.g:488:2: ( addrExpr[ false ] )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:488:4: addrExpr[ false ]
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(488, 4);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._addrExpr_in_addrExprLhs2542);
			addrExpr212=addrExpr(false);
			PopFollow();

			adaptor.AddChild(root_0, addrExpr212.Tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("addrExprLhs", 55);
			LeaveRule("addrExprLhs", 55);
			LeaveRule_addrExprLhs();
	    }
	 	DebugLocation(489, 1);
		} finally { DebugExitRule(GrammarFileName, "addrExprLhs"); }
		return retval;

	}
	// $ANTLR end "addrExprLhs"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_propertyName() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_propertyName() {}
	// $ANTLR start "propertyName"
	// HqlSqlWalker.g:491:1: propertyName : ( identifier | CLASS | ELEMENTS | INDICES );
	[GrammarRule("propertyName")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> propertyName()
	{
		EnterRule_propertyName();
		EnterRule("propertyName", 56);
		TraceIn("propertyName", 56);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode CLASS214 = default(IASTNode);
	    IASTNode ELEMENTS215 = default(IASTNode);
	    IASTNode INDICES216 = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> identifier213 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode CLASS214_tree = default(IASTNode);
	    IASTNode ELEMENTS215_tree = default(IASTNode);
	    IASTNode INDICES216_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "propertyName");
		DebugLocation(491, 1);
		try
		{
			// HqlSqlWalker.g:492:2: ( identifier | CLASS | ELEMENTS | INDICES )
			int alt68=4;
			try { DebugEnterDecision(68, decisionCanBacktrack[68]);
			switch (input.LA(1))
			{
			case IDENT:
			case WEIRD_IDENT:
				{
				alt68 = 1;
				}
				break;
			case CLASS:
				{
				alt68 = 2;
				}
				break;
			case ELEMENTS:
				{
				alt68 = 3;
				}
				break;
			case INDICES:
				{
				alt68 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 68, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:492:4: identifier
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(492, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._identifier_in_propertyName2555);
				identifier213=identifier();
				PopFollow();

				adaptor.AddChild(root_0, identifier213.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:493:4: CLASS
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(493, 4);

				_last = (IASTNode)input.LT(1);
				CLASS214=(IASTNode)Match(input,CLASS,Follow._CLASS_in_propertyName2560); 
				CLASS214_tree = (IASTNode)adaptor.DupNode(CLASS214);


				adaptor.AddChild(root_0, CLASS214_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:494:4: ELEMENTS
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(494, 4);

				_last = (IASTNode)input.LT(1);
				ELEMENTS215=(IASTNode)Match(input,ELEMENTS,Follow._ELEMENTS_in_propertyName2565); 
				ELEMENTS215_tree = (IASTNode)adaptor.DupNode(ELEMENTS215);


				adaptor.AddChild(root_0, ELEMENTS215_tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:495:4: INDICES
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(495, 4);

				_last = (IASTNode)input.LT(1);
				INDICES216=(IASTNode)Match(input,INDICES,Follow._INDICES_in_propertyName2570); 
				INDICES216_tree = (IASTNode)adaptor.DupNode(INDICES216);


				adaptor.AddChild(root_0, INDICES216_tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyName", 56);
			LeaveRule("propertyName", 56);
			LeaveRule_propertyName();
	    }
	 	DebugLocation(496, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyName"); }
		return retval;

	}
	// $ANTLR end "propertyName"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_propertyRef() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_propertyRef() {}
	// $ANTLR start "propertyRef"
	// HqlSqlWalker.g:498:1: propertyRef : ( propertyRefPath | propertyRefIdent );
	[GrammarRule("propertyRef")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRef()
	{
		EnterRule_propertyRef();
		EnterRule("propertyRef", 57);
		TraceIn("propertyRef", 57);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRefPath217 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRefIdent218 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);


		try { DebugEnterRule(GrammarFileName, "propertyRef");
		DebugLocation(498, 1);
		try
		{
			// HqlSqlWalker.g:499:2: ( propertyRefPath | propertyRefIdent )
			int alt69=2;
			try { DebugEnterDecision(69, decisionCanBacktrack[69]);
			int LA69_1 = input.LA(1);

			if ((LA69_1==DOT))
			{
				alt69 = 1;
			}
			else if ((LA69_1==IDENT||LA69_1==WEIRD_IDENT))
			{
				alt69 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 69, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:499:4: propertyRefPath
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(499, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._propertyRefPath_in_propertyRef2582);
				propertyRefPath217=propertyRefPath();
				PopFollow();

				adaptor.AddChild(root_0, propertyRefPath217.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:500:4: propertyRefIdent
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(500, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._propertyRefIdent_in_propertyRef2587);
				propertyRefIdent218=propertyRefIdent();
				PopFollow();

				adaptor.AddChild(root_0, propertyRefIdent218.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyRef", 57);
			LeaveRule("propertyRef", 57);
			LeaveRule_propertyRef();
	    }
	 	DebugLocation(501, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyRef"); }
		return retval;

	}
	// $ANTLR end "propertyRef"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_propertyRefPath() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_propertyRefPath() {}
	// $ANTLR start "propertyRefPath"
	// HqlSqlWalker.g:503:1: propertyRefPath : ^(d= DOT lhs= propertyRefLhs rhs= propertyName ) -> ^( $d $lhs $rhs) ;
	[GrammarRule("propertyRefPath")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRefPath()
	{
		EnterRule_propertyRefPath();
		EnterRule("propertyRefPath", 58);
		TraceIn("propertyRefPath", 58);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode d = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> lhs = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> rhs = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode d_tree = default(IASTNode);
	    RewriteRuleNodeStream stream_DOT=new RewriteRuleNodeStream(adaptor,"token DOT");
	    RewriteRuleSubtreeStream stream_propertyRefLhs=new RewriteRuleSubtreeStream(adaptor,"rule propertyRefLhs");
	    RewriteRuleSubtreeStream stream_propertyName=new RewriteRuleSubtreeStream(adaptor,"rule propertyName");
		try { DebugEnterRule(GrammarFileName, "propertyRefPath");
		DebugLocation(503, 1);
		try
		{
			// HqlSqlWalker.g:508:2: ( ^(d= DOT lhs= propertyRefLhs rhs= propertyName ) -> ^( $d $lhs $rhs) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:508:4: ^(d= DOT lhs= propertyRefLhs rhs= propertyName )
			{
			DebugLocation(508, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(508, 7);

			_last = (IASTNode)input.LT(1);
			d=(IASTNode)Match(input,DOT,Follow._DOT_in_propertyRefPath2607); 
			 
			stream_DOT.Add(d);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(508, 15);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._propertyRefLhs_in_propertyRefPath2611);
			lhs=propertyRefLhs();
			PopFollow();

			stream_propertyRefLhs.Add(lhs.Tree);

			DebugLocation(508, 34);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._propertyName_in_propertyRefPath2615);
			rhs=propertyName();
			PopFollow();

			stream_propertyName.Add(rhs.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: d, lhs, rhs
			// token labels: d
			// rule labels: lhs, rhs, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_d=new RewriteRuleNodeStream(adaptor,"token d",d);
			RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs",lhs!=null?lhs.Tree:null);
			RewriteRuleSubtreeStream stream_rhs=new RewriteRuleSubtreeStream(adaptor,"rule rhs",rhs!=null?rhs.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 509:3: -> ^( $d $lhs $rhs)
			{
				DebugLocation(509, 6);
				// HqlSqlWalker.g:509:6: ^( $d $lhs $rhs)
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(509, 9);
				root_1 = (IASTNode)adaptor.BecomeRoot(stream_d.NextNode(), root_1);

				DebugLocation(509, 12);
				adaptor.AddChild(root_1, stream_lhs.NextTree());
				DebugLocation(509, 17);
				adaptor.AddChild(root_1, stream_rhs.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				// This gives lookupProperty() a chance to transform the tree to process collection properties (.elements, etc).
				retval.Tree = LookupProperty((IASTNode) retval.Tree,false,true);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyRefPath", 58);
			LeaveRule("propertyRefPath", 58);
			LeaveRule_propertyRefPath();
	    }
	 	DebugLocation(510, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyRefPath"); }
		return retval;

	}
	// $ANTLR end "propertyRefPath"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_propertyRefIdent() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_propertyRefIdent() {}
	// $ANTLR start "propertyRefIdent"
	// HqlSqlWalker.g:512:1: propertyRefIdent : p= identifier ;
	[GrammarRule("propertyRefIdent")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRefIdent()
	{
		EnterRule_propertyRefIdent();
		EnterRule("propertyRefIdent", 59);
		TraceIn("propertyRefIdent", 59);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    AstTreeRuleReturnScope<IASTNode, IASTNode> p = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);


		try { DebugEnterRule(GrammarFileName, "propertyRefIdent");
		DebugLocation(512, 1);
		try
		{
			// HqlSqlWalker.g:526:2: (p= identifier )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:526:4: p= identifier
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(526, 5);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._identifier_in_propertyRefIdent2652);
			p=identifier();
			PopFollow();

			adaptor.AddChild(root_0, p.Tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				// In many cases, things other than property-refs are recognized
				// by this propertyRef rule.  Some of those I have seen:
				//  1) select-clause from-aliases
				//  2) sql-functions
				if ( IsNonQualifiedPropertyRef((p!=null?((IASTNode)p.Tree):default(IASTNode))) ) {
					retval.Tree = LookupNonQualifiedProperty((p!=null?((IASTNode)p.Tree):default(IASTNode)));
				}
				else {
					Resolve((p!=null?((IASTNode)p.Tree):default(IASTNode)));
					retval.Tree = (p!=null?((IASTNode)p.Tree):default(IASTNode));
				}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyRefIdent", 59);
			LeaveRule("propertyRefIdent", 59);
			LeaveRule_propertyRefIdent();
	    }
	 	DebugLocation(527, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyRefIdent"); }
		return retval;

	}
	// $ANTLR end "propertyRefIdent"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_propertyRefLhs() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_propertyRefLhs() {}
	// $ANTLR start "propertyRefLhs"
	// HqlSqlWalker.g:529:1: propertyRefLhs : propertyRef ;
	[GrammarRule("propertyRefLhs")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRefLhs()
	{
		EnterRule_propertyRefLhs();
		EnterRule("propertyRefLhs", 60);
		TraceIn("propertyRefLhs", 60);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRef219 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);


		try { DebugEnterRule(GrammarFileName, "propertyRefLhs");
		DebugLocation(529, 1);
		try
		{
			// HqlSqlWalker.g:530:2: ( propertyRef )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:530:4: propertyRef
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(530, 4);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._propertyRef_in_propertyRefLhs2664);
			propertyRef219=propertyRef();
			PopFollow();

			adaptor.AddChild(root_0, propertyRef219.Tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyRefLhs", 60);
			LeaveRule("propertyRefLhs", 60);
			LeaveRule_propertyRefLhs();
	    }
	 	DebugLocation(531, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyRefLhs"); }
		return retval;

	}
	// $ANTLR end "propertyRefLhs"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_aliasRef() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_aliasRef() {}
	// $ANTLR start "aliasRef"
	// HqlSqlWalker.g:533:1: aliasRef : i= identifier ;
	[GrammarRule("aliasRef")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> aliasRef()
	{
		EnterRule_aliasRef();
		EnterRule("aliasRef", 61);
		TraceIn("aliasRef", 61);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    AstTreeRuleReturnScope<IASTNode, IASTNode> i = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);


		try { DebugEnterRule(GrammarFileName, "aliasRef");
		DebugLocation(533, 1);
		try
		{
			// HqlSqlWalker.g:538:2: (i= identifier )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:538:4: i= identifier
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(538, 5);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._identifier_in_aliasRef2685);
			i=identifier();
			PopFollow();

			adaptor.AddChild(root_0, i.Tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					LookupAlias(retval.Tree);
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("aliasRef", 61);
			LeaveRule("aliasRef", 61);
			LeaveRule_aliasRef();
	    }
	 	DebugLocation(540, 1);
		} finally { DebugExitRule(GrammarFileName, "aliasRef"); }
		return retval;

	}
	// $ANTLR end "aliasRef"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parameter() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parameter() {}
	// $ANTLR start "parameter"
	// HqlSqlWalker.g:542:1: parameter : ( ^(c= COLON a= identifier ) -> ^() | ^(p= PARAM (n= NUM_INT )? ) -> {n != null}? ^() -> ^() );
	[GrammarRule("parameter")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> parameter()
	{
		EnterRule_parameter();
		EnterRule("parameter", 62);
		TraceIn("parameter", 62);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode c = default(IASTNode);
	    IASTNode p = default(IASTNode);
	    IASTNode n = default(IASTNode);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> a = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

	    IASTNode c_tree = default(IASTNode);
	    IASTNode p_tree = default(IASTNode);
	    IASTNode n_tree = default(IASTNode);
	    RewriteRuleNodeStream stream_COLON=new RewriteRuleNodeStream(adaptor,"token COLON");
	    RewriteRuleNodeStream stream_PARAM=new RewriteRuleNodeStream(adaptor,"token PARAM");
	    RewriteRuleNodeStream stream_NUM_INT=new RewriteRuleNodeStream(adaptor,"token NUM_INT");
	    RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		try { DebugEnterRule(GrammarFileName, "parameter");
		DebugLocation(542, 1);
		try
		{
			// HqlSqlWalker.g:543:2: ( ^(c= COLON a= identifier ) -> ^() | ^(p= PARAM (n= NUM_INT )? ) -> {n != null}? ^() -> ^() )
			int alt71=2;
			try { DebugEnterDecision(71, decisionCanBacktrack[71]);
			int LA71_1 = input.LA(1);

			if ((LA71_1==COLON))
			{
				alt71 = 1;
			}
			else if ((LA71_1==PARAM))
			{
				alt71 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 71, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:543:4: ^(c= COLON a= identifier )
				{
				DebugLocation(543, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(543, 7);

				_last = (IASTNode)input.LT(1);
				c=(IASTNode)Match(input,COLON,Follow._COLON_in_parameter2703); 
				 
				stream_COLON.Add(c);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(543, 15);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._identifier_in_parameter2707);
				a=identifier();
				PopFollow();

				stream_identifier.Add(a.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 545:3: -> ^()
				{
					DebugLocation(545, 6);
					// HqlSqlWalker.g:545:6: ^()
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(545, 8);
					root_1 = (IASTNode)adaptor.BecomeRoot(GenerateNamedParameter( c, (a!=null?((IASTNode)a.Tree):default(IASTNode)) ), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:546:4: ^(p= PARAM (n= NUM_INT )? )
				{
				DebugLocation(546, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(546, 7);

				_last = (IASTNode)input.LT(1);
				p=(IASTNode)Match(input,PARAM,Follow._PARAM_in_parameter2728); 
				 
				stream_PARAM.Add(p);


				if (input.LA(1) == TokenTypes.Down) {
				    Match(input, TokenTypes.Down, null); 
				    DebugLocation(546, 14);
				    // HqlSqlWalker.g:546:14: (n= NUM_INT )?
				    int alt70=2;
				    try { DebugEnterSubRule(70);
				    try { DebugEnterDecision(70, decisionCanBacktrack[70]);
				    int LA70_1 = input.LA(1);

				    if ((LA70_1==NUM_INT))
				    {
				    	alt70 = 1;
				    }
				    } finally { DebugExitDecision(70); }
				    switch (alt70)
				    {
				    case 1:
				    	DebugEnterAlt(1);
				    	// HqlSqlWalker.g:546:15: n= NUM_INT
				    	{
				    	DebugLocation(546, 16);

				    	_last = (IASTNode)input.LT(1);
				    	n=(IASTNode)Match(input,NUM_INT,Follow._NUM_INT_in_parameter2733); 
				    	 
				    	stream_NUM_INT.Add(n);


				    	}
				    	break;

				    }
				    } finally { DebugExitSubRule(70); }


				    Match(input, TokenTypes.Up, null); 
				}
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 547:3: -> {n != null}? ^()
				if (n != null)
				{
					DebugLocation(547, 19);
					// HqlSqlWalker.g:547:19: ^()
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(547, 21);
					root_1 = (IASTNode)adaptor.BecomeRoot(GenerateNamedParameter( p, n ), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 548:3: -> ^()
				{
					DebugLocation(548, 6);
					// HqlSqlWalker.g:548:6: ^()
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(548, 8);
					root_1 = (IASTNode)adaptor.BecomeRoot(GeneratePositionalParameter( p ), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parameter", 62);
			LeaveRule("parameter", 62);
			LeaveRule_parameter();
	    }
	 	DebugLocation(549, 1);
		} finally { DebugExitRule(GrammarFileName, "parameter"); }
		return retval;

	}
	// $ANTLR end "parameter"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_numericInteger() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_numericInteger() {}
	// $ANTLR start "numericInteger"
	// HqlSqlWalker.g:551:1: numericInteger : NUM_INT ;
	[GrammarRule("numericInteger")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> numericInteger()
	{
		EnterRule_numericInteger();
		EnterRule("numericInteger", 63);
		TraceIn("numericInteger", 63);
	    AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
	    retval.Start = (IASTNode)input.LT(1);

	    IASTNode root_0 = default(IASTNode);

	    IASTNode _first_0 = default(IASTNode);
	    IASTNode _last = default(IASTNode);

	    IASTNode NUM_INT220 = default(IASTNode);

	    IASTNode NUM_INT220_tree = default(IASTNode);

		try { DebugEnterRule(GrammarFileName, "numericInteger");
		DebugLocation(551, 1);
		try
		{
			// HqlSqlWalker.g:552:2: ( NUM_INT )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:552:4: NUM_INT
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(552, 4);

			_last = (IASTNode)input.LT(1);
			NUM_INT220=(IASTNode)Match(input,NUM_INT,Follow._NUM_INT_in_numericInteger2766); 
			NUM_INT220_tree = (IASTNode)adaptor.DupNode(NUM_INT220);


			adaptor.AddChild(root_0, NUM_INT220_tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("numericInteger", 63);
			LeaveRule("numericInteger", 63);
			LeaveRule_numericInteger();
	    }
	 	DebugLocation(553, 1);
		} finally { DebugExitRule(GrammarFileName, "numericInteger"); }
		return retval;

	}
	// $ANTLR end "numericInteger"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _selectStatement_in_statement168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _updateStatement_in_statement172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _deleteStatement_in_statement176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _insertStatement_in_statement180 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_in_selectStatement191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPDATE_in_updateStatement215 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _VERSIONED_in_updateStatement222 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _fromClause_in_updateStatement228 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _setClause_in_updateStatement232 = new BitSet(new ulong[]{0x8UL,0x0UL,0x4UL});
		public static readonly BitSet _whereClause_in_updateStatement237 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DELETE_in_deleteStatement280 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _fromClause_in_deleteStatement284 = new BitSet(new ulong[]{0x8UL,0x0UL,0x4UL});
		public static readonly BitSet _whereClause_in_deleteStatement287 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INSERT_in_insertStatement317 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _intoClause_in_insertStatement321 = new BitSet(new ulong[]{0x0UL,0x1000020000000000UL});
		public static readonly BitSet _query_in_insertStatement323 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INTO_in_intoClause347 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _path_in_intoClause354 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _insertablePropertySpec_in_intoClause359 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _RANGE_in_insertablePropertySpec375 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_insertablePropertySpec378 = new BitSet(new ulong[]{0x80000000000008UL});
		public static readonly BitSet _SET_in_setClause395 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assignment_in_setClause400 = new BitSet(new ulong[]{0x4000000008UL});
		public static readonly BitSet _EQ_in_assignment427 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _propertyRef_in_assignment432 = new BitSet(new ulong[]{0x8801003108ED010UL,0x561006C01F814010UL,0x1UL});
		public static readonly BitSet _newValue_in_assignment438 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_newValue454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_in_newValue458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unionedQuery_in_query469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UNION_in_query476 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _unionedQuery_in_query478 = new BitSet(new ulong[]{0x0UL,0x1000020000000000UL});
		public static readonly BitSet _query_in_query480 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _QUERY_in_unionedQuery503 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SELECT_FROM_in_unionedQuery515 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _fromClause_in_unionedQuery523 = new BitSet(new ulong[]{0x8UL,0x400000000000UL});
		public static readonly BitSet _selectClause_in_unionedQuery532 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _whereClause_in_unionedQuery547 = new BitSet(new ulong[]{0x28000000000008UL,0x42000800000000UL});
		public static readonly BitSet _groupClause_in_unionedQuery557 = new BitSet(new ulong[]{0x20000000000008UL,0x42000800000000UL});
		public static readonly BitSet _havingClause_in_unionedQuery567 = new BitSet(new ulong[]{0x8UL,0x42000800000000UL});
		public static readonly BitSet _orderClause_in_unionedQuery577 = new BitSet(new ulong[]{0x8UL,0x42000000000000UL});
		public static readonly BitSet _skipClause_in_unionedQuery587 = new BitSet(new ulong[]{0x8UL,0x40000000000000UL});
		public static readonly BitSet _takeClause_in_unionedQuery597 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ORDER_in_orderClause654 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _orderExprs_in_orderClause659 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _query_in_orderClause663 = new BitSet(new ulong[]{0x40000408UL});
		public static readonly BitSet _expr_in_orderExprs686 = new BitSet(new ulong[]{0x8801003508ED412UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _orderExprs_in_orderExprs700 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SKIP_in_skipClause714 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _NUM_INT_in_skipClause717 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _parameter_in_skipClause721 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TAKE_in_takeClause735 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _NUM_INT_in_takeClause738 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _parameter_in_takeClause742 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _GROUP_in_groupClause756 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_groupClause761 = new BitSet(new ulong[]{0x8801003108ED018UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _HAVING_in_havingClause777 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_havingClause779 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SELECT_in_selectClause793 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _DISTINCT_in_selectClause800 = new BitSet(new ulong[]{0x10800007188ED250UL,0x141006C03F014000UL,0x1UL});
		public static readonly BitSet _selectExprList_in_selectClause806 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _selectExpr_in_selectExprList841 = new BitSet(new ulong[]{0x10800007188ED252UL,0x141006C03F014000UL,0x1UL});
		public static readonly BitSet _aliasedSelectExpr_in_selectExprList845 = new BitSet(new ulong[]{0x10800007188ED252UL,0x141006C03F014000UL,0x1UL});
		public static readonly BitSet _AS_in_aliasedSelectExpr869 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _selectExpr_in_aliasedSelectExpr873 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x1UL});
		public static readonly BitSet _identifier_in_aliasedSelectExpr877 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _propertyRef_in_selectExpr892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_selectExpr904 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _aliasRef_in_selectExpr908 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _OBJECT_in_selectExpr920 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _aliasRef_in_selectExpr924 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _constructor_in_selectExpr935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionCall_in_selectExpr946 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_in_selectExpr951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _count_in_selectExpr956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionFunction_in_selectExpr961 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_selectExpr969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arithmeticExpr_in_selectExpr974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_in_selectExpr979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_count991 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _aggregateExpr_in_count1006 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ROW_STAR_in_count1010 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CONSTRUCTOR_in_constructor1026 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _path_in_constructor1028 = new BitSet(new ulong[]{0x10800007188ED258UL,0x141006C03F014000UL,0x1UL});
		public static readonly BitSet _selectExpr_in_constructor1032 = new BitSet(new ulong[]{0x10800007188ED258UL,0x141006C03F014000UL,0x1UL});
		public static readonly BitSet _aliasedSelectExpr_in_constructor1036 = new BitSet(new ulong[]{0x10800007188ED258UL,0x141006C03F014000UL,0x1UL});
		public static readonly BitSet _expr_in_aggregateExpr1052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionFunction_in_aggregateExpr1058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromClause1078 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _fromElementList_in_fromClause1082 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _fromElement_in_fromElementList1100 = new BitSet(new ulong[]{0x400000000002UL,0x80000000020UL});
		public static readonly BitSet _RANGE_in_fromElement1125 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _path_in_fromElement1129 = new BitSet(new ulong[]{0x200000000028UL});
		public static readonly BitSet _ALIAS_in_fromElement1134 = new BitSet(new ulong[]{0x200000000008UL});
		public static readonly BitSet _FETCH_in_fromElement1141 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _joinElement_in_fromElement1168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FILTER_ENTITY_in_fromElement1183 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALIAS_in_fromElement1187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _JOIN_in_joinElement1216 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _joinType_in_joinElement1221 = new BitSet(new ulong[]{0x80200200000000UL,0x0UL,0x1UL});
		public static readonly BitSet _FETCH_in_joinElement1231 = new BitSet(new ulong[]{0x80000200000000UL,0x0UL,0x1UL});
		public static readonly BitSet _propertyRef_in_joinElement1237 = new BitSet(new ulong[]{0x200000000028UL,0x0UL,0x8UL});
		public static readonly BitSet _ALIAS_in_joinElement1242 = new BitSet(new ulong[]{0x200000000008UL,0x0UL,0x8UL});
		public static readonly BitSet _FETCH_in_joinElement1249 = new BitSet(new ulong[]{0x8UL,0x0UL,0x8UL});
		public static readonly BitSet _WITH_in_joinElement1258 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _LEFT_in_joinType1299 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _RIGHT_in_joinType1305 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _OUTER_in_joinType1311 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FULL_in_joinType1325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INNER_in_joinType1332 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_path1354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_path1362 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _path_in_path1366 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x1UL});
		public static readonly BitSet _identifier_in_path1370 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _path_in_pathAsIdent1389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_withClause1430 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_withClause1436 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _WHERE_in_whereClause1464 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_whereClause1470 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _AND_in_logicalExpr1496 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_logicalExpr1498 = new BitSet(new ulong[]{0xC94024200002090UL,0x4007A4A4CUL,0x1UL});
		public static readonly BitSet _logicalExpr_in_logicalExpr1500 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _OR_in_logicalExpr1507 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_logicalExpr1509 = new BitSet(new ulong[]{0xC94024200002090UL,0x4007A4A4CUL,0x1UL});
		public static readonly BitSet _logicalExpr_in_logicalExpr1511 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NOT_in_logicalExpr1518 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_logicalExpr1520 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _comparisonExpr_in_logicalExpr1526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionCall_in_logicalExpr1531 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalPath_in_logicalExpr1536 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addrExpr_in_logicalPath1555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EQ_in_comparisonExpr1593 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1595 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1597 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NE_in_comparisonExpr1604 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1606 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1608 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LT_in_comparisonExpr1615 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1617 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1619 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _GT_in_comparisonExpr1626 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1628 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1630 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LE_in_comparisonExpr1637 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1639 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1641 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _GE_in_comparisonExpr1648 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1650 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1652 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LIKE_in_comparisonExpr1659 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1661 = new BitSet(new ulong[]{0x8801003108ED010UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _expr_in_comparisonExpr1663 = new BitSet(new ulong[]{0x8000000008UL});
		public static readonly BitSet _ESCAPE_in_comparisonExpr1668 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_comparisonExpr1670 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NOT_LIKE_in_comparisonExpr1682 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1684 = new BitSet(new ulong[]{0x8801003108ED010UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _expr_in_comparisonExpr1686 = new BitSet(new ulong[]{0x8000000008UL});
		public static readonly BitSet _ESCAPE_in_comparisonExpr1691 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_comparisonExpr1693 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BETWEEN_in_comparisonExpr1705 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1707 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1709 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1711 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NOT_BETWEEN_in_comparisonExpr1718 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1720 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1722 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1724 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IN_in_comparisonExpr1731 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1733 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _inRhs_in_comparisonExpr1735 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NOT_IN_in_comparisonExpr1743 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1745 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _inRhs_in_comparisonExpr1747 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IS_NULL_in_comparisonExpr1755 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1757 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IS_NOT_NULL_in_comparisonExpr1764 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1766 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _EXISTS_in_comparisonExpr1775 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_comparisonExpr1779 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _collectionFunctionOrSubselect_in_comparisonExpr1783 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IN_LIST_in_inRhs1807 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _collectionFunctionOrSubselect_in_inRhs1811 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_inRhs1815 = new BitSet(new ulong[]{0x8801003108ED018UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _expr_in_exprOrSubquery1831 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_in_exprOrSubquery1836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ANY_in_exprOrSubquery1842 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _collectionFunctionOrSubselect_in_exprOrSubquery1844 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ALL_in_exprOrSubquery1851 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _collectionFunctionOrSubselect_in_exprOrSubquery1853 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SOME_in_exprOrSubquery1860 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _collectionFunctionOrSubselect_in_exprOrSubquery1862 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _collectionFunction_in_collectionFunctionOrSubselect1875 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_in_collectionFunctionOrSubselect1880 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addrExpr_in_expr1894 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VECTOR_EXPR_in_expr1906 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1909 = new BitSet(new ulong[]{0x8801003108ED018UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _constant_in_expr1918 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arithmeticExpr_in_expr1923 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionCall_in_expr1928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_in_expr1940 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _count_in_expr1945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_in_arithmeticExpr1973 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr1975 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr1977 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MINUS_in_arithmeticExpr1984 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr1986 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr1988 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DIV_in_arithmeticExpr1995 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr1997 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr1999 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _STAR_in_arithmeticExpr2006 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2008 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2010 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BNOT_in_arithmeticExpr2017 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2019 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BAND_in_arithmeticExpr2026 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2028 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2030 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BOR_in_arithmeticExpr2037 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2039 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2041 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BXOR_in_arithmeticExpr2048 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2050 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2052 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _UNARY_MINUS_in_arithmeticExpr2060 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2062 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _caseExpr_in_arithmeticExpr2070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseExpr2082 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _WHEN_in_caseExpr2088 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_caseExpr2090 = new BitSet(new ulong[]{0x8801003108ED010UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _expr_in_caseExpr2092 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ELSE_in_caseExpr2099 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_caseExpr2101 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CASE2_in_caseExpr2113 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_caseExpr2117 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _WHEN_in_caseExpr2121 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_caseExpr2123 = new BitSet(new ulong[]{0x8801003108ED010UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _expr_in_caseExpr2125 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ELSE_in_caseExpr2132 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_caseExpr2134 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ELEMENTS_in_collectionFunction2156 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _propertyRef_in_collectionFunction2162 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INDICES_in_collectionFunction2181 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _propertyRef_in_collectionFunction2187 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _METHOD_CALL_in_functionCall2212 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _pathAsIdent_in_functionCall2217 = new BitSet(new ulong[]{0x80000000008UL});
		public static readonly BitSet _EXPR_LIST_in_functionCall2222 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_functionCall2225 = new BitSet(new ulong[]{0xC941243108EF018UL,0x561006C01FF34A5CUL,0x1UL});
		public static readonly BitSet _query_in_functionCall2229 = new BitSet(new ulong[]{0xC941243108EF018UL,0x561006C01FF34A5CUL,0x1UL});
		public static readonly BitSet _comparisonExpr_in_functionCall2233 = new BitSet(new ulong[]{0xC941243108EF018UL,0x561006C01FF34A5CUL,0x1UL});
		public static readonly BitSet _AGGREGATE_in_functionCall2252 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _aggregateExpr_in_functionCall2254 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _literal_in_constant2267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_in_constant2272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_constant2279 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_constant2289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _JAVA_CONSTANT_in_constant2296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericLiteral_in_literal2307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stringLiteral_in_literal2312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUOTED_String_in_stringLiteral2359 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addrExprDot_in_addrExpr2389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addrExprIndex_in_addrExpr2396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addrExprIdent_in_addrExpr2403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_addrExprDot2427 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _addrExprLhs_in_addrExprDot2431 = new BitSet(new ulong[]{0x1080000400100000UL,0x0UL,0x1UL});
		public static readonly BitSet _propertyName_in_addrExprDot2435 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INDEX_OP_in_addrExprIndex2474 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _addrExprLhs_in_addrExprIndex2478 = new BitSet(new ulong[]{0x8801003108ED010UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _expr_in_addrExprIndex2482 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _identifier_in_addrExprIdent2514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addrExpr_in_addrExprLhs2542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_propertyName2555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CLASS_in_propertyName2560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELEMENTS_in_propertyName2565 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDICES_in_propertyName2570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyRefPath_in_propertyRef2582 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyRefIdent_in_propertyRef2587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_propertyRefPath2607 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _propertyRefLhs_in_propertyRefPath2611 = new BitSet(new ulong[]{0x1080000400100000UL,0x0UL,0x1UL});
		public static readonly BitSet _propertyName_in_propertyRefPath2615 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _identifier_in_propertyRefIdent2652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyRef_in_propertyRefLhs2664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_aliasRef2685 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLON_in_parameter2703 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _identifier_in_parameter2707 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PARAM_in_parameter2728 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _NUM_INT_in_parameter2733 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NUM_INT_in_numericInteger2766 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  NHibernate.Hql.Ast.ANTLR 
