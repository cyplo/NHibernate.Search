<?xml version="1.0"?>
<!-- 

  This mapping demonstrates the use of Hibernate with
  all-handwritten SQL!
     
  This version is for Firebird
-->
<hibernate-mapping
	xmlns="urn:nhibernate-mapping-2.2"
	assembly="NHibernate.Test"
	namespace="NHibernate.Test.SqlTest"
	default-access="field.camelcase">

	<class name="Organization" table="ORGANIZATION">
		<id name="Id" unsaved-value="0" column="ORGID">
			<generator class="increment"/>
		</id>
		<property name="Name" not-null="true" column="NAME"/>
		<set name="Employments" 
			inverse="true"
			order-by="DUMMY">
			<key column="EMPLOYER"/>
			<!-- only needed for DDL generation -->
			<one-to-many class="Employment"/>
			<loader query-ref="organizationEmployments"/>
		</set>
		<!-- query-list name="currentEmployments" 
			query-ref="organizationCurrentEmployments"-->
		<loader query-ref="organization"/>
		<sql-insert>INSERT INTO ORGANIZATION (NAME, ORGID) VALUES ( UPPER(?), ? )</sql-insert>
		<sql-update>UPDATE ORGANIZATION SET NAME=UPPER(?) WHERE ORGID=?</sql-update>
		<sql-delete>DELETE FROM ORGANIZATION WHERE ORGID=?</sql-delete>
	</class>

	<class name="Person" table="PERSON">
		<id name="Id" unsaved-value="0" column="PERID">
			<generator class="increment"/>
		</id>
		<property name="Name" not-null="true" column="NAME"/>
		<loader query-ref="person"/>
		<sql-insert>INSERT INTO PERSON (NAME, PERID) VALUES ( UPPER(?), ? )</sql-insert>
		<sql-update>UPDATE PERSON SET NAME=UPPER(?) WHERE PERID=?</sql-update>
		<sql-delete>DELETE FROM PERSON WHERE PERID=?</sql-delete>
	</class>

	<class name="Employment" table="EMPLOYMENT">
		<id name="employmentId" unsaved-value="0" column="EMPID">
			<generator class="increment"/>
		</id>
		<many-to-one name="Employee" column="EMPLOYEE" not-null="true" update="false"/>
		<many-to-one name="Employer" column="EMPLOYER" not-null="true" update="false"/>
		<property name="StartDate" column="STARTDATE" not-null="true" update="false" insert="false"/>
		<property name="EndDate" column="ENDDATE" insert="false" type="NHibernate.Test.SqlTest.NullDateUserType, NHibernate.Test"/>
		<property name="RegionCode" column="REGIONCODE" update="false"/>
		<property name="Salary" type="NHibernate.Test.SqlTest.MonetaryAmountUserType, NHibernate.Test">
			<column name="AVALUE" sql-type="float"/>
			<column name="CURRENCY"/>
		</property>
		<loader query-ref="employment"/>
		<sql-insert>
			INSERT INTO EMPLOYMENT
			(EMPLOYEE, EMPLOYER, STARTDATE, REGIONCODE, AVALUE, CURRENCY, EMPID)
			VALUES (?, ?, 'NOW', UPPER(?), ?, ?, ?)
		</sql-insert>
		<sql-update>UPDATE EMPLOYMENT SET ENDDATE=?, AVALUE=?, CURRENCY=? WHERE EMPID=?</sql-update>
		<sql-delete>DELETE FROM EMPLOYMENT WHERE EMPID=?</sql-delete>
	</class>

	<resultset name="org-emp-regionCode">
		<return-scalar column="regionCode" type="string"/>
		<return alias="org" class="Organization"/>
		<return-join alias="emp" property="org.Employments"/>
	</resultset>

	<resultset name="org-emp-person">
		<return alias="org" class="Organization"/>
		<return-join alias="emp" property="org.Employments"/>
		<return-join alias="pers" property="emp.Employee"/>
	</resultset>

	<sql-query name="person">
		<return alias="p" class="Person" lock-mode="upgrade"/>
		SELECT NAME AS {p.Name}, PERID AS {p.Id} FROM PERSON WHERE PERID=? FOR UPDATE
	</sql-query>

	<sql-query name="organization">
		<return alias="org" class="Organization"/>
		<return-join alias="emp" property="org.Employments"/>
		SELECT {org.*}, {emp.*}
		FROM ORGANIZATION org
		LEFT OUTER JOIN EMPLOYMENT emp ON org.ORGID = emp.EMPLOYER
		WHERE org.ORGID=?
	</sql-query>


	<!--sql-query name="organization">
		<return alias="org" class="Organization"/>
		SELECT NAME AS {org.name}, ORGID AS {org.id} FROM ORGANIZATION
		WHERE ORGID=?
	</sql-query-->

	<sql-query name="allOrganizationsWithEmployees">
		<!-- TODO H3: add flush-mode="never" -->
		<return alias="org" class="Organization"/>
		SELECT DISTINCT org.NAME AS {org.Name}, org.ORGID AS {org.Id}
		FROM ORGANIZATION org
		INNER JOIN EMPLOYMENT e ON e.EMPLOYER = org.ORGID
	</sql-query>

	<sql-query name="employment">
		<return alias="emp" class="Employment"/>
		SELECT EMPLOYEE AS {emp.Employee}, EMPLOYER AS {emp.Employer},
		STARTDATE AS {emp.StartDate}, ENDDATE AS {emp.EndDate},
		REGIONCODE as {emp.RegionCode}, EMPID AS {emp.Id}
		FROM EMPLOYMENT
		WHERE EMPID = ?
	</sql-query>

	<sql-query name="organizationEmployments">
		<load-collection alias="empcol" role="Organization.Employments"/>
		SELECT {empcol.*}
		FROM EMPLOYMENT empcol
		WHERE EMPLOYER = :id
		ORDER BY STARTDATE ASC, EMPLOYEE ASC
	</sql-query>


	<sql-query name="organizationCurrentEmployments">
		<return alias="emp" class="Employment">
			<return-property name="Salary">
				<!-- as multi column properties are not supported via the
		      {}-syntax, we need to provide an explicit column list for salary via <return-property> -->
				<return-column name="AVALUE"/>
				<return-column name="CURRENCY"/>
			</return-property>
			<!-- Here we are remapping endDate. Notice that we can still use {emp.EndDate} in the SQL. -->
			<return-property name="EndDate" column="myEndDate"/>
		</return>
		<synchronize table="EMPLOYMENT"/>
		SELECT EMPLOYEE AS {emp.Employee}, EMPLOYER AS {emp.Employer},
		STARTDATE AS {emp.StartDate}, ENDDATE AS {emp.EndDate},
		REGIONCODE as {emp.RegionCode}, EMPID AS {emp.Id}, AVALUE, CURRENCY
		FROM EMPLOYMENT
		WHERE EMPLOYER = :id AND ENDDATE IS NULL
		ORDER BY STARTDATE ASC
	</sql-query>

	<sql-query name="simpleScalar">
		<return-scalar column="name" type="string"/>
		<return-scalar column="value1" type="long"/>
		SELECT * FROM simpleScalar(:number)
	</sql-query>

	<sql-query name="paramhandling">
		<return-scalar column="value1" type="long"/>
		<return-scalar column="value2" type="long"/>
		SELECT * FROM paramHandling( ?, ?)
	</sql-query>

	<sql-query name="paramhandling_mixed">
		<return-scalar column="value1" type="long" />
		<return-scalar column="value2" type="long" />
		SELECT * FROM paramHandling( ?, :second)
	</sql-query>

	<sql-query name="selectAllEmployments">
		<return class="Employment">
			<return-property name="Employee" column="EMPLOYEE"/>
			<return-property name="Employer" column="EMPLOYER"/>
			<return-property name="StartDate" column="STARTDATE"/>
			<return-property name="EndDate" column="ENDDATE"/>
			<return-property name="RegionCode" column="REGIONCODE"/>
			<return-property name="id" column="EMPID"/>
			<return-property name="Salary">
				<!-- as multi column properties are not supported via the
				{}-syntax, we need to provide an explicit column list for salary via <return-property> -->
				<return-column name="AVALUE"/>
				<return-column name="CURRENCY"/>
			</return-property>
		</return>
		SELECT * FROM selectAllEmployments
	</sql-query>

	<database-object>
		<create>
CREATE PROCEDURE selectAllEmployments
RETURNS(EMPLOYEE BIGINT, EMPLOYER BIGINT, STARTDATE TIMESTAMP, ENDDATE DATE,
REGIONCODE VARCHAR(255) CHARACTER SET WIN1252, EMPID BIGINT, AVALUE FLOAT,
CURRENCY VARCHAR(3) CHARACTER SET WIN1252)
AS
BEGIN
FOR SELECT EMPLOYEE, EMPLOYER, STARTDATE, ENDDATE, REGIONCODE, EMPID, AVALUE, CURRENCY FROM EMPLOYMENT
INTO :EMPLOYEE, :EMPLOYER, :STARTDATE, :ENDDATE, :REGIONCODE, :EMPID, :AVALUE, :CURRENCY DO
SUSPEND;
END;
		</create>
		<drop>
			DROP PROCEDURE selectAllEmployments
		</drop>
	</database-object>

	<database-object>
		<create>
CREATE PROCEDURE paramHandling(J INTEGER, I INTEGER)
RETURNS(VALUE1 INTEGER, VALUE2 INTEGER)
AS
BEGIN
VALUE1 = :J;
VALUE2 = :I;
SUSPEND;
END;
		</create>
		<drop>
			DROP PROCEDURE paramHandling
		</drop>
	</database-object>

	<database-object>
		<create>
CREATE PROCEDURE simpleScalar(ANUMBER INTEGER)
RETURNS(VALUE1 INTEGER, NAME VARCHAR(10) CHARACTER SET UNICODE_FSS)
AS
BEGIN
VALUE1 = :ANUMBER;
NAME = 'getAll';
SUSPEND;
END;
		</create>
		<drop>
			DROP PROCEDURE simpleScalar
		</drop>
	</database-object>

</hibernate-mapping>
